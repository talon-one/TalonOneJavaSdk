/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import one.talon.model.CodeGeneratorSettings;
import org.threeten.bp.OffsetDateTime;

/**
 * BaseLoyaltyProgram
 */

public class BaseLoyaltyProgram {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SUBSCRIBED_APPLICATIONS = "subscribedApplications";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBED_APPLICATIONS)
  private List<Integer> subscribedApplications = null;

  public static final String SERIALIZED_NAME_DEFAULT_VALIDITY = "defaultValidity";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALIDITY)
  private String defaultValidity;

  public static final String SERIALIZED_NAME_DEFAULT_PENDING = "defaultPending";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PENDING)
  private String defaultPending;

  public static final String SERIALIZED_NAME_ALLOW_SUBLEDGER = "allowSubledger";
  @SerializedName(SERIALIZED_NAME_ALLOW_SUBLEDGER)
  private Boolean allowSubledger;

  public static final String SERIALIZED_NAME_USERS_PER_CARD_LIMIT = "usersPerCardLimit";
  @SerializedName(SERIALIZED_NAME_USERS_PER_CARD_LIMIT)
  private Integer usersPerCardLimit;

  public static final String SERIALIZED_NAME_SANDBOX = "sandbox";
  @SerializedName(SERIALIZED_NAME_SANDBOX)
  private Boolean sandbox;

  /**
   * The policy that defines when the customer joins the loyalty program.   - &#x60;not_join&#x60;: The customer does not join the loyalty program but can still earn and spend loyalty points.       **Note**: The customer does not have a program join date.   - &#x60;points_activated&#x60;: The customer joins the loyalty program only when their earned loyalty points become active for the first time.   - &#x60;points_earned&#x60;: The customer joins the loyalty program when they earn loyalty points for the first time. 
   */
  @JsonAdapter(ProgramJoinPolicyEnum.Adapter.class)
  public enum ProgramJoinPolicyEnum {
    NOT_JOIN("not_join"),
    
    POINTS_ACTIVATED("points_activated"),
    
    POINTS_EARNED("points_earned");

    private String value;

    ProgramJoinPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProgramJoinPolicyEnum fromValue(String value) {
      for (ProgramJoinPolicyEnum b : ProgramJoinPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProgramJoinPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProgramJoinPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProgramJoinPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProgramJoinPolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROGRAM_JOIN_POLICY = "programJoinPolicy";
  @SerializedName(SERIALIZED_NAME_PROGRAM_JOIN_POLICY)
  private ProgramJoinPolicyEnum programJoinPolicy;

  /**
   * The policy that defines how tier expiration, used to reevaluate the customer&#39;s current tier, is determined.  - &#x60;tier_start_date&#x60;: The tier expiration is relative to when the customer joined the current tier.  - &#x60;program_join_date&#x60;: The tier expiration is relative to when the customer joined the loyalty program.  - &#x60;customer_attribute&#x60;: The tier expiration is determined by a custom customer attribute.  - &#x60;absolute_expiration&#x60;: The tier is reevaluated at the start of each tier cycle. For this policy, it is required to provide a &#x60;tierCycleStartDate&#x60;. 
   */
  @JsonAdapter(TiersExpirationPolicyEnum.Adapter.class)
  public enum TiersExpirationPolicyEnum {
    TIER_START_DATE("tier_start_date"),
    
    PROGRAM_JOIN_DATE("program_join_date"),
    
    CUSTOMER_ATTRIBUTE("customer_attribute"),
    
    ABSOLUTE_EXPIRATION("absolute_expiration");

    private String value;

    TiersExpirationPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TiersExpirationPolicyEnum fromValue(String value) {
      for (TiersExpirationPolicyEnum b : TiersExpirationPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TiersExpirationPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TiersExpirationPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TiersExpirationPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TiersExpirationPolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TIERS_EXPIRATION_POLICY = "tiersExpirationPolicy";
  @SerializedName(SERIALIZED_NAME_TIERS_EXPIRATION_POLICY)
  private TiersExpirationPolicyEnum tiersExpirationPolicy;

  public static final String SERIALIZED_NAME_TIER_CYCLE_START_DATE = "tierCycleStartDate";
  @SerializedName(SERIALIZED_NAME_TIER_CYCLE_START_DATE)
  private OffsetDateTime tierCycleStartDate;

  public static final String SERIALIZED_NAME_TIERS_EXPIRE_IN = "tiersExpireIn";
  @SerializedName(SERIALIZED_NAME_TIERS_EXPIRE_IN)
  private String tiersExpireIn;

  /**
   * The policy that defines how customer tiers are downgraded in the loyalty program after tier reevaluation.  - &#x60;one_down&#x60;: If the customer doesn&#39;t have enough points to stay in the current tier, they are downgraded by one tier.  - &#x60;balance_based&#x60;: The customer&#39;s tier is reevaluated based on the amount of active points they have at the moment. 
   */
  @JsonAdapter(TiersDowngradePolicyEnum.Adapter.class)
  public enum TiersDowngradePolicyEnum {
    ONE_DOWN("one_down"),
    
    BALANCE_BASED("balance_based");

    private String value;

    TiersDowngradePolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TiersDowngradePolicyEnum fromValue(String value) {
      for (TiersDowngradePolicyEnum b : TiersDowngradePolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TiersDowngradePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TiersDowngradePolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TiersDowngradePolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TiersDowngradePolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TIERS_DOWNGRADE_POLICY = "tiersDowngradePolicy";
  @SerializedName(SERIALIZED_NAME_TIERS_DOWNGRADE_POLICY)
  private TiersDowngradePolicyEnum tiersDowngradePolicy;

  public static final String SERIALIZED_NAME_CARD_CODE_SETTINGS = "cardCodeSettings";
  @SerializedName(SERIALIZED_NAME_CARD_CODE_SETTINGS)
  private CodeGeneratorSettings cardCodeSettings;

  /**
   * The policy that defines the rollback of points in case of a partially returned, cancelled, or reopened [customer session](https://docs.talon.one/docs/dev/concepts/entities/customer-sessions). - &#x60;only_pending&#x60;: Only pending points can be rolled back. - &#x60;within_balance&#x60;: Available active points can be rolled back if there aren&#39;t enough pending points. The active balance of the customer cannot be negative. 
   */
  @JsonAdapter(ReturnPolicyEnum.Adapter.class)
  public enum ReturnPolicyEnum {
    ONLY_PENDING("only_pending"),
    
    WITHIN_BALANCE("within_balance");

    private String value;

    ReturnPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReturnPolicyEnum fromValue(String value) {
      for (ReturnPolicyEnum b : ReturnPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReturnPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReturnPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReturnPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReturnPolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RETURN_POLICY = "returnPolicy";
  @SerializedName(SERIALIZED_NAME_RETURN_POLICY)
  private ReturnPolicyEnum returnPolicy;


  public BaseLoyaltyProgram title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * The display title for the Loyalty Program.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Point collection", value = "The display title for the Loyalty Program.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public BaseLoyaltyProgram description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of our Loyalty Program.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Customers collect 10 points per 1$ spent", value = "Description of our Loyalty Program.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public BaseLoyaltyProgram subscribedApplications(List<Integer> subscribedApplications) {
    
    this.subscribedApplications = subscribedApplications;
    return this;
  }

  public BaseLoyaltyProgram addSubscribedApplicationsItem(Integer subscribedApplicationsItem) {
    if (this.subscribedApplications == null) {
      this.subscribedApplications = new ArrayList<Integer>();
    }
    this.subscribedApplications.add(subscribedApplicationsItem);
    return this;
  }

   /**
   * A list containing the IDs of all applications that are subscribed to this Loyalty Program.
   * @return subscribedApplications
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[132, 97]", value = "A list containing the IDs of all applications that are subscribed to this Loyalty Program.")

  public List<Integer> getSubscribedApplications() {
    return subscribedApplications;
  }


  public void setSubscribedApplications(List<Integer> subscribedApplications) {
    this.subscribedApplications = subscribedApplications;
  }


  public BaseLoyaltyProgram defaultValidity(String defaultValidity) {
    
    this.defaultValidity = defaultValidity;
    return this;
  }

   /**
   * The default duration after which new loyalty points should expire. Can be &#39;unlimited&#39; or a specific time. The time format is a number followed by one letter indicating the time unit, like &#39;30s&#39;, &#39;40m&#39;, &#39;1h&#39;, &#39;5D&#39;, &#39;7W&#39;, or 10M&#39;. These rounding suffixes are also supported: - &#39;_D&#39; for rounding down. Can be used as a suffix after &#39;D&#39;, and signifies the start of the day. - &#39;_U&#39; for rounding up. Can be used as a suffix after &#39;D&#39;, &#39;W&#39;, and &#39;M&#39;, and signifies the end of the day, week, and month. 
   * @return defaultValidity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2W_U", value = "The default duration after which new loyalty points should expire. Can be 'unlimited' or a specific time. The time format is a number followed by one letter indicating the time unit, like '30s', '40m', '1h', '5D', '7W', or 10M'. These rounding suffixes are also supported: - '_D' for rounding down. Can be used as a suffix after 'D', and signifies the start of the day. - '_U' for rounding up. Can be used as a suffix after 'D', 'W', and 'M', and signifies the end of the day, week, and month. ")

  public String getDefaultValidity() {
    return defaultValidity;
  }


  public void setDefaultValidity(String defaultValidity) {
    this.defaultValidity = defaultValidity;
  }


  public BaseLoyaltyProgram defaultPending(String defaultPending) {
    
    this.defaultPending = defaultPending;
    return this;
  }

   /**
   * The default duration of the pending time after which points should be valid. Can be &#39;immediate&#39; or a specific time. The time format is a number followed by one letter indicating the time unit, like &#39;30s&#39;, &#39;40m&#39;, &#39;1h&#39;, &#39;5D&#39;, &#39;7W&#39;, or 10M&#39;. These rounding suffixes are also supported: - &#39;_D&#39; for rounding down. Can be used as a suffix after &#39;D&#39;, and signifies the start of the day. - &#39;_U&#39; for rounding up. Can be used as a suffix after &#39;D&#39;, &#39;W&#39;, and &#39;M&#39;, and signifies the end of the day, week, and month. 
   * @return defaultPending
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "immediate", value = "The default duration of the pending time after which points should be valid. Can be 'immediate' or a specific time. The time format is a number followed by one letter indicating the time unit, like '30s', '40m', '1h', '5D', '7W', or 10M'. These rounding suffixes are also supported: - '_D' for rounding down. Can be used as a suffix after 'D', and signifies the start of the day. - '_U' for rounding up. Can be used as a suffix after 'D', 'W', and 'M', and signifies the end of the day, week, and month. ")

  public String getDefaultPending() {
    return defaultPending;
  }


  public void setDefaultPending(String defaultPending) {
    this.defaultPending = defaultPending;
  }


  public BaseLoyaltyProgram allowSubledger(Boolean allowSubledger) {
    
    this.allowSubledger = allowSubledger;
    return this;
  }

   /**
   * Indicates if this program supports subledgers inside the program.
   * @return allowSubledger
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicates if this program supports subledgers inside the program.")

  public Boolean getAllowSubledger() {
    return allowSubledger;
  }


  public void setAllowSubledger(Boolean allowSubledger) {
    this.allowSubledger = allowSubledger;
  }


  public BaseLoyaltyProgram usersPerCardLimit(Integer usersPerCardLimit) {
    
    this.usersPerCardLimit = usersPerCardLimit;
    return this;
  }

   /**
   * The max amount of user profiles with whom a card can be shared. This can be set to 0 for no limit. This property is only used when &#x60;cardBased&#x60; is &#x60;true&#x60;. 
   * minimum: 0
   * @return usersPerCardLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "111", value = "The max amount of user profiles with whom a card can be shared. This can be set to 0 for no limit. This property is only used when `cardBased` is `true`. ")

  public Integer getUsersPerCardLimit() {
    return usersPerCardLimit;
  }


  public void setUsersPerCardLimit(Integer usersPerCardLimit) {
    this.usersPerCardLimit = usersPerCardLimit;
  }


  public BaseLoyaltyProgram sandbox(Boolean sandbox) {
    
    this.sandbox = sandbox;
    return this;
  }

   /**
   * Indicates if this program is a live or sandbox program. Programs of a given type can only be connected to Applications of the same type.
   * @return sandbox
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates if this program is a live or sandbox program. Programs of a given type can only be connected to Applications of the same type.")

  public Boolean getSandbox() {
    return sandbox;
  }


  public void setSandbox(Boolean sandbox) {
    this.sandbox = sandbox;
  }


  public BaseLoyaltyProgram programJoinPolicy(ProgramJoinPolicyEnum programJoinPolicy) {
    
    this.programJoinPolicy = programJoinPolicy;
    return this;
  }

   /**
   * The policy that defines when the customer joins the loyalty program.   - &#x60;not_join&#x60;: The customer does not join the loyalty program but can still earn and spend loyalty points.       **Note**: The customer does not have a program join date.   - &#x60;points_activated&#x60;: The customer joins the loyalty program only when their earned loyalty points become active for the first time.   - &#x60;points_earned&#x60;: The customer joins the loyalty program when they earn loyalty points for the first time. 
   * @return programJoinPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The policy that defines when the customer joins the loyalty program.   - `not_join`: The customer does not join the loyalty program but can still earn and spend loyalty points.       **Note**: The customer does not have a program join date.   - `points_activated`: The customer joins the loyalty program only when their earned loyalty points become active for the first time.   - `points_earned`: The customer joins the loyalty program when they earn loyalty points for the first time. ")

  public ProgramJoinPolicyEnum getProgramJoinPolicy() {
    return programJoinPolicy;
  }


  public void setProgramJoinPolicy(ProgramJoinPolicyEnum programJoinPolicy) {
    this.programJoinPolicy = programJoinPolicy;
  }


  public BaseLoyaltyProgram tiersExpirationPolicy(TiersExpirationPolicyEnum tiersExpirationPolicy) {
    
    this.tiersExpirationPolicy = tiersExpirationPolicy;
    return this;
  }

   /**
   * The policy that defines how tier expiration, used to reevaluate the customer&#39;s current tier, is determined.  - &#x60;tier_start_date&#x60;: The tier expiration is relative to when the customer joined the current tier.  - &#x60;program_join_date&#x60;: The tier expiration is relative to when the customer joined the loyalty program.  - &#x60;customer_attribute&#x60;: The tier expiration is determined by a custom customer attribute.  - &#x60;absolute_expiration&#x60;: The tier is reevaluated at the start of each tier cycle. For this policy, it is required to provide a &#x60;tierCycleStartDate&#x60;. 
   * @return tiersExpirationPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The policy that defines how tier expiration, used to reevaluate the customer's current tier, is determined.  - `tier_start_date`: The tier expiration is relative to when the customer joined the current tier.  - `program_join_date`: The tier expiration is relative to when the customer joined the loyalty program.  - `customer_attribute`: The tier expiration is determined by a custom customer attribute.  - `absolute_expiration`: The tier is reevaluated at the start of each tier cycle. For this policy, it is required to provide a `tierCycleStartDate`. ")

  public TiersExpirationPolicyEnum getTiersExpirationPolicy() {
    return tiersExpirationPolicy;
  }


  public void setTiersExpirationPolicy(TiersExpirationPolicyEnum tiersExpirationPolicy) {
    this.tiersExpirationPolicy = tiersExpirationPolicy;
  }


  public BaseLoyaltyProgram tierCycleStartDate(OffsetDateTime tierCycleStartDate) {
    
    this.tierCycleStartDate = tierCycleStartDate;
    return this;
  }

   /**
   * Timestamp at which the tier cycle starts for all customers in the loyalty program.  **Note**: This is only required when the tier expiration policy is set to &#x60;absolute_expiration&#x60;. 
   * @return tierCycleStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-09-12T10:12:42Z", value = "Timestamp at which the tier cycle starts for all customers in the loyalty program.  **Note**: This is only required when the tier expiration policy is set to `absolute_expiration`. ")

  public OffsetDateTime getTierCycleStartDate() {
    return tierCycleStartDate;
  }


  public void setTierCycleStartDate(OffsetDateTime tierCycleStartDate) {
    this.tierCycleStartDate = tierCycleStartDate;
  }


  public BaseLoyaltyProgram tiersExpireIn(String tiersExpireIn) {
    
    this.tiersExpireIn = tiersExpireIn;
    return this;
  }

   /**
   * The amount of time after which the tier expires and is reevaluated.  The time format is an **integer** followed by one letter indicating the time unit. Examples: &#x60;30s&#x60;, &#x60;40m&#x60;, &#x60;1h&#x60;, &#x60;5D&#x60;, &#x60;7W&#x60;, &#x60;10M&#x60;, &#x60;15Y&#x60;.  Available units:  - &#x60;s&#x60;: seconds - &#x60;m&#x60;: minutes - &#x60;h&#x60;: hours - &#x60;D&#x60;: days - &#x60;W&#x60;: weeks - &#x60;M&#x60;: months - &#x60;Y&#x60;: years  You can round certain units up or down: - &#x60;_D&#x60; for rounding down days only. Signifies the start of the day. - &#x60;_U&#x60; for rounding up days, weeks, months and years. Signifies the end of the day, week, month or year. 
   * @return tiersExpireIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "27W_U", value = "The amount of time after which the tier expires and is reevaluated.  The time format is an **integer** followed by one letter indicating the time unit. Examples: `30s`, `40m`, `1h`, `5D`, `7W`, `10M`, `15Y`.  Available units:  - `s`: seconds - `m`: minutes - `h`: hours - `D`: days - `W`: weeks - `M`: months - `Y`: years  You can round certain units up or down: - `_D` for rounding down days only. Signifies the start of the day. - `_U` for rounding up days, weeks, months and years. Signifies the end of the day, week, month or year. ")

  public String getTiersExpireIn() {
    return tiersExpireIn;
  }


  public void setTiersExpireIn(String tiersExpireIn) {
    this.tiersExpireIn = tiersExpireIn;
  }


  public BaseLoyaltyProgram tiersDowngradePolicy(TiersDowngradePolicyEnum tiersDowngradePolicy) {
    
    this.tiersDowngradePolicy = tiersDowngradePolicy;
    return this;
  }

   /**
   * The policy that defines how customer tiers are downgraded in the loyalty program after tier reevaluation.  - &#x60;one_down&#x60;: If the customer doesn&#39;t have enough points to stay in the current tier, they are downgraded by one tier.  - &#x60;balance_based&#x60;: The customer&#39;s tier is reevaluated based on the amount of active points they have at the moment. 
   * @return tiersDowngradePolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The policy that defines how customer tiers are downgraded in the loyalty program after tier reevaluation.  - `one_down`: If the customer doesn't have enough points to stay in the current tier, they are downgraded by one tier.  - `balance_based`: The customer's tier is reevaluated based on the amount of active points they have at the moment. ")

  public TiersDowngradePolicyEnum getTiersDowngradePolicy() {
    return tiersDowngradePolicy;
  }


  public void setTiersDowngradePolicy(TiersDowngradePolicyEnum tiersDowngradePolicy) {
    this.tiersDowngradePolicy = tiersDowngradePolicy;
  }


  public BaseLoyaltyProgram cardCodeSettings(CodeGeneratorSettings cardCodeSettings) {
    
    this.cardCodeSettings = cardCodeSettings;
    return this;
  }

   /**
   * Get cardCodeSettings
   * @return cardCodeSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CodeGeneratorSettings getCardCodeSettings() {
    return cardCodeSettings;
  }


  public void setCardCodeSettings(CodeGeneratorSettings cardCodeSettings) {
    this.cardCodeSettings = cardCodeSettings;
  }


  public BaseLoyaltyProgram returnPolicy(ReturnPolicyEnum returnPolicy) {
    
    this.returnPolicy = returnPolicy;
    return this;
  }

   /**
   * The policy that defines the rollback of points in case of a partially returned, cancelled, or reopened [customer session](https://docs.talon.one/docs/dev/concepts/entities/customer-sessions). - &#x60;only_pending&#x60;: Only pending points can be rolled back. - &#x60;within_balance&#x60;: Available active points can be rolled back if there aren&#39;t enough pending points. The active balance of the customer cannot be negative. 
   * @return returnPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The policy that defines the rollback of points in case of a partially returned, cancelled, or reopened [customer session](https://docs.talon.one/docs/dev/concepts/entities/customer-sessions). - `only_pending`: Only pending points can be rolled back. - `within_balance`: Available active points can be rolled back if there aren't enough pending points. The active balance of the customer cannot be negative. ")

  public ReturnPolicyEnum getReturnPolicy() {
    return returnPolicy;
  }


  public void setReturnPolicy(ReturnPolicyEnum returnPolicy) {
    this.returnPolicy = returnPolicy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseLoyaltyProgram baseLoyaltyProgram = (BaseLoyaltyProgram) o;
    return Objects.equals(this.title, baseLoyaltyProgram.title) &&
        Objects.equals(this.description, baseLoyaltyProgram.description) &&
        Objects.equals(this.subscribedApplications, baseLoyaltyProgram.subscribedApplications) &&
        Objects.equals(this.defaultValidity, baseLoyaltyProgram.defaultValidity) &&
        Objects.equals(this.defaultPending, baseLoyaltyProgram.defaultPending) &&
        Objects.equals(this.allowSubledger, baseLoyaltyProgram.allowSubledger) &&
        Objects.equals(this.usersPerCardLimit, baseLoyaltyProgram.usersPerCardLimit) &&
        Objects.equals(this.sandbox, baseLoyaltyProgram.sandbox) &&
        Objects.equals(this.programJoinPolicy, baseLoyaltyProgram.programJoinPolicy) &&
        Objects.equals(this.tiersExpirationPolicy, baseLoyaltyProgram.tiersExpirationPolicy) &&
        Objects.equals(this.tierCycleStartDate, baseLoyaltyProgram.tierCycleStartDate) &&
        Objects.equals(this.tiersExpireIn, baseLoyaltyProgram.tiersExpireIn) &&
        Objects.equals(this.tiersDowngradePolicy, baseLoyaltyProgram.tiersDowngradePolicy) &&
        Objects.equals(this.cardCodeSettings, baseLoyaltyProgram.cardCodeSettings) &&
        Objects.equals(this.returnPolicy, baseLoyaltyProgram.returnPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, subscribedApplications, defaultValidity, defaultPending, allowSubledger, usersPerCardLimit, sandbox, programJoinPolicy, tiersExpirationPolicy, tierCycleStartDate, tiersExpireIn, tiersDowngradePolicy, cardCodeSettings, returnPolicy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseLoyaltyProgram {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    subscribedApplications: ").append(toIndentedString(subscribedApplications)).append("\n");
    sb.append("    defaultValidity: ").append(toIndentedString(defaultValidity)).append("\n");
    sb.append("    defaultPending: ").append(toIndentedString(defaultPending)).append("\n");
    sb.append("    allowSubledger: ").append(toIndentedString(allowSubledger)).append("\n");
    sb.append("    usersPerCardLimit: ").append(toIndentedString(usersPerCardLimit)).append("\n");
    sb.append("    sandbox: ").append(toIndentedString(sandbox)).append("\n");
    sb.append("    programJoinPolicy: ").append(toIndentedString(programJoinPolicy)).append("\n");
    sb.append("    tiersExpirationPolicy: ").append(toIndentedString(tiersExpirationPolicy)).append("\n");
    sb.append("    tierCycleStartDate: ").append(toIndentedString(tierCycleStartDate)).append("\n");
    sb.append("    tiersExpireIn: ").append(toIndentedString(tiersExpireIn)).append("\n");
    sb.append("    tiersDowngradePolicy: ").append(toIndentedString(tiersDowngradePolicy)).append("\n");
    sb.append("    cardCodeSettings: ").append(toIndentedString(cardCodeSettings)).append("\n");
    sb.append("    returnPolicy: ").append(toIndentedString(returnPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

