/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * NewNotificationTest
 */

public class NewNotificationTest {
  /**
   * The notification type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CAMPAIGN("campaign"),
    
    LOYALTY_ADDED_DEDUCTED_POINTS("loyalty_added_deducted_points"),
    
    COUPON("coupon"),
    
    EXPIRING_POINTS("expiring_points"),
    
    PENDING_TO_ACTIVE_POINTS("pending_to_active_points"),
    
    STRIKETHROUGH_PRICING("strikethrough_pricing"),
    
    TIER_DOWNGRADE("tier_downgrade"),
    
    TIER_UPGRADE("tier_upgrade"),
    
    TIER_WILL_DOWNGRADE("tier_will_downgrade");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_QUERY_PARAMS = "queryParams";
  @SerializedName(SERIALIZED_NAME_QUERY_PARAMS)
  private List<String> queryParams = null;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List<String> headers = null;

  /**
   * API method for this notification.
   */
  @JsonAdapter(VerbEnum.Adapter.class)
  public enum VerbEnum {
    POST("POST"),
    
    PUT("PUT"),
    
    GET("GET"),
    
    DELETE("DELETE"),
    
    PATCH("PATCH");

    private String value;

    VerbEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerbEnum fromValue(String value) {
      for (VerbEnum b : VerbEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerbEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerbEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerbEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerbEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VERB = "verb";
  @SerializedName(SERIALIZED_NAME_VERB)
  private VerbEnum verb;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private String payload;


  public NewNotificationTest type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The notification type.
   * @return type
  **/
  @ApiModelProperty(example = "loyalty_added_deducted_points", required = true, value = "The notification type.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public NewNotificationTest queryParams(List<String> queryParams) {
    
    this.queryParams = queryParams;
    return this;
  }

  public NewNotificationTest addQueryParamsItem(String queryParamsItem) {
    if (this.queryParams == null) {
      this.queryParams = new ArrayList<String>();
    }
    this.queryParams.add(queryParamsItem);
    return this;
  }

   /**
   * Array of query parameters.
   * @return queryParams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[param1: value1]", value = "Array of query parameters.")

  public List<String> getQueryParams() {
    return queryParams;
  }


  public void setQueryParams(List<String> queryParams) {
    this.queryParams = queryParams;
  }


  public NewNotificationTest headers(List<String> headers) {
    
    this.headers = headers;
    return this;
  }

  public NewNotificationTest addHeadersItem(String headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<String>();
    }
    this.headers.add(headersItem);
    return this;
  }

   /**
   * List of API HTTP headers for the given webhook-based notification.
   * @return headers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "content-type: application/json", value = "List of API HTTP headers for the given webhook-based notification.")

  public List<String> getHeaders() {
    return headers;
  }


  public void setHeaders(List<String> headers) {
    this.headers = headers;
  }


  public NewNotificationTest verb(VerbEnum verb) {
    
    this.verb = verb;
    return this;
  }

   /**
   * API method for this notification.
   * @return verb
  **/
  @ApiModelProperty(example = "POST", required = true, value = "API method for this notification.")

  public VerbEnum getVerb() {
    return verb;
  }


  public void setVerb(VerbEnum verb) {
    this.verb = verb;
  }


  public NewNotificationTest url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * API URL for the given notification.
   * @return url
  **/
  @ApiModelProperty(example = "www.my-company.com/my-endpoint-name", required = true, value = "API URL for the given notification.")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public NewNotificationTest payload(String payload) {
    
    this.payload = payload;
    return this;
  }

   /**
   * API payload of this notification.
   * @return payload
  **/
  @ApiModelProperty(example = "{  \"message\": \"${message}\" }", required = true, value = "API payload of this notification.")

  public String getPayload() {
    return payload;
  }


  public void setPayload(String payload) {
    this.payload = payload;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewNotificationTest newNotificationTest = (NewNotificationTest) o;
    return Objects.equals(this.type, newNotificationTest.type) &&
        Objects.equals(this.queryParams, newNotificationTest.queryParams) &&
        Objects.equals(this.headers, newNotificationTest.headers) &&
        Objects.equals(this.verb, newNotificationTest.verb) &&
        Objects.equals(this.url, newNotificationTest.url) &&
        Objects.equals(this.payload, newNotificationTest.payload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, queryParams, headers, verb, url, payload);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewNotificationTest {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    queryParams: ").append(toIndentedString(queryParams)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    verb: ").append(toIndentedString(verb)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

