/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Target of the specific Okta event.
 */
@ApiModel(description = "Target of the specific Okta event.")

public class OktaEventTarget {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_ALTERNATE_ID = "alternateId";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_ID)
  private String alternateId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;


  public OktaEventTarget type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of the event target.
   * @return type
  **/
  @ApiModelProperty(example = "AppUser", required = true, value = "Type of the event target.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public OktaEventTarget alternateId(String alternateId) {
    
    this.alternateId = alternateId;
    return this;
  }

   /**
   * Identifier of the event target, depending on its type.
   * @return alternateId
  **/
  @ApiModelProperty(example = "john.doe@example.com", required = true, value = "Identifier of the event target, depending on its type.")

  public String getAlternateId() {
    return alternateId;
  }


  public void setAlternateId(String alternateId) {
    this.alternateId = alternateId;
  }


  public OktaEventTarget displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Display name of the event target.
   * @return displayName
  **/
  @ApiModelProperty(example = "John Doe", required = true, value = "Display name of the event target.")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OktaEventTarget oktaEventTarget = (OktaEventTarget) o;
    return Objects.equals(this.type, oktaEventTarget.type) &&
        Objects.equals(this.alternateId, oktaEventTarget.alternateId) &&
        Objects.equals(this.displayName, oktaEventTarget.displayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, alternateId, displayName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OktaEventTarget {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    alternateId: ").append(toIndentedString(alternateId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

