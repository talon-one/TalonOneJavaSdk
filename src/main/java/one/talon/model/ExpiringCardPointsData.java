/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;

/**
 * ExpiringCardPointsData
 */

public class ExpiringCardPointsData {
  public static final String SERIALIZED_NAME_EXPIRY_DATE = "ExpiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private LocalDate expiryDate;

  public static final String SERIALIZED_NAME_LOYALTY_PROGRAM_I_D = "LoyaltyProgramID";
  @SerializedName(SERIALIZED_NAME_LOYALTY_PROGRAM_I_D)
  private Long loyaltyProgramID;

  public static final String SERIALIZED_NAME_AMOUNT_OF_EXPIRING_POINTS = "AmountOfExpiringPoints";
  @SerializedName(SERIALIZED_NAME_AMOUNT_OF_EXPIRING_POINTS)
  private BigDecimal amountOfExpiringPoints;

  public static final String SERIALIZED_NAME_SUBLEDGER_I_D = "SubledgerID";
  @SerializedName(SERIALIZED_NAME_SUBLEDGER_I_D)
  private String subledgerID;

  public static final String SERIALIZED_NAME_CARD_IDENTIFIER = "CardIdentifier";
  @SerializedName(SERIALIZED_NAME_CARD_IDENTIFIER)
  private String cardIdentifier;

  public static final String SERIALIZED_NAME_USERS_PER_CARD_LIMIT = "UsersPerCardLimit";
  @SerializedName(SERIALIZED_NAME_USERS_PER_CARD_LIMIT)
  private Long usersPerCardLimit;

  public static final String SERIALIZED_NAME_PROFILES = "Profiles";
  @SerializedName(SERIALIZED_NAME_PROFILES)
  private List<String> profiles = new ArrayList<String>();


  public ExpiringCardPointsData expiryDate(LocalDate expiryDate) {
    
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * The expiration date of loyalty points.
   * @return expiryDate
  **/
  @ApiModelProperty(required = true, value = "The expiration date of loyalty points.")

  public LocalDate getExpiryDate() {
    return expiryDate;
  }


  public void setExpiryDate(LocalDate expiryDate) {
    this.expiryDate = expiryDate;
  }


  public ExpiringCardPointsData loyaltyProgramID(Long loyaltyProgramID) {
    
    this.loyaltyProgramID = loyaltyProgramID;
    return this;
  }

   /**
   * The ID of the loyalty program.
   * minimum: 1
   * @return loyaltyProgramID
  **/
  @ApiModelProperty(example = "5", required = true, value = "The ID of the loyalty program.")

  public Long getLoyaltyProgramID() {
    return loyaltyProgramID;
  }


  public void setLoyaltyProgramID(Long loyaltyProgramID) {
    this.loyaltyProgramID = loyaltyProgramID;
  }


  public ExpiringCardPointsData amountOfExpiringPoints(BigDecimal amountOfExpiringPoints) {
    
    this.amountOfExpiringPoints = amountOfExpiringPoints;
    return this;
  }

   /**
   * The amount of loyalty points that will be expired soon.
   * @return amountOfExpiringPoints
  **/
  @ApiModelProperty(example = "10.99", required = true, value = "The amount of loyalty points that will be expired soon.")

  public BigDecimal getAmountOfExpiringPoints() {
    return amountOfExpiringPoints;
  }


  public void setAmountOfExpiringPoints(BigDecimal amountOfExpiringPoints) {
    this.amountOfExpiringPoints = amountOfExpiringPoints;
  }


  public ExpiringCardPointsData subledgerID(String subledgerID) {
    
    this.subledgerID = subledgerID;
    return this;
  }

   /**
   * The ID of the subledger within the loyalty program where these points were added.
   * @return subledgerID
  **/
  @ApiModelProperty(example = "sub-123", required = true, value = "The ID of the subledger within the loyalty program where these points were added.")

  public String getSubledgerID() {
    return subledgerID;
  }


  public void setSubledgerID(String subledgerID) {
    this.subledgerID = subledgerID;
  }


  public ExpiringCardPointsData cardIdentifier(String cardIdentifier) {
    
    this.cardIdentifier = cardIdentifier;
    return this;
  }

   /**
   * The alphanumeric identifier of the loyalty card.
   * @return cardIdentifier
  **/
  @ApiModelProperty(example = "summer-loyalty-card-0543", required = true, value = "The alphanumeric identifier of the loyalty card.")

  public String getCardIdentifier() {
    return cardIdentifier;
  }


  public void setCardIdentifier(String cardIdentifier) {
    this.cardIdentifier = cardIdentifier;
  }


  public ExpiringCardPointsData usersPerCardLimit(Long usersPerCardLimit) {
    
    this.usersPerCardLimit = usersPerCardLimit;
    return this;
  }

   /**
   * The maximum number of customer profiles with which a card can be shared. This can be set to &#x60;0&#x60; for no limit. 
   * minimum: 0
   * @return usersPerCardLimit
  **/
  @ApiModelProperty(example = "5", required = true, value = "The maximum number of customer profiles with which a card can be shared. This can be set to `0` for no limit. ")

  public Long getUsersPerCardLimit() {
    return usersPerCardLimit;
  }


  public void setUsersPerCardLimit(Long usersPerCardLimit) {
    this.usersPerCardLimit = usersPerCardLimit;
  }


  public ExpiringCardPointsData profiles(List<String> profiles) {
    
    this.profiles = profiles;
    return this;
  }

  public ExpiringCardPointsData addProfilesItem(String profilesItem) {
    this.profiles.add(profilesItem);
    return this;
  }

   /**
   * The integration IDs of the customer profiles linked to the card.
   * @return profiles
  **/
  @ApiModelProperty(required = true, value = "The integration IDs of the customer profiles linked to the card.")

  public List<String> getProfiles() {
    return profiles;
  }


  public void setProfiles(List<String> profiles) {
    this.profiles = profiles;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpiringCardPointsData expiringCardPointsData = (ExpiringCardPointsData) o;
    return Objects.equals(this.expiryDate, expiringCardPointsData.expiryDate) &&
        Objects.equals(this.loyaltyProgramID, expiringCardPointsData.loyaltyProgramID) &&
        Objects.equals(this.amountOfExpiringPoints, expiringCardPointsData.amountOfExpiringPoints) &&
        Objects.equals(this.subledgerID, expiringCardPointsData.subledgerID) &&
        Objects.equals(this.cardIdentifier, expiringCardPointsData.cardIdentifier) &&
        Objects.equals(this.usersPerCardLimit, expiringCardPointsData.usersPerCardLimit) &&
        Objects.equals(this.profiles, expiringCardPointsData.profiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiryDate, loyaltyProgramID, amountOfExpiringPoints, subledgerID, cardIdentifier, usersPerCardLimit, profiles);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpiringCardPointsData {\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    loyaltyProgramID: ").append(toIndentedString(loyaltyProgramID)).append("\n");
    sb.append("    amountOfExpiringPoints: ").append(toIndentedString(amountOfExpiringPoints)).append("\n");
    sb.append("    subledgerID: ").append(toIndentedString(subledgerID)).append("\n");
    sb.append("    cardIdentifier: ").append(toIndentedString(cardIdentifier)).append("\n");
    sb.append("    usersPerCardLimit: ").append(toIndentedString(usersPerCardLimit)).append("\n");
    sb.append("    profiles: ").append(toIndentedString(profiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

