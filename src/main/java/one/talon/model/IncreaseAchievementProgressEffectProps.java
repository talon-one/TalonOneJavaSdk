/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * The properties specific to the \&quot;increaseAchievementProgress\&quot; effect. This gets triggered whenever a validated rule contained an \&quot;increase customer progress\&quot; effect.
 */
@ApiModel(description = "The properties specific to the \"increaseAchievementProgress\" effect. This gets triggered whenever a validated rule contained an \"increase customer progress\" effect.")

public class IncreaseAchievementProgressEffectProps {
  public static final String SERIALIZED_NAME_ACHIEVEMENT_ID = "achievementId";
  @SerializedName(SERIALIZED_NAME_ACHIEVEMENT_ID)
  private Integer achievementId;

  public static final String SERIALIZED_NAME_ACHIEVEMENT_NAME = "achievementName";
  @SerializedName(SERIALIZED_NAME_ACHIEVEMENT_NAME)
  private String achievementName;

  public static final String SERIALIZED_NAME_PROGRESS_TRACKER_ID = "progressTrackerId";
  @SerializedName(SERIALIZED_NAME_PROGRESS_TRACKER_ID)
  private Integer progressTrackerId;

  public static final String SERIALIZED_NAME_DELTA = "delta";
  @SerializedName(SERIALIZED_NAME_DELTA)
  private BigDecimal delta;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private BigDecimal value;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private BigDecimal target;

  public static final String SERIALIZED_NAME_IS_JUST_COMPLETED = "isJustCompleted";
  @SerializedName(SERIALIZED_NAME_IS_JUST_COMPLETED)
  private Boolean isJustCompleted;


  public IncreaseAchievementProgressEffectProps achievementId(Integer achievementId) {
    
    this.achievementId = achievementId;
    return this;
  }

   /**
   * The internal ID of the achievement.
   * @return achievementId
  **/
  @ApiModelProperty(example = "10", required = true, value = "The internal ID of the achievement.")

  public Integer getAchievementId() {
    return achievementId;
  }


  public void setAchievementId(Integer achievementId) {
    this.achievementId = achievementId;
  }


  public IncreaseAchievementProgressEffectProps achievementName(String achievementName) {
    
    this.achievementName = achievementName;
    return this;
  }

   /**
   * The name of the achievement.
   * @return achievementName
  **/
  @ApiModelProperty(example = "FreeCoffee10Orders", required = true, value = "The name of the achievement.")

  public String getAchievementName() {
    return achievementName;
  }


  public void setAchievementName(String achievementName) {
    this.achievementName = achievementName;
  }


  public IncreaseAchievementProgressEffectProps progressTrackerId(Integer progressTrackerId) {
    
    this.progressTrackerId = progressTrackerId;
    return this;
  }

   /**
   * The internal ID of the achievement progress tracker.
   * @return progressTrackerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The internal ID of the achievement progress tracker.")

  public Integer getProgressTrackerId() {
    return progressTrackerId;
  }


  public void setProgressTrackerId(Integer progressTrackerId) {
    this.progressTrackerId = progressTrackerId;
  }


  public IncreaseAchievementProgressEffectProps delta(BigDecimal delta) {
    
    this.delta = delta;
    return this;
  }

   /**
   * The value by which the customer&#39;s current progress in the achievement is increased.
   * @return delta
  **/
  @ApiModelProperty(required = true, value = "The value by which the customer's current progress in the achievement is increased.")

  public BigDecimal getDelta() {
    return delta;
  }


  public void setDelta(BigDecimal delta) {
    this.delta = delta;
  }


  public IncreaseAchievementProgressEffectProps value(BigDecimal value) {
    
    this.value = value;
    return this;
  }

   /**
   * The current progress of the customer in the achievement.
   * @return value
  **/
  @ApiModelProperty(required = true, value = "The current progress of the customer in the achievement.")

  public BigDecimal getValue() {
    return value;
  }


  public void setValue(BigDecimal value) {
    this.value = value;
  }


  public IncreaseAchievementProgressEffectProps target(BigDecimal target) {
    
    this.target = target;
    return this;
  }

   /**
   * The target value to complete the achievement.
   * @return target
  **/
  @ApiModelProperty(required = true, value = "The target value to complete the achievement.")

  public BigDecimal getTarget() {
    return target;
  }


  public void setTarget(BigDecimal target) {
    this.target = target;
  }


  public IncreaseAchievementProgressEffectProps isJustCompleted(Boolean isJustCompleted) {
    
    this.isJustCompleted = isJustCompleted;
    return this;
  }

   /**
   * Indicates if the customer has completed the achievement in the current session.
   * @return isJustCompleted
  **/
  @ApiModelProperty(required = true, value = "Indicates if the customer has completed the achievement in the current session.")

  public Boolean getIsJustCompleted() {
    return isJustCompleted;
  }


  public void setIsJustCompleted(Boolean isJustCompleted) {
    this.isJustCompleted = isJustCompleted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IncreaseAchievementProgressEffectProps increaseAchievementProgressEffectProps = (IncreaseAchievementProgressEffectProps) o;
    return Objects.equals(this.achievementId, increaseAchievementProgressEffectProps.achievementId) &&
        Objects.equals(this.achievementName, increaseAchievementProgressEffectProps.achievementName) &&
        Objects.equals(this.progressTrackerId, increaseAchievementProgressEffectProps.progressTrackerId) &&
        Objects.equals(this.delta, increaseAchievementProgressEffectProps.delta) &&
        Objects.equals(this.value, increaseAchievementProgressEffectProps.value) &&
        Objects.equals(this.target, increaseAchievementProgressEffectProps.target) &&
        Objects.equals(this.isJustCompleted, increaseAchievementProgressEffectProps.isJustCompleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(achievementId, achievementName, progressTrackerId, delta, value, target, isJustCompleted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IncreaseAchievementProgressEffectProps {\n");
    sb.append("    achievementId: ").append(toIndentedString(achievementId)).append("\n");
    sb.append("    achievementName: ").append(toIndentedString(achievementName)).append("\n");
    sb.append("    progressTrackerId: ").append(toIndentedString(progressTrackerId)).append("\n");
    sb.append("    delta: ").append(toIndentedString(delta)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    isJustCompleted: ").append(toIndentedString(isJustCompleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

