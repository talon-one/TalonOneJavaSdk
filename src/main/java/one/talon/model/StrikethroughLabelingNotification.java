/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import one.talon.model.StrikethroughChangedItem;
import one.talon.model.StrikethroughTrigger;

/**
 * The strikethrough labels notification for an application.
 */
@ApiModel(description = "The strikethrough labels notification for an application.")

public class StrikethroughLabelingNotification {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "applicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private Integer applicationId;

  public static final String SERIALIZED_NAME_CURRENT_BATCH = "currentBatch";
  @SerializedName(SERIALIZED_NAME_CURRENT_BATCH)
  private Integer currentBatch;

  public static final String SERIALIZED_NAME_TOTAL_BATCHES = "totalBatches";
  @SerializedName(SERIALIZED_NAME_TOTAL_BATCHES)
  private Integer totalBatches;

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private StrikethroughTrigger trigger;

  public static final String SERIALIZED_NAME_CHANGED_ITEMS = "changedItems";
  @SerializedName(SERIALIZED_NAME_CHANGED_ITEMS)
  private List<StrikethroughChangedItem> changedItems = new ArrayList<StrikethroughChangedItem>();


  public StrikethroughLabelingNotification applicationId(Integer applicationId) {
    
    this.applicationId = applicationId;
    return this;
  }

   /**
   * The ID of the application that catalog items labels belongs to.
   * @return applicationId
  **/
  @ApiModelProperty(example = "322", required = true, value = "The ID of the application that catalog items labels belongs to.")

  public Integer getApplicationId() {
    return applicationId;
  }


  public void setApplicationId(Integer applicationId) {
    this.applicationId = applicationId;
  }


  public StrikethroughLabelingNotification currentBatch(Integer currentBatch) {
    
    this.currentBatch = currentBatch;
    return this;
  }

   /**
   * The batch number of the notification. Notifications might be sent in different batches.
   * @return currentBatch
  **/
  @ApiModelProperty(example = "1", required = true, value = "The batch number of the notification. Notifications might be sent in different batches.")

  public Integer getCurrentBatch() {
    return currentBatch;
  }


  public void setCurrentBatch(Integer currentBatch) {
    this.currentBatch = currentBatch;
  }


  public StrikethroughLabelingNotification totalBatches(Integer totalBatches) {
    
    this.totalBatches = totalBatches;
    return this;
  }

   /**
   * The total number of batches for the notification.
   * @return totalBatches
  **/
  @ApiModelProperty(example = "10", required = true, value = "The total number of batches for the notification.")

  public Integer getTotalBatches() {
    return totalBatches;
  }


  public void setTotalBatches(Integer totalBatches) {
    this.totalBatches = totalBatches;
  }


  public StrikethroughLabelingNotification trigger(StrikethroughTrigger trigger) {
    
    this.trigger = trigger;
    return this;
  }

   /**
   * Get trigger
   * @return trigger
  **/
  @ApiModelProperty(required = true, value = "")

  public StrikethroughTrigger getTrigger() {
    return trigger;
  }


  public void setTrigger(StrikethroughTrigger trigger) {
    this.trigger = trigger;
  }


  public StrikethroughLabelingNotification changedItems(List<StrikethroughChangedItem> changedItems) {
    
    this.changedItems = changedItems;
    return this;
  }

  public StrikethroughLabelingNotification addChangedItemsItem(StrikethroughChangedItem changedItemsItem) {
    this.changedItems.add(changedItemsItem);
    return this;
  }

   /**
   * Get changedItems
   * @return changedItems
  **/
  @ApiModelProperty(required = true, value = "")

  public List<StrikethroughChangedItem> getChangedItems() {
    return changedItems;
  }


  public void setChangedItems(List<StrikethroughChangedItem> changedItems) {
    this.changedItems = changedItems;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StrikethroughLabelingNotification strikethroughLabelingNotification = (StrikethroughLabelingNotification) o;
    return Objects.equals(this.applicationId, strikethroughLabelingNotification.applicationId) &&
        Objects.equals(this.currentBatch, strikethroughLabelingNotification.currentBatch) &&
        Objects.equals(this.totalBatches, strikethroughLabelingNotification.totalBatches) &&
        Objects.equals(this.trigger, strikethroughLabelingNotification.trigger) &&
        Objects.equals(this.changedItems, strikethroughLabelingNotification.changedItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, currentBatch, totalBatches, trigger, changedItems);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StrikethroughLabelingNotification {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    currentBatch: ").append(toIndentedString(currentBatch)).append("\n");
    sb.append("    totalBatches: ").append(toIndentedString(totalBatches)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    changedItems: ").append(toIndentedString(changedItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

