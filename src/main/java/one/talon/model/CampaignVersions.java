/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CampaignVersions
 */

public class CampaignVersions {
  /**
   * The campaign revision state displayed in the Campaign Manager.
   */
  @JsonAdapter(RevisionFrontendStateEnum.Adapter.class)
  public enum RevisionFrontendStateEnum {
    REVISED("revised"),
    
    PENDING("pending");

    private String value;

    RevisionFrontendStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RevisionFrontendStateEnum fromValue(String value) {
      for (RevisionFrontendStateEnum b : RevisionFrontendStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RevisionFrontendStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RevisionFrontendStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RevisionFrontendStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RevisionFrontendStateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REVISION_FRONTEND_STATE = "revisionFrontendState";
  @SerializedName(SERIALIZED_NAME_REVISION_FRONTEND_STATE)
  private RevisionFrontendStateEnum revisionFrontendState;

  public static final String SERIALIZED_NAME_ACTIVE_REVISION_ID = "activeRevisionId";
  @SerializedName(SERIALIZED_NAME_ACTIVE_REVISION_ID)
  private Integer activeRevisionId;

  public static final String SERIALIZED_NAME_ACTIVE_REVISION_VERSION_ID = "activeRevisionVersionId";
  @SerializedName(SERIALIZED_NAME_ACTIVE_REVISION_VERSION_ID)
  private Integer activeRevisionVersionId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_CURRENT_REVISION_ID = "currentRevisionId";
  @SerializedName(SERIALIZED_NAME_CURRENT_REVISION_ID)
  private Integer currentRevisionId;

  public static final String SERIALIZED_NAME_CURRENT_REVISION_VERSION_ID = "currentRevisionVersionId";
  @SerializedName(SERIALIZED_NAME_CURRENT_REVISION_VERSION_ID)
  private Integer currentRevisionVersionId;

  public static final String SERIALIZED_NAME_STAGE_REVISION = "stageRevision";
  @SerializedName(SERIALIZED_NAME_STAGE_REVISION)
  private Boolean stageRevision = false;


  public CampaignVersions revisionFrontendState(RevisionFrontendStateEnum revisionFrontendState) {
    
    this.revisionFrontendState = revisionFrontendState;
    return this;
  }

   /**
   * The campaign revision state displayed in the Campaign Manager.
   * @return revisionFrontendState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "revised", value = "The campaign revision state displayed in the Campaign Manager.")

  public RevisionFrontendStateEnum getRevisionFrontendState() {
    return revisionFrontendState;
  }


  public void setRevisionFrontendState(RevisionFrontendStateEnum revisionFrontendState) {
    this.revisionFrontendState = revisionFrontendState;
  }


  public CampaignVersions activeRevisionId(Integer activeRevisionId) {
    
    this.activeRevisionId = activeRevisionId;
    return this;
  }

   /**
   * ID of the revision that was last activated on this campaign. 
   * @return activeRevisionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6", value = "ID of the revision that was last activated on this campaign. ")

  public Integer getActiveRevisionId() {
    return activeRevisionId;
  }


  public void setActiveRevisionId(Integer activeRevisionId) {
    this.activeRevisionId = activeRevisionId;
  }


  public CampaignVersions activeRevisionVersionId(Integer activeRevisionVersionId) {
    
    this.activeRevisionVersionId = activeRevisionVersionId;
    return this;
  }

   /**
   * ID of the revision version that is active on the campaign. 
   * @return activeRevisionVersionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6", value = "ID of the revision version that is active on the campaign. ")

  public Integer getActiveRevisionVersionId() {
    return activeRevisionVersionId;
  }


  public void setActiveRevisionVersionId(Integer activeRevisionVersionId) {
    this.activeRevisionVersionId = activeRevisionVersionId;
  }


  public CampaignVersions version(Integer version) {
    
    this.version = version;
    return this;
  }

   /**
   * Incrementing number representing how many revisions have been activated on this campaign, starts from 0 for a new campaign. 
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6", value = "Incrementing number representing how many revisions have been activated on this campaign, starts from 0 for a new campaign. ")

  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    this.version = version;
  }


  public CampaignVersions currentRevisionId(Integer currentRevisionId) {
    
    this.currentRevisionId = currentRevisionId;
    return this;
  }

   /**
   * ID of the revision currently being modified for the campaign. 
   * @return currentRevisionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6", value = "ID of the revision currently being modified for the campaign. ")

  public Integer getCurrentRevisionId() {
    return currentRevisionId;
  }


  public void setCurrentRevisionId(Integer currentRevisionId) {
    this.currentRevisionId = currentRevisionId;
  }


  public CampaignVersions currentRevisionVersionId(Integer currentRevisionVersionId) {
    
    this.currentRevisionVersionId = currentRevisionVersionId;
    return this;
  }

   /**
   * ID of the latest version applied on the current revision. 
   * @return currentRevisionVersionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6", value = "ID of the latest version applied on the current revision. ")

  public Integer getCurrentRevisionVersionId() {
    return currentRevisionVersionId;
  }


  public void setCurrentRevisionVersionId(Integer currentRevisionVersionId) {
    this.currentRevisionVersionId = currentRevisionVersionId;
  }


  public CampaignVersions stageRevision(Boolean stageRevision) {
    
    this.stageRevision = stageRevision;
    return this;
  }

   /**
   * Flag for determining whether we use current revision when sending requests with staging API key. 
   * @return stageRevision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Flag for determining whether we use current revision when sending requests with staging API key. ")

  public Boolean getStageRevision() {
    return stageRevision;
  }


  public void setStageRevision(Boolean stageRevision) {
    this.stageRevision = stageRevision;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignVersions campaignVersions = (CampaignVersions) o;
    return Objects.equals(this.revisionFrontendState, campaignVersions.revisionFrontendState) &&
        Objects.equals(this.activeRevisionId, campaignVersions.activeRevisionId) &&
        Objects.equals(this.activeRevisionVersionId, campaignVersions.activeRevisionVersionId) &&
        Objects.equals(this.version, campaignVersions.version) &&
        Objects.equals(this.currentRevisionId, campaignVersions.currentRevisionId) &&
        Objects.equals(this.currentRevisionVersionId, campaignVersions.currentRevisionVersionId) &&
        Objects.equals(this.stageRevision, campaignVersions.stageRevision);
  }

  @Override
  public int hashCode() {
    return Objects.hash(revisionFrontendState, activeRevisionId, activeRevisionVersionId, version, currentRevisionId, currentRevisionVersionId, stageRevision);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignVersions {\n");
    sb.append("    revisionFrontendState: ").append(toIndentedString(revisionFrontendState)).append("\n");
    sb.append("    activeRevisionId: ").append(toIndentedString(activeRevisionId)).append("\n");
    sb.append("    activeRevisionVersionId: ").append(toIndentedString(activeRevisionVersionId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    currentRevisionId: ").append(toIndentedString(currentRevisionId)).append("\n");
    sb.append("    currentRevisionVersionId: ").append(toIndentedString(currentRevisionVersionId)).append("\n");
    sb.append("    stageRevision: ").append(toIndentedString(stageRevision)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

