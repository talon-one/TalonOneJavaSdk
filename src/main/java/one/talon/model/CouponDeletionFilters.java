/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * CouponDeletionFilters
 */

public class CouponDeletionFilters {
  public static final String SERIALIZED_NAME_CREATED_BEFORE = "createdBefore";
  @SerializedName(SERIALIZED_NAME_CREATED_BEFORE)
  private OffsetDateTime createdBefore;

  public static final String SERIALIZED_NAME_CREATED_AFTER = "createdAfter";
  @SerializedName(SERIALIZED_NAME_CREATED_AFTER)
  private OffsetDateTime createdAfter;

  public static final String SERIALIZED_NAME_STARTS_AFTER = "startsAfter";
  @SerializedName(SERIALIZED_NAME_STARTS_AFTER)
  private OffsetDateTime startsAfter;

  public static final String SERIALIZED_NAME_STARTS_BEFORE = "startsBefore";
  @SerializedName(SERIALIZED_NAME_STARTS_BEFORE)
  private OffsetDateTime startsBefore;

  /**
   * - &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which the start date is null or in the past and the expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which the start date is set and in the future. 
   */
  @JsonAdapter(ValidEnum.Adapter.class)
  public enum ValidEnum {
    EXPIRED("expired"),
    
    VALIDNOW("validNow"),
    
    VALIDFUTURE("validFuture");

    private String value;

    ValidEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValidEnum fromValue(String value) {
      for (ValidEnum b : ValidEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValidEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValidEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValidEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private ValidEnum valid;

  public static final String SERIALIZED_NAME_USABLE = "usable";
  @SerializedName(SERIALIZED_NAME_USABLE)
  private Boolean usable;

  public static final String SERIALIZED_NAME_REDEEMED = "redeemed";
  @SerializedName(SERIALIZED_NAME_REDEEMED)
  private Boolean redeemed;

  public static final String SERIALIZED_NAME_RECIPIENT_INTEGRATION_ID = "recipientIntegrationId";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_INTEGRATION_ID)
  private String recipientIntegrationId;

  public static final String SERIALIZED_NAME_EXACT_MATCH = "exactMatch";
  @SerializedName(SERIALIZED_NAME_EXACT_MATCH)
  private Boolean exactMatch = false;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_BATCH_ID = "batchId";
  @SerializedName(SERIALIZED_NAME_BATCH_ID)
  private String batchId;

  public static final String SERIALIZED_NAME_REFERRAL_ID = "referralId";
  @SerializedName(SERIALIZED_NAME_REFERRAL_ID)
  private Integer referralId;

  public static final String SERIALIZED_NAME_EXPIRES_AFTER = "expiresAfter";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AFTER)
  private OffsetDateTime expiresAfter;

  public static final String SERIALIZED_NAME_EXPIRES_BEFORE = "expiresBefore";
  @SerializedName(SERIALIZED_NAME_EXPIRES_BEFORE)
  private OffsetDateTime expiresBefore;


  public CouponDeletionFilters createdBefore(OffsetDateTime createdBefore) {
    
    this.createdBefore = createdBefore;
    return this;
  }

   /**
   * Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
   * @return createdBefore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.")

  public OffsetDateTime getCreatedBefore() {
    return createdBefore;
  }


  public void setCreatedBefore(OffsetDateTime createdBefore) {
    this.createdBefore = createdBefore;
  }


  public CouponDeletionFilters createdAfter(OffsetDateTime createdAfter) {
    
    this.createdAfter = createdAfter;
    return this;
  }

   /**
   * Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
   * @return createdAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.")

  public OffsetDateTime getCreatedAfter() {
    return createdAfter;
  }


  public void setCreatedAfter(OffsetDateTime createdAfter) {
    this.createdAfter = createdAfter;
  }


  public CouponDeletionFilters startsAfter(OffsetDateTime startsAfter) {
    
    this.startsAfter = startsAfter;
    return this;
  }

   /**
   * Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
   * @return startsAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.")

  public OffsetDateTime getStartsAfter() {
    return startsAfter;
  }


  public void setStartsAfter(OffsetDateTime startsAfter) {
    this.startsAfter = startsAfter;
  }


  public CouponDeletionFilters startsBefore(OffsetDateTime startsBefore) {
    
    this.startsBefore = startsBefore;
    return this;
  }

   /**
   * Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
   * @return startsBefore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.")

  public OffsetDateTime getStartsBefore() {
    return startsBefore;
  }


  public void setStartsBefore(OffsetDateTime startsBefore) {
    this.startsBefore = startsBefore;
  }


  public CouponDeletionFilters valid(ValidEnum valid) {
    
    this.valid = valid;
    return this;
  }

   /**
   * - &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which the start date is null or in the past and the expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which the start date is set and in the future. 
   * @return valid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "- `expired`: Matches coupons in which the expiration date is set and in the past. - `validNow`: Matches coupons in which the start date is null or in the past and the expiration date is null or in the future. - `validFuture`: Matches coupons in which the start date is set and in the future. ")

  public ValidEnum getValid() {
    return valid;
  }


  public void setValid(ValidEnum valid) {
    this.valid = valid;
  }


  public CouponDeletionFilters usable(Boolean usable) {
    
    this.usable = usable;
    return this;
  }

   /**
   * - &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned. - This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter. 
   * @return usable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "- `true`: only coupons where `usageCounter < usageLimit` will be returned. - `false`: only coupons where `usageCounter >= usageLimit` will be returned. - This field cannot be used in conjunction with the `usable` query parameter. ")

  public Boolean getUsable() {
    return usable;
  }


  public void setUsable(Boolean usable) {
    this.usable = usable;
  }


  public CouponDeletionFilters redeemed(Boolean redeemed) {
    
    this.redeemed = redeemed;
    return this;
  }

   /**
   * - &#x60;true&#x60;: only coupons where &#x60;usageCounter &gt; 0&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &#x3D; 0&#x60; will be returned.  **Note:** This field cannot be used in conjunction with the &#x60;usable&#x60; query parameter. 
   * @return redeemed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "- `true`: only coupons where `usageCounter > 0` will be returned. - `false`: only coupons where `usageCounter = 0` will be returned.  **Note:** This field cannot be used in conjunction with the `usable` query parameter. ")

  public Boolean getRedeemed() {
    return redeemed;
  }


  public void setRedeemed(Boolean redeemed) {
    this.redeemed = redeemed;
  }


  public CouponDeletionFilters recipientIntegrationId(String recipientIntegrationId) {
    
    this.recipientIntegrationId = recipientIntegrationId;
    return this;
  }

   /**
   * Filter results by match with a profile id specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field. 
   * @return recipientIntegrationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter results by match with a profile id specified in the coupon's `RecipientIntegrationId` field. ")

  public String getRecipientIntegrationId() {
    return recipientIntegrationId;
  }


  public void setRecipientIntegrationId(String recipientIntegrationId) {
    this.recipientIntegrationId = recipientIntegrationId;
  }


  public CouponDeletionFilters exactMatch(Boolean exactMatch) {
    
    this.exactMatch = exactMatch;
    return this;
  }

   /**
   * Filter results to an exact case-insensitive matching against the coupon code
   * @return exactMatch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter results to an exact case-insensitive matching against the coupon code")

  public Boolean getExactMatch() {
    return exactMatch;
  }


  public void setExactMatch(Boolean exactMatch) {
    this.exactMatch = exactMatch;
  }


  public CouponDeletionFilters value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Filter results by the coupon code
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter results by the coupon code")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  public CouponDeletionFilters batchId(String batchId) {
    
    this.batchId = batchId;
    return this;
  }

   /**
   * Filter results by batches of coupons
   * @return batchId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter results by batches of coupons")

  public String getBatchId() {
    return batchId;
  }


  public void setBatchId(String batchId) {
    this.batchId = batchId;
  }


  public CouponDeletionFilters referralId(Integer referralId) {
    
    this.referralId = referralId;
    return this;
  }

   /**
   * Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
   * @return referralId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.")

  public Integer getReferralId() {
    return referralId;
  }


  public void setReferralId(Integer referralId) {
    this.referralId = referralId;
  }


  public CouponDeletionFilters expiresAfter(OffsetDateTime expiresAfter) {
    
    this.expiresAfter = expiresAfter;
    return this;
  }

   /**
   * Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
   * @return expiresAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.")

  public OffsetDateTime getExpiresAfter() {
    return expiresAfter;
  }


  public void setExpiresAfter(OffsetDateTime expiresAfter) {
    this.expiresAfter = expiresAfter;
  }


  public CouponDeletionFilters expiresBefore(OffsetDateTime expiresBefore) {
    
    this.expiresBefore = expiresBefore;
    return this;
  }

   /**
   * Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.
   * @return expiresBefore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any time zone setting. Talon.One will convert to UTC internally.")

  public OffsetDateTime getExpiresBefore() {
    return expiresBefore;
  }


  public void setExpiresBefore(OffsetDateTime expiresBefore) {
    this.expiresBefore = expiresBefore;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CouponDeletionFilters couponDeletionFilters = (CouponDeletionFilters) o;
    return Objects.equals(this.createdBefore, couponDeletionFilters.createdBefore) &&
        Objects.equals(this.createdAfter, couponDeletionFilters.createdAfter) &&
        Objects.equals(this.startsAfter, couponDeletionFilters.startsAfter) &&
        Objects.equals(this.startsBefore, couponDeletionFilters.startsBefore) &&
        Objects.equals(this.valid, couponDeletionFilters.valid) &&
        Objects.equals(this.usable, couponDeletionFilters.usable) &&
        Objects.equals(this.redeemed, couponDeletionFilters.redeemed) &&
        Objects.equals(this.recipientIntegrationId, couponDeletionFilters.recipientIntegrationId) &&
        Objects.equals(this.exactMatch, couponDeletionFilters.exactMatch) &&
        Objects.equals(this.value, couponDeletionFilters.value) &&
        Objects.equals(this.batchId, couponDeletionFilters.batchId) &&
        Objects.equals(this.referralId, couponDeletionFilters.referralId) &&
        Objects.equals(this.expiresAfter, couponDeletionFilters.expiresAfter) &&
        Objects.equals(this.expiresBefore, couponDeletionFilters.expiresBefore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdBefore, createdAfter, startsAfter, startsBefore, valid, usable, redeemed, recipientIntegrationId, exactMatch, value, batchId, referralId, expiresAfter, expiresBefore);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponDeletionFilters {\n");
    sb.append("    createdBefore: ").append(toIndentedString(createdBefore)).append("\n");
    sb.append("    createdAfter: ").append(toIndentedString(createdAfter)).append("\n");
    sb.append("    startsAfter: ").append(toIndentedString(startsAfter)).append("\n");
    sb.append("    startsBefore: ").append(toIndentedString(startsBefore)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    usable: ").append(toIndentedString(usable)).append("\n");
    sb.append("    redeemed: ").append(toIndentedString(redeemed)).append("\n");
    sb.append("    recipientIntegrationId: ").append(toIndentedString(recipientIntegrationId)).append("\n");
    sb.append("    exactMatch: ").append(toIndentedString(exactMatch)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    referralId: ").append(toIndentedString(referralId)).append("\n");
    sb.append("    expiresAfter: ").append(toIndentedString(expiresAfter)).append("\n");
    sb.append("    expiresBefore: ").append(toIndentedString(expiresBefore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

