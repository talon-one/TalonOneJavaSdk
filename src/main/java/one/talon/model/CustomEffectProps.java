/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Effect containing custom payload.
 */
@ApiModel(description = "Effect containing custom payload.")

public class CustomEffectProps {
  public static final String SERIALIZED_NAME_EFFECT_ID = "effectId";
  @SerializedName(SERIALIZED_NAME_EFFECT_ID)
  private Integer effectId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private Object payload;


  public CustomEffectProps effectId(Integer effectId) {
    
    this.effectId = effectId;
    return this;
  }

   /**
   * The ID of the custom effect that was triggered
   * @return effectId
  **/
  @ApiModelProperty(required = true, value = "The ID of the custom effect that was triggered")

  public Integer getEffectId() {
    return effectId;
  }


  public void setEffectId(Integer effectId) {
    this.effectId = effectId;
  }


  public CustomEffectProps name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The type of the custom effect.
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The type of the custom effect.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CustomEffectProps payload(Object payload) {
    
    this.payload = payload;
    return this;
  }

   /**
   * The JSON payload of the custom effect.
   * @return payload
  **/
  @ApiModelProperty(required = true, value = "The JSON payload of the custom effect.")

  public Object getPayload() {
    return payload;
  }


  public void setPayload(Object payload) {
    this.payload = payload;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomEffectProps customEffectProps = (CustomEffectProps) o;
    return Objects.equals(this.effectId, customEffectProps.effectId) &&
        Objects.equals(this.name, customEffectProps.name) &&
        Objects.equals(this.payload, customEffectProps.payload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectId, name, payload);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomEffectProps {\n");
    sb.append("    effectId: ").append(toIndentedString(effectId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

