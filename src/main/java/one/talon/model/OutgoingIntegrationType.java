/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * OutgoingIntegrationType
 */

public class OutgoingIntegrationType {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_DOCUMENTATION_LINK = "documentationLink";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION_LINK)
  private String documentationLink;


  public OutgoingIntegrationType id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique ID for this entity.
   * @return id
  **/
  @ApiModelProperty(example = "6", required = true, value = "Unique ID for this entity.")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public OutgoingIntegrationType name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the outgoing integration.
   * @return name
  **/
  @ApiModelProperty(example = "braze", required = true, value = "Name of the outgoing integration.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public OutgoingIntegrationType description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the outgoing integration.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Braze is a customer data platform", value = "Description of the outgoing integration.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public OutgoingIntegrationType category(String category) {
    
    this.category = category;
    return this;
  }

   /**
   * Category of the outgoing integration.
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "customer engagement platform", value = "Category of the outgoing integration.")

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    this.category = category;
  }


  public OutgoingIntegrationType documentationLink(String documentationLink) {
    
    this.documentationLink = documentationLink;
    return this;
  }

   /**
   * Http link to the outgoing integration&#39;s documentation.
   * @return documentationLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://docs.talon.one/docs/dev/technology-partners/braze", value = "Http link to the outgoing integration's documentation.")

  public String getDocumentationLink() {
    return documentationLink;
  }


  public void setDocumentationLink(String documentationLink) {
    this.documentationLink = documentationLink;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutgoingIntegrationType outgoingIntegrationType = (OutgoingIntegrationType) o;
    return Objects.equals(this.id, outgoingIntegrationType.id) &&
        Objects.equals(this.name, outgoingIntegrationType.name) &&
        Objects.equals(this.description, outgoingIntegrationType.description) &&
        Objects.equals(this.category, outgoingIntegrationType.category) &&
        Objects.equals(this.documentationLink, outgoingIntegrationType.documentationLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, category, documentationLink);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutgoingIntegrationType {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    documentationLink: ").append(toIndentedString(documentationLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

