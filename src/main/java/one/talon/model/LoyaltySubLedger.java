/*
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import one.talon.model.LoyaltyLedgerEntry;

/**
 * Ledger of Balance in Loyalty Program for a Customer
 */
@ApiModel(description = "Ledger of Balance in Loyalty Program for a Customer")

public class LoyaltySubLedger {
  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<LoyaltyLedgerEntry> transactions = null;

  public static final String SERIALIZED_NAME_EXPIRING_POINTS = "expiringPoints";
  @SerializedName(SERIALIZED_NAME_EXPIRING_POINTS)
  private List<LoyaltyLedgerEntry> expiringPoints = null;

  public LoyaltySubLedger total(BigDecimal total) {
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @ApiModelProperty(required = true, value = "")
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }

  public LoyaltySubLedger transactions(List<LoyaltyLedgerEntry> transactions) {
    this.transactions = transactions;
    return this;
  }

  public LoyaltySubLedger addTransactionsItem(LoyaltyLedgerEntry transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<LoyaltyLedgerEntry>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Transactions contains a list of all events that have happened such as additions, subtractions and expiries
   * @return transactions
  **/
  @ApiModelProperty(value = "Transactions contains a list of all events that have happened such as additions, subtractions and expiries")
  public List<LoyaltyLedgerEntry> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<LoyaltyLedgerEntry> transactions) {
    this.transactions = transactions;
  }

  public LoyaltySubLedger expiringPoints(List<LoyaltyLedgerEntry> expiringPoints) {
    this.expiringPoints = expiringPoints;
    return this;
  }

  public LoyaltySubLedger addExpiringPointsItem(LoyaltyLedgerEntry expiringPointsItem) {
    if (this.expiringPoints == null) {
      this.expiringPoints = new ArrayList<LoyaltyLedgerEntry>();
    }
    this.expiringPoints.add(expiringPointsItem);
    return this;
  }

   /**
   * ExpiringPoints contains a list of all points that will expiry and when
   * @return expiringPoints
  **/
  @ApiModelProperty(value = "ExpiringPoints contains a list of all points that will expiry and when")
  public List<LoyaltyLedgerEntry> getExpiringPoints() {
    return expiringPoints;
  }

  public void setExpiringPoints(List<LoyaltyLedgerEntry> expiringPoints) {
    this.expiringPoints = expiringPoints;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoyaltySubLedger loyaltySubLedger = (LoyaltySubLedger) o;
    return Objects.equals(this.total, loyaltySubLedger.total) &&
        Objects.equals(this.transactions, loyaltySubLedger.transactions) &&
        Objects.equals(this.expiringPoints, loyaltySubLedger.expiringPoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, transactions, expiringPoints);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoyaltySubLedger {\n");
    
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    expiringPoints: ").append(toIndentedString(expiringPoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

