/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import one.talon.model.NewLoyaltyTier;

/**
 * 
 */
@ApiModel(description = "")

public class UpdateLoyaltyProgram {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SUBSCRIBED_APPLICATIONS = "subscribedApplications";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBED_APPLICATIONS)
  private List<Integer> subscribedApplications = null;

  public static final String SERIALIZED_NAME_DEFAULT_VALIDITY = "defaultValidity";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALIDITY)
  private String defaultValidity;

  public static final String SERIALIZED_NAME_DEFAULT_PENDING = "defaultPending";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PENDING)
  private String defaultPending;

  public static final String SERIALIZED_NAME_ALLOW_SUBLEDGER = "allowSubledger";
  @SerializedName(SERIALIZED_NAME_ALLOW_SUBLEDGER)
  private Boolean allowSubledger;

  public static final String SERIALIZED_NAME_USERS_PER_CARD_LIMIT = "usersPerCardLimit";
  @SerializedName(SERIALIZED_NAME_USERS_PER_CARD_LIMIT)
  private Integer usersPerCardLimit;

  public static final String SERIALIZED_NAME_SANDBOX = "sandbox";
  @SerializedName(SERIALIZED_NAME_SANDBOX)
  private Boolean sandbox;

  /**
   * The policy that defines which date is used to calculate the expiration date of a customer&#39;s current tier.  - &#x60;tier_start_date&#x60;: The tier expiration date is calculated based on when the customer joined the current tier.  - &#x60;program_join_date&#x60;: The tier expiration date is calculated based on when the customer joined the loyalty program. 
   */
  @JsonAdapter(TiersExpirationPolicyEnum.Adapter.class)
  public enum TiersExpirationPolicyEnum {
    TIER_START_DATE("tier_start_date"),
    
    PROGRAM_JOIN_DATE("program_join_date");

    private String value;

    TiersExpirationPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TiersExpirationPolicyEnum fromValue(String value) {
      for (TiersExpirationPolicyEnum b : TiersExpirationPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TiersExpirationPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TiersExpirationPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TiersExpirationPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TiersExpirationPolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TIERS_EXPIRATION_POLICY = "tiersExpirationPolicy";
  @SerializedName(SERIALIZED_NAME_TIERS_EXPIRATION_POLICY)
  private TiersExpirationPolicyEnum tiersExpirationPolicy;

  public static final String SERIALIZED_NAME_TIERS_EXPIRE_IN = "tiersExpireIn";
  @SerializedName(SERIALIZED_NAME_TIERS_EXPIRE_IN)
  private String tiersExpireIn;

  /**
   * Customers&#39;s tier downgrade policy.  - &#x60;one_down&#x60;: Once the tier expires and if the user doesn&#39;t have enough points to stay in the tier, the user is downgraded one tier down.  - &#x60;balance_based&#x60;: Once the tier expires, the user&#39;s tier is evaluated based on the amount of active points the user has at this instant. 
   */
  @JsonAdapter(TiersDowngradePolicyEnum.Adapter.class)
  public enum TiersDowngradePolicyEnum {
    ONE_DOWN("one_down"),
    
    BALANCE_BASED("balance_based");

    private String value;

    TiersDowngradePolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TiersDowngradePolicyEnum fromValue(String value) {
      for (TiersDowngradePolicyEnum b : TiersDowngradePolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TiersDowngradePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TiersDowngradePolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TiersDowngradePolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TiersDowngradePolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TIERS_DOWNGRADE_POLICY = "tiersDowngradePolicy";
  @SerializedName(SERIALIZED_NAME_TIERS_DOWNGRADE_POLICY)
  private TiersDowngradePolicyEnum tiersDowngradePolicy;

  /**
   * The policy that defines when the customer joins the loyalty program.   - &#x60;not_join&#x60;: The customer does not join the loyalty program but can still earn and spend loyalty points.       **Note**: The customer does not have a program join date.   - &#x60;points_activated&#x60;: The customer joins the loyalty program only when their earned loyalty points become active for the first time.   - &#x60;points_earned&#x60;: The customer joins the loyalty program when they earn loyalty points for the first time. 
   */
  @JsonAdapter(ProgramJoinPolicyEnum.Adapter.class)
  public enum ProgramJoinPolicyEnum {
    NOT_JOIN("not_join"),
    
    POINTS_ACTIVATED("points_activated"),
    
    POINTS_EARNED("points_earned");

    private String value;

    ProgramJoinPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProgramJoinPolicyEnum fromValue(String value) {
      for (ProgramJoinPolicyEnum b : ProgramJoinPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProgramJoinPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProgramJoinPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProgramJoinPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProgramJoinPolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROGRAM_JOIN_POLICY = "programJoinPolicy";
  @SerializedName(SERIALIZED_NAME_PROGRAM_JOIN_POLICY)
  private ProgramJoinPolicyEnum programJoinPolicy;

  public static final String SERIALIZED_NAME_TIERS = "tiers";
  @SerializedName(SERIALIZED_NAME_TIERS)
  private List<NewLoyaltyTier> tiers = null;


  public UpdateLoyaltyProgram title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * The display title for the Loyalty Program.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Point collection", value = "The display title for the Loyalty Program.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public UpdateLoyaltyProgram description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of our Loyalty Program.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Customers collect 10 points per 1$ spent", value = "Description of our Loyalty Program.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateLoyaltyProgram subscribedApplications(List<Integer> subscribedApplications) {
    
    this.subscribedApplications = subscribedApplications;
    return this;
  }

  public UpdateLoyaltyProgram addSubscribedApplicationsItem(Integer subscribedApplicationsItem) {
    if (this.subscribedApplications == null) {
      this.subscribedApplications = new ArrayList<Integer>();
    }
    this.subscribedApplications.add(subscribedApplicationsItem);
    return this;
  }

   /**
   * A list containing the IDs of all applications that are subscribed to this Loyalty Program.
   * @return subscribedApplications
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[132, 97]", value = "A list containing the IDs of all applications that are subscribed to this Loyalty Program.")

  public List<Integer> getSubscribedApplications() {
    return subscribedApplications;
  }


  public void setSubscribedApplications(List<Integer> subscribedApplications) {
    this.subscribedApplications = subscribedApplications;
  }


  public UpdateLoyaltyProgram defaultValidity(String defaultValidity) {
    
    this.defaultValidity = defaultValidity;
    return this;
  }

   /**
   * The default duration after which new loyalty points should expire. Can be &#39;unlimited&#39; or a specific time. The time format is a number followed by one letter indicating the time unit, like &#39;30s&#39;, &#39;40m&#39;, &#39;1h&#39;, &#39;5D&#39;, &#39;7W&#39;, or 10M&#39;. These rounding suffixes are also supported: - &#39;_D&#39; for rounding down. Can be used as a suffix after &#39;D&#39;, and signifies the start of the day. - &#39;_U&#39; for rounding up. Can be used as a suffix after &#39;D&#39;, &#39;W&#39;, and &#39;M&#39;, and signifies the end of the day, week, and month. 
   * @return defaultValidity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2W_U", value = "The default duration after which new loyalty points should expire. Can be 'unlimited' or a specific time. The time format is a number followed by one letter indicating the time unit, like '30s', '40m', '1h', '5D', '7W', or 10M'. These rounding suffixes are also supported: - '_D' for rounding down. Can be used as a suffix after 'D', and signifies the start of the day. - '_U' for rounding up. Can be used as a suffix after 'D', 'W', and 'M', and signifies the end of the day, week, and month. ")

  public String getDefaultValidity() {
    return defaultValidity;
  }


  public void setDefaultValidity(String defaultValidity) {
    this.defaultValidity = defaultValidity;
  }


  public UpdateLoyaltyProgram defaultPending(String defaultPending) {
    
    this.defaultPending = defaultPending;
    return this;
  }

   /**
   * The default duration of the pending time after which points should be valid. Can be &#39;immediate&#39; or a specific time. The time format is a number followed by one letter indicating the time unit, like &#39;30s&#39;, &#39;40m&#39;, &#39;1h&#39;, &#39;5D&#39;, &#39;7W&#39;, or 10M&#39;. These rounding suffixes are also supported: - &#39;_D&#39; for rounding down. Can be used as a suffix after &#39;D&#39;, and signifies the start of the day. - &#39;_U&#39; for rounding up. Can be used as a suffix after &#39;D&#39;, &#39;W&#39;, and &#39;M&#39;, and signifies the end of the day, week, and month. 
   * @return defaultPending
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "immediate", value = "The default duration of the pending time after which points should be valid. Can be 'immediate' or a specific time. The time format is a number followed by one letter indicating the time unit, like '30s', '40m', '1h', '5D', '7W', or 10M'. These rounding suffixes are also supported: - '_D' for rounding down. Can be used as a suffix after 'D', and signifies the start of the day. - '_U' for rounding up. Can be used as a suffix after 'D', 'W', and 'M', and signifies the end of the day, week, and month. ")

  public String getDefaultPending() {
    return defaultPending;
  }


  public void setDefaultPending(String defaultPending) {
    this.defaultPending = defaultPending;
  }


  public UpdateLoyaltyProgram allowSubledger(Boolean allowSubledger) {
    
    this.allowSubledger = allowSubledger;
    return this;
  }

   /**
   * Indicates if this program supports subledgers inside the program.
   * @return allowSubledger
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicates if this program supports subledgers inside the program.")

  public Boolean getAllowSubledger() {
    return allowSubledger;
  }


  public void setAllowSubledger(Boolean allowSubledger) {
    this.allowSubledger = allowSubledger;
  }


  public UpdateLoyaltyProgram usersPerCardLimit(Integer usersPerCardLimit) {
    
    this.usersPerCardLimit = usersPerCardLimit;
    return this;
  }

   /**
   * The max amount of user profiles with whom a card can be shared. This can be set to 0 for no limit. This property is only used when &#x60;cardBased&#x60; is &#x60;true&#x60;. 
   * minimum: 0
   * @return usersPerCardLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "111", value = "The max amount of user profiles with whom a card can be shared. This can be set to 0 for no limit. This property is only used when `cardBased` is `true`. ")

  public Integer getUsersPerCardLimit() {
    return usersPerCardLimit;
  }


  public void setUsersPerCardLimit(Integer usersPerCardLimit) {
    this.usersPerCardLimit = usersPerCardLimit;
  }


  public UpdateLoyaltyProgram sandbox(Boolean sandbox) {
    
    this.sandbox = sandbox;
    return this;
  }

   /**
   * Indicates if this program is a live or sandbox program. Programs of a given type can only be connected to Applications of the same type.
   * @return sandbox
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates if this program is a live or sandbox program. Programs of a given type can only be connected to Applications of the same type.")

  public Boolean getSandbox() {
    return sandbox;
  }


  public void setSandbox(Boolean sandbox) {
    this.sandbox = sandbox;
  }


  public UpdateLoyaltyProgram tiersExpirationPolicy(TiersExpirationPolicyEnum tiersExpirationPolicy) {
    
    this.tiersExpirationPolicy = tiersExpirationPolicy;
    return this;
  }

   /**
   * The policy that defines which date is used to calculate the expiration date of a customer&#39;s current tier.  - &#x60;tier_start_date&#x60;: The tier expiration date is calculated based on when the customer joined the current tier.  - &#x60;program_join_date&#x60;: The tier expiration date is calculated based on when the customer joined the loyalty program. 
   * @return tiersExpirationPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The policy that defines which date is used to calculate the expiration date of a customer's current tier.  - `tier_start_date`: The tier expiration date is calculated based on when the customer joined the current tier.  - `program_join_date`: The tier expiration date is calculated based on when the customer joined the loyalty program. ")

  public TiersExpirationPolicyEnum getTiersExpirationPolicy() {
    return tiersExpirationPolicy;
  }


  public void setTiersExpirationPolicy(TiersExpirationPolicyEnum tiersExpirationPolicy) {
    this.tiersExpirationPolicy = tiersExpirationPolicy;
  }


  public UpdateLoyaltyProgram tiersExpireIn(String tiersExpireIn) {
    
    this.tiersExpireIn = tiersExpireIn;
    return this;
  }

   /**
   * The amount of time after which the tier expires.  The time format is an **integer** followed by one letter indicating the time unit. Examples: &#x60;30s&#x60;, &#x60;40m&#x60;, &#x60;1h&#x60;, &#x60;5D&#x60;, &#x60;7W&#x60;, &#x60;10M&#x60;, &#x60;15Y&#x60;.  Available units:  - &#x60;s&#x60;: seconds - &#x60;m&#x60;: minutes - &#x60;h&#x60;: hours - &#x60;D&#x60;: days - &#x60;W&#x60;: weeks - &#x60;M&#x60;: months - &#x60;Y&#x60;: years  You can round certain units up or down: - &#x60;_D&#x60; for rounding down days only. Signifies the start of the day. - &#x60;_U&#x60; for rounding up days, weeks, months and years. Signifies the end of the day, week, month or year. 
   * @return tiersExpireIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "27W_U", value = "The amount of time after which the tier expires.  The time format is an **integer** followed by one letter indicating the time unit. Examples: `30s`, `40m`, `1h`, `5D`, `7W`, `10M`, `15Y`.  Available units:  - `s`: seconds - `m`: minutes - `h`: hours - `D`: days - `W`: weeks - `M`: months - `Y`: years  You can round certain units up or down: - `_D` for rounding down days only. Signifies the start of the day. - `_U` for rounding up days, weeks, months and years. Signifies the end of the day, week, month or year. ")

  public String getTiersExpireIn() {
    return tiersExpireIn;
  }


  public void setTiersExpireIn(String tiersExpireIn) {
    this.tiersExpireIn = tiersExpireIn;
  }


  public UpdateLoyaltyProgram tiersDowngradePolicy(TiersDowngradePolicyEnum tiersDowngradePolicy) {
    
    this.tiersDowngradePolicy = tiersDowngradePolicy;
    return this;
  }

   /**
   * Customers&#39;s tier downgrade policy.  - &#x60;one_down&#x60;: Once the tier expires and if the user doesn&#39;t have enough points to stay in the tier, the user is downgraded one tier down.  - &#x60;balance_based&#x60;: Once the tier expires, the user&#39;s tier is evaluated based on the amount of active points the user has at this instant. 
   * @return tiersDowngradePolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customers's tier downgrade policy.  - `one_down`: Once the tier expires and if the user doesn't have enough points to stay in the tier, the user is downgraded one tier down.  - `balance_based`: Once the tier expires, the user's tier is evaluated based on the amount of active points the user has at this instant. ")

  public TiersDowngradePolicyEnum getTiersDowngradePolicy() {
    return tiersDowngradePolicy;
  }


  public void setTiersDowngradePolicy(TiersDowngradePolicyEnum tiersDowngradePolicy) {
    this.tiersDowngradePolicy = tiersDowngradePolicy;
  }


  public UpdateLoyaltyProgram programJoinPolicy(ProgramJoinPolicyEnum programJoinPolicy) {
    
    this.programJoinPolicy = programJoinPolicy;
    return this;
  }

   /**
   * The policy that defines when the customer joins the loyalty program.   - &#x60;not_join&#x60;: The customer does not join the loyalty program but can still earn and spend loyalty points.       **Note**: The customer does not have a program join date.   - &#x60;points_activated&#x60;: The customer joins the loyalty program only when their earned loyalty points become active for the first time.   - &#x60;points_earned&#x60;: The customer joins the loyalty program when they earn loyalty points for the first time. 
   * @return programJoinPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The policy that defines when the customer joins the loyalty program.   - `not_join`: The customer does not join the loyalty program but can still earn and spend loyalty points.       **Note**: The customer does not have a program join date.   - `points_activated`: The customer joins the loyalty program only when their earned loyalty points become active for the first time.   - `points_earned`: The customer joins the loyalty program when they earn loyalty points for the first time. ")

  public ProgramJoinPolicyEnum getProgramJoinPolicy() {
    return programJoinPolicy;
  }


  public void setProgramJoinPolicy(ProgramJoinPolicyEnum programJoinPolicy) {
    this.programJoinPolicy = programJoinPolicy;
  }


  public UpdateLoyaltyProgram tiers(List<NewLoyaltyTier> tiers) {
    
    this.tiers = tiers;
    return this;
  }

  public UpdateLoyaltyProgram addTiersItem(NewLoyaltyTier tiersItem) {
    if (this.tiers == null) {
      this.tiers = new ArrayList<NewLoyaltyTier>();
    }
    this.tiers.add(tiersItem);
    return this;
  }

   /**
   * The tiers in this loyalty program.
   * @return tiers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tiers in this loyalty program.")

  public List<NewLoyaltyTier> getTiers() {
    return tiers;
  }


  public void setTiers(List<NewLoyaltyTier> tiers) {
    this.tiers = tiers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateLoyaltyProgram updateLoyaltyProgram = (UpdateLoyaltyProgram) o;
    return Objects.equals(this.title, updateLoyaltyProgram.title) &&
        Objects.equals(this.description, updateLoyaltyProgram.description) &&
        Objects.equals(this.subscribedApplications, updateLoyaltyProgram.subscribedApplications) &&
        Objects.equals(this.defaultValidity, updateLoyaltyProgram.defaultValidity) &&
        Objects.equals(this.defaultPending, updateLoyaltyProgram.defaultPending) &&
        Objects.equals(this.allowSubledger, updateLoyaltyProgram.allowSubledger) &&
        Objects.equals(this.usersPerCardLimit, updateLoyaltyProgram.usersPerCardLimit) &&
        Objects.equals(this.sandbox, updateLoyaltyProgram.sandbox) &&
        Objects.equals(this.tiersExpirationPolicy, updateLoyaltyProgram.tiersExpirationPolicy) &&
        Objects.equals(this.tiersExpireIn, updateLoyaltyProgram.tiersExpireIn) &&
        Objects.equals(this.tiersDowngradePolicy, updateLoyaltyProgram.tiersDowngradePolicy) &&
        Objects.equals(this.programJoinPolicy, updateLoyaltyProgram.programJoinPolicy) &&
        Objects.equals(this.tiers, updateLoyaltyProgram.tiers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, subscribedApplications, defaultValidity, defaultPending, allowSubledger, usersPerCardLimit, sandbox, tiersExpirationPolicy, tiersExpireIn, tiersDowngradePolicy, programJoinPolicy, tiers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateLoyaltyProgram {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    subscribedApplications: ").append(toIndentedString(subscribedApplications)).append("\n");
    sb.append("    defaultValidity: ").append(toIndentedString(defaultValidity)).append("\n");
    sb.append("    defaultPending: ").append(toIndentedString(defaultPending)).append("\n");
    sb.append("    allowSubledger: ").append(toIndentedString(allowSubledger)).append("\n");
    sb.append("    usersPerCardLimit: ").append(toIndentedString(usersPerCardLimit)).append("\n");
    sb.append("    sandbox: ").append(toIndentedString(sandbox)).append("\n");
    sb.append("    tiersExpirationPolicy: ").append(toIndentedString(tiersExpirationPolicy)).append("\n");
    sb.append("    tiersExpireIn: ").append(toIndentedString(tiersExpireIn)).append("\n");
    sb.append("    tiersDowngradePolicy: ").append(toIndentedString(tiersDowngradePolicy)).append("\n");
    sb.append("    programJoinPolicy: ").append(toIndentedString(programJoinPolicy)).append("\n");
    sb.append("    tiers: ").append(toIndentedString(tiers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

