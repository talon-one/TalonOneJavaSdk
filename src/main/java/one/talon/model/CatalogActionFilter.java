/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The properties for a single filtering condition in a catalog sync action.
 */
@ApiModel(description = "The properties for a single filtering condition in a catalog sync action.")

public class CatalogActionFilter {
  public static final String SERIALIZED_NAME_ATTR = "attr";
  @SerializedName(SERIALIZED_NAME_ATTR)
  private String attr;

  /**
   * The filtering operator.
   */
  @JsonAdapter(OpEnum.Adapter.class)
  public enum OpEnum {
    EQ("EQ"),
    
    LT("LT"),
    
    LE("LE"),
    
    GT("GT"),
    
    GE("GE"),
    
    IN("IN");

    private String value;

    OpEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OpEnum fromValue(String value) {
      for (OpEnum b : OpEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OpEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OpEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OP = "op";
  @SerializedName(SERIALIZED_NAME_OP)
  private OpEnum op;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Object value;


  public CatalogActionFilter attr(String attr) {
    
    this.attr = attr;
    return this;
  }

   /**
   * The name of the attribute to filter on.
   * @return attr
  **/
  @ApiModelProperty(required = true, value = "The name of the attribute to filter on.")

  public String getAttr() {
    return attr;
  }


  public void setAttr(String attr) {
    this.attr = attr;
  }


  public CatalogActionFilter op(OpEnum op) {
    
    this.op = op;
    return this;
  }

   /**
   * The filtering operator.
   * @return op
  **/
  @ApiModelProperty(required = true, value = "The filtering operator.")

  public OpEnum getOp() {
    return op;
  }


  public void setOp(OpEnum op) {
    this.op = op;
  }


  public CatalogActionFilter value(Object value) {
    
    this.value = value;
    return this;
  }

   /**
   * The value to filter for.
   * @return value
  **/
  @ApiModelProperty(required = true, value = "The value to filter for.")

  public Object getValue() {
    return value;
  }


  public void setValue(Object value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogActionFilter catalogActionFilter = (CatalogActionFilter) o;
    return Objects.equals(this.attr, catalogActionFilter.attr) &&
        Objects.equals(this.op, catalogActionFilter.op) &&
        Objects.equals(this.value, catalogActionFilter.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attr, op, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogActionFilter {\n");
    sb.append("    attr: ").append(toIndentedString(attr)).append("\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

