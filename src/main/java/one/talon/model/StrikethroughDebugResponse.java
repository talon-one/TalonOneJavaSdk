/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import one.talon.model.StrikethroughEffect;

/**
 * StrikethroughDebugResponse
 */

public class StrikethroughDebugResponse {
  public static final String SERIALIZED_NAME_CAMPAIGNS_I_DS = "campaignsIDs";
  @SerializedName(SERIALIZED_NAME_CAMPAIGNS_I_DS)
  private List<Integer> campaignsIDs = null;

  public static final String SERIALIZED_NAME_EFFECTS = "effects";
  @SerializedName(SERIALIZED_NAME_EFFECTS)
  private List<StrikethroughEffect> effects = null;


  public StrikethroughDebugResponse campaignsIDs(List<Integer> campaignsIDs) {
    
    this.campaignsIDs = campaignsIDs;
    return this;
  }

  public StrikethroughDebugResponse addCampaignsIDsItem(Integer campaignsIDsItem) {
    if (this.campaignsIDs == null) {
      this.campaignsIDs = new ArrayList<Integer>();
    }
    this.campaignsIDs.add(campaignsIDsItem);
    return this;
  }

   /**
   * The campaign IDs that got fetched for the evaluation process.
   * @return campaignsIDs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The campaign IDs that got fetched for the evaluation process.")

  public List<Integer> getCampaignsIDs() {
    return campaignsIDs;
  }


  public void setCampaignsIDs(List<Integer> campaignsIDs) {
    this.campaignsIDs = campaignsIDs;
  }


  public StrikethroughDebugResponse effects(List<StrikethroughEffect> effects) {
    
    this.effects = effects;
    return this;
  }

  public StrikethroughDebugResponse addEffectsItem(StrikethroughEffect effectsItem) {
    if (this.effects == null) {
      this.effects = new ArrayList<StrikethroughEffect>();
    }
    this.effects.add(effectsItem);
    return this;
  }

   /**
   * The strikethrough effects that are returned from the evaluation process.
   * @return effects
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The strikethrough effects that are returned from the evaluation process.")

  public List<StrikethroughEffect> getEffects() {
    return effects;
  }


  public void setEffects(List<StrikethroughEffect> effects) {
    this.effects = effects;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StrikethroughDebugResponse strikethroughDebugResponse = (StrikethroughDebugResponse) o;
    return Objects.equals(this.campaignsIDs, strikethroughDebugResponse.campaignsIDs) &&
        Objects.equals(this.effects, strikethroughDebugResponse.effects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(campaignsIDs, effects);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StrikethroughDebugResponse {\n");
    sb.append("    campaignsIDs: ").append(toIndentedString(campaignsIDs)).append("\n");
    sb.append("    effects: ").append(toIndentedString(effects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

