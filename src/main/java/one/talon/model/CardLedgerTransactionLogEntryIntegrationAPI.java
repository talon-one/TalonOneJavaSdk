/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import org.threeten.bp.OffsetDateTime;

/**
 * Log entry for a given loyalty card transaction.
 */
@ApiModel(description = "Log entry for a given loyalty card transaction.")

public class CardLedgerTransactionLogEntryIntegrationAPI {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_PROGRAM_ID = "programId";
  @SerializedName(SERIALIZED_NAME_PROGRAM_ID)
  private Integer programId;

  public static final String SERIALIZED_NAME_CARD_IDENTIFIER = "cardIdentifier";
  @SerializedName(SERIALIZED_NAME_CARD_IDENTIFIER)
  private String cardIdentifier;

  public static final String SERIALIZED_NAME_CUSTOMER_SESSION_ID = "customerSessionId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SESSION_ID)
  private String customerSessionId;

  /**
   * Type of transaction. Possible values:   - &#x60;addition&#x60;: Signifies added points.   - &#x60;subtraction&#x60;: Signifies deducted points. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ADDITION("addition"),
    
    SUBTRACTION("subtraction");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private String expiryDate;

  public static final String SERIALIZED_NAME_SUBLEDGER_ID = "subledgerId";
  @SerializedName(SERIALIZED_NAME_SUBLEDGER_ID)
  private String subledgerId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_RULESET_ID = "rulesetId";
  @SerializedName(SERIALIZED_NAME_RULESET_ID)
  private Integer rulesetId;

  public static final String SERIALIZED_NAME_RULE_NAME = "ruleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;


  public CardLedgerTransactionLogEntryIntegrationAPI created(OffsetDateTime created) {
    
    this.created = created;
    return this;
  }

   /**
   * Date and time the loyalty card transaction occurred.
   * @return created
  **/
  @ApiModelProperty(required = true, value = "Date and time the loyalty card transaction occurred.")

  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public CardLedgerTransactionLogEntryIntegrationAPI programId(Integer programId) {
    
    this.programId = programId;
    return this;
  }

   /**
   * ID of the loyalty program.
   * @return programId
  **/
  @ApiModelProperty(example = "324", required = true, value = "ID of the loyalty program.")

  public Integer getProgramId() {
    return programId;
  }


  public void setProgramId(Integer programId) {
    this.programId = programId;
  }


  public CardLedgerTransactionLogEntryIntegrationAPI cardIdentifier(String cardIdentifier) {
    
    this.cardIdentifier = cardIdentifier;
    return this;
  }

   /**
   * The alphanumeric identifier of the loyalty card. 
   * @return cardIdentifier
  **/
  @ApiModelProperty(example = "summer-loyalty-card-0543", required = true, value = "The alphanumeric identifier of the loyalty card. ")

  public String getCardIdentifier() {
    return cardIdentifier;
  }


  public void setCardIdentifier(String cardIdentifier) {
    this.cardIdentifier = cardIdentifier;
  }


  public CardLedgerTransactionLogEntryIntegrationAPI customerSessionId(String customerSessionId) {
    
    this.customerSessionId = customerSessionId;
    return this;
  }

   /**
   * ID of the customer session where the transaction occurred.
   * @return customerSessionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "05c2da0d-48fa-4aa1-b629-898f58f1584d", value = "ID of the customer session where the transaction occurred.")

  public String getCustomerSessionId() {
    return customerSessionId;
  }


  public void setCustomerSessionId(String customerSessionId) {
    this.customerSessionId = customerSessionId;
  }


  public CardLedgerTransactionLogEntryIntegrationAPI type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of transaction. Possible values:   - &#x60;addition&#x60;: Signifies added points.   - &#x60;subtraction&#x60;: Signifies deducted points. 
   * @return type
  **/
  @ApiModelProperty(example = "addition", required = true, value = "Type of transaction. Possible values:   - `addition`: Signifies added points.   - `subtraction`: Signifies deducted points. ")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CardLedgerTransactionLogEntryIntegrationAPI name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name or reason of the loyalty ledger transaction.
   * @return name
  **/
  @ApiModelProperty(example = "Reward 10% points of a purchase's current total", required = true, value = "Name or reason of the loyalty ledger transaction.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CardLedgerTransactionLogEntryIntegrationAPI startDate(String startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * When points become active. Possible values:   - &#x60;immediate&#x60;: Points are active immediately.   - a timestamp value: Points become active at a given date and time. 
   * @return startDate
  **/
  @ApiModelProperty(example = "2022-01-02T15:04:05Z07:00", required = true, value = "When points become active. Possible values:   - `immediate`: Points are active immediately.   - a timestamp value: Points become active at a given date and time. ")

  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public CardLedgerTransactionLogEntryIntegrationAPI expiryDate(String expiryDate) {
    
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Date when points expire. Possible values are:   - &#x60;unlimited&#x60;: Points have no expiration date.   - &#x60;timestamp value&#x60;: Points expire on the given date. 
   * @return expiryDate
  **/
  @ApiModelProperty(example = "2022-08-02T15:04:05Z07:00", required = true, value = "Date when points expire. Possible values are:   - `unlimited`: Points have no expiration date.   - `timestamp value`: Points expire on the given date. ")

  public String getExpiryDate() {
    return expiryDate;
  }


  public void setExpiryDate(String expiryDate) {
    this.expiryDate = expiryDate;
  }


  public CardLedgerTransactionLogEntryIntegrationAPI subledgerId(String subledgerId) {
    
    this.subledgerId = subledgerId;
    return this;
  }

   /**
   * ID of the subledger.
   * @return subledgerId
  **/
  @ApiModelProperty(example = "sub-123", required = true, value = "ID of the subledger.")

  public String getSubledgerId() {
    return subledgerId;
  }


  public void setSubledgerId(String subledgerId) {
    this.subledgerId = subledgerId;
  }


  public CardLedgerTransactionLogEntryIntegrationAPI amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount of loyalty points added or deducted in the transaction.
   * @return amount
  **/
  @ApiModelProperty(example = "10.25", required = true, value = "Amount of loyalty points added or deducted in the transaction.")

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public CardLedgerTransactionLogEntryIntegrationAPI id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * ID of the loyalty ledger transaction.
   * @return id
  **/
  @ApiModelProperty(example = "123", required = true, value = "ID of the loyalty ledger transaction.")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public CardLedgerTransactionLogEntryIntegrationAPI rulesetId(Integer rulesetId) {
    
    this.rulesetId = rulesetId;
    return this;
  }

   /**
   * The ID of the ruleset containing the rule that triggered this effect.
   * @return rulesetId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11", value = "The ID of the ruleset containing the rule that triggered this effect.")

  public Integer getRulesetId() {
    return rulesetId;
  }


  public void setRulesetId(Integer rulesetId) {
    this.rulesetId = rulesetId;
  }


  public CardLedgerTransactionLogEntryIntegrationAPI ruleName(String ruleName) {
    
    this.ruleName = ruleName;
    return this;
  }

   /**
   * The name of the rule that triggered this effect.
   * @return ruleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Add 2 points", value = "The name of the rule that triggered this effect.")

  public String getRuleName() {
    return ruleName;
  }


  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardLedgerTransactionLogEntryIntegrationAPI cardLedgerTransactionLogEntryIntegrationAPI = (CardLedgerTransactionLogEntryIntegrationAPI) o;
    return Objects.equals(this.created, cardLedgerTransactionLogEntryIntegrationAPI.created) &&
        Objects.equals(this.programId, cardLedgerTransactionLogEntryIntegrationAPI.programId) &&
        Objects.equals(this.cardIdentifier, cardLedgerTransactionLogEntryIntegrationAPI.cardIdentifier) &&
        Objects.equals(this.customerSessionId, cardLedgerTransactionLogEntryIntegrationAPI.customerSessionId) &&
        Objects.equals(this.type, cardLedgerTransactionLogEntryIntegrationAPI.type) &&
        Objects.equals(this.name, cardLedgerTransactionLogEntryIntegrationAPI.name) &&
        Objects.equals(this.startDate, cardLedgerTransactionLogEntryIntegrationAPI.startDate) &&
        Objects.equals(this.expiryDate, cardLedgerTransactionLogEntryIntegrationAPI.expiryDate) &&
        Objects.equals(this.subledgerId, cardLedgerTransactionLogEntryIntegrationAPI.subledgerId) &&
        Objects.equals(this.amount, cardLedgerTransactionLogEntryIntegrationAPI.amount) &&
        Objects.equals(this.id, cardLedgerTransactionLogEntryIntegrationAPI.id) &&
        Objects.equals(this.rulesetId, cardLedgerTransactionLogEntryIntegrationAPI.rulesetId) &&
        Objects.equals(this.ruleName, cardLedgerTransactionLogEntryIntegrationAPI.ruleName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, programId, cardIdentifier, customerSessionId, type, name, startDate, expiryDate, subledgerId, amount, id, rulesetId, ruleName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardLedgerTransactionLogEntryIntegrationAPI {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    programId: ").append(toIndentedString(programId)).append("\n");
    sb.append("    cardIdentifier: ").append(toIndentedString(cardIdentifier)).append("\n");
    sb.append("    customerSessionId: ").append(toIndentedString(customerSessionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    subledgerId: ").append(toIndentedString(subledgerId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rulesetId: ").append(toIndentedString(rulesetId)).append("\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

