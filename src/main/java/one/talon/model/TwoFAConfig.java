/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TwoFAConfig
 */

public class TwoFAConfig {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_REQUIRE_EVERY_SIGN_IN = "requireEverySignIn";
  @SerializedName(SERIALIZED_NAME_REQUIRE_EVERY_SIGN_IN)
  private Boolean requireEverySignIn;


  public TwoFAConfig enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * An indication of whether two-factor authentication is enabled for the account.
   * @return enabled
  **/
  @ApiModelProperty(example = "true", required = true, value = "An indication of whether two-factor authentication is enabled for the account.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public TwoFAConfig requireEverySignIn(Boolean requireEverySignIn) {
    
    this.requireEverySignIn = requireEverySignIn;
    return this;
  }

   /**
   * Can be &#x60;true&#x60; or &#x60;false&#x60;. - &#x60;true&#x60;: Two-factor authentication is required each time a user signs in to their Talon.One account. - &#x60;false&#x60;: Two-factor authentication is only required when a user signs in to their Talon.One account on a new device, and every 30 days after that. 
   * @return requireEverySignIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Can be `true` or `false`. - `true`: Two-factor authentication is required each time a user signs in to their Talon.One account. - `false`: Two-factor authentication is only required when a user signs in to their Talon.One account on a new device, and every 30 days after that. ")

  public Boolean getRequireEverySignIn() {
    return requireEverySignIn;
  }


  public void setRequireEverySignIn(Boolean requireEverySignIn) {
    this.requireEverySignIn = requireEverySignIn;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TwoFAConfig twoFAConfig = (TwoFAConfig) o;
    return Objects.equals(this.enabled, twoFAConfig.enabled) &&
        Objects.equals(this.requireEverySignIn, twoFAConfig.requireEverySignIn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, requireEverySignIn);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TwoFAConfig {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    requireEverySignIn: ").append(toIndentedString(requireEverySignIn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

