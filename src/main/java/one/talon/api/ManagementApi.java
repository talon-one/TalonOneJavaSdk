/*
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.api;

import one.talon.ApiCallback;
import one.talon.ApiClient;
import one.talon.ApiException;
import one.talon.ApiResponse;
import one.talon.Configuration;
import one.talon.Pair;
import one.talon.ProgressRequestBody;
import one.talon.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import one.talon.model.Account;
import one.talon.model.AccountAnalytics;
import one.talon.model.AccountLimits;
import one.talon.model.Application;
import one.talon.model.ApplicationApiHealth;
import one.talon.model.ApplicationCustomer;
import one.talon.model.ApplicationCustomerSearch;
import one.talon.model.ApplicationSession;
import one.talon.model.Attribute;
import one.talon.model.AttributeQuery;
import java.math.BigDecimal;
import one.talon.model.Campaign;
import one.talon.model.CampaignCopy;
import one.talon.model.CampaignSearch;
import one.talon.model.CampaignSet;
import one.talon.model.Coupon;
import one.talon.model.CouponSearch;
import one.talon.model.CustomerActivityReport;
import one.talon.model.CustomerAnalytics;
import one.talon.model.InlineResponse2001;
import one.talon.model.InlineResponse20010;
import one.talon.model.InlineResponse20011;
import one.talon.model.InlineResponse20012;
import one.talon.model.InlineResponse20013;
import one.talon.model.InlineResponse20014;
import one.talon.model.InlineResponse20015;
import one.talon.model.InlineResponse20016;
import one.talon.model.InlineResponse20017;
import one.talon.model.InlineResponse20018;
import one.talon.model.InlineResponse20019;
import one.talon.model.InlineResponse2002;
import one.talon.model.InlineResponse20020;
import one.talon.model.InlineResponse20021;
import one.talon.model.InlineResponse20022;
import one.talon.model.InlineResponse20023;
import one.talon.model.InlineResponse20024;
import one.talon.model.InlineResponse20025;
import one.talon.model.InlineResponse20026;
import one.talon.model.InlineResponse20027;
import one.talon.model.InlineResponse20028;
import one.talon.model.InlineResponse2003;
import one.talon.model.InlineResponse2004;
import one.talon.model.InlineResponse2005;
import one.talon.model.InlineResponse2006;
import one.talon.model.InlineResponse2007;
import one.talon.model.InlineResponse2008;
import one.talon.model.InlineResponse2009;
import one.talon.model.LoginParams;
import one.talon.model.LoyaltyLedger;
import one.talon.model.LoyaltyPoints;
import one.talon.model.LoyaltyProgram;
import one.talon.model.NewCampaign;
import one.talon.model.NewCampaignSet;
import one.talon.model.NewCoupons;
import one.talon.model.NewPassword;
import one.talon.model.NewPasswordEmail;
import one.talon.model.NewRuleset;
import org.threeten.bp.OffsetDateTime;
import one.talon.model.Role;
import one.talon.model.Ruleset;
import one.talon.model.Session;
import one.talon.model.UpdateCampaign;
import one.talon.model.UpdateCoupon;
import one.talon.model.UpdateCouponBatch;
import one.talon.model.User;
import one.talon.model.Webhook;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementApi {
    private ApiClient apiClient;

    public ManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addLoyaltyPoints
     * @param programID  (required)
     * @param integrationID  (required)
     * @param loyaltyPoints  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLoyaltyPointsCall(String programID, String integrationID, LoyaltyPoints loyaltyPoints, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = loyaltyPoints;

        // create path and map variables
        String localVarPath = "/v1/loyalty_programs/{programID}/profile/{integrationID}/add_points"
            .replaceAll("\\{" + "programID" + "\\}", apiClient.escapeString(programID.toString()))
            .replaceAll("\\{" + "integrationID" + "\\}", apiClient.escapeString(integrationID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLoyaltyPointsValidateBeforeCall(String programID, String integrationID, LoyaltyPoints loyaltyPoints, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'programID' is set
        if (programID == null) {
            throw new ApiException("Missing the required parameter 'programID' when calling addLoyaltyPoints(Async)");
        }
        
        // verify the required parameter 'integrationID' is set
        if (integrationID == null) {
            throw new ApiException("Missing the required parameter 'integrationID' when calling addLoyaltyPoints(Async)");
        }
        
        // verify the required parameter 'loyaltyPoints' is set
        if (loyaltyPoints == null) {
            throw new ApiException("Missing the required parameter 'loyaltyPoints' when calling addLoyaltyPoints(Async)");
        }
        

        com.squareup.okhttp.Call call = addLoyaltyPointsCall(programID, integrationID, loyaltyPoints, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add points in a certain loyalty program for the specified customer
     * 
     * @param programID  (required)
     * @param integrationID  (required)
     * @param loyaltyPoints  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addLoyaltyPoints(String programID, String integrationID, LoyaltyPoints loyaltyPoints) throws ApiException {
        addLoyaltyPointsWithHttpInfo(programID, integrationID, loyaltyPoints);
    }

    /**
     * Add points in a certain loyalty program for the specified customer
     * 
     * @param programID  (required)
     * @param integrationID  (required)
     * @param loyaltyPoints  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addLoyaltyPointsWithHttpInfo(String programID, String integrationID, LoyaltyPoints loyaltyPoints) throws ApiException {
        com.squareup.okhttp.Call call = addLoyaltyPointsValidateBeforeCall(programID, integrationID, loyaltyPoints, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add points in a certain loyalty program for the specified customer (asynchronously)
     * 
     * @param programID  (required)
     * @param integrationID  (required)
     * @param loyaltyPoints  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLoyaltyPointsAsync(String programID, String integrationID, LoyaltyPoints loyaltyPoints, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLoyaltyPointsValidateBeforeCall(programID, integrationID, loyaltyPoints, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for copyCampaignToApplications
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param campaignCopy  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyCampaignToApplicationsCall(Integer applicationId, Integer campaignId, CampaignCopy campaignCopy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = campaignCopy;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/copy"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call copyCampaignToApplicationsValidateBeforeCall(Integer applicationId, Integer campaignId, CampaignCopy campaignCopy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling copyCampaignToApplications(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling copyCampaignToApplications(Async)");
        }
        
        // verify the required parameter 'campaignCopy' is set
        if (campaignCopy == null) {
            throw new ApiException("Missing the required parameter 'campaignCopy' when calling copyCampaignToApplications(Async)");
        }
        

        com.squareup.okhttp.Call call = copyCampaignToApplicationsCall(applicationId, campaignId, campaignCopy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Copy the campaign into every specified application
     * Copy the campaign into every specified application.
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param campaignCopy  (required)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 copyCampaignToApplications(Integer applicationId, Integer campaignId, CampaignCopy campaignCopy) throws ApiException {
        ApiResponse<InlineResponse2003> resp = copyCampaignToApplicationsWithHttpInfo(applicationId, campaignId, campaignCopy);
        return resp.getData();
    }

    /**
     * Copy the campaign into every specified application
     * Copy the campaign into every specified application.
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param campaignCopy  (required)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> copyCampaignToApplicationsWithHttpInfo(Integer applicationId, Integer campaignId, CampaignCopy campaignCopy) throws ApiException {
        com.squareup.okhttp.Call call = copyCampaignToApplicationsValidateBeforeCall(applicationId, campaignId, campaignCopy, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Copy the campaign into every specified application (asynchronously)
     * Copy the campaign into every specified application.
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param campaignCopy  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyCampaignToApplicationsAsync(Integer applicationId, Integer campaignId, CampaignCopy campaignCopy, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyCampaignToApplicationsValidateBeforeCall(applicationId, campaignId, campaignCopy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCampaign
     * @param applicationId  (required)
     * @param newCampaign  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCampaignCall(Integer applicationId, NewCampaign newCampaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = newCampaign;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCampaignValidateBeforeCall(Integer applicationId, NewCampaign newCampaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling createCampaign(Async)");
        }
        
        // verify the required parameter 'newCampaign' is set
        if (newCampaign == null) {
            throw new ApiException("Missing the required parameter 'newCampaign' when calling createCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = createCampaignCall(applicationId, newCampaign, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Campaign
     * 
     * @param applicationId  (required)
     * @param newCampaign  (required)
     * @return Campaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Campaign createCampaign(Integer applicationId, NewCampaign newCampaign) throws ApiException {
        ApiResponse<Campaign> resp = createCampaignWithHttpInfo(applicationId, newCampaign);
        return resp.getData();
    }

    /**
     * Create a Campaign
     * 
     * @param applicationId  (required)
     * @param newCampaign  (required)
     * @return ApiResponse&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Campaign> createCampaignWithHttpInfo(Integer applicationId, NewCampaign newCampaign) throws ApiException {
        com.squareup.okhttp.Call call = createCampaignValidateBeforeCall(applicationId, newCampaign, null, null);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Campaign (asynchronously)
     * 
     * @param applicationId  (required)
     * @param newCampaign  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCampaignAsync(Integer applicationId, NewCampaign newCampaign, final ApiCallback<Campaign> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCampaignValidateBeforeCall(applicationId, newCampaign, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCoupons
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param newCoupons  (required)
     * @param silent If set to &#39;yes&#39;, response will be an empty 204, otherwise a list of the coupons generated (to to 1000). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCouponsCall(Integer applicationId, Integer campaignId, NewCoupons newCoupons, String silent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = newCoupons;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (silent != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("silent", silent));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCouponsValidateBeforeCall(Integer applicationId, Integer campaignId, NewCoupons newCoupons, String silent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling createCoupons(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling createCoupons(Async)");
        }
        
        // verify the required parameter 'newCoupons' is set
        if (newCoupons == null) {
            throw new ApiException("Missing the required parameter 'newCoupons' when calling createCoupons(Async)");
        }
        

        com.squareup.okhttp.Call call = createCouponsCall(applicationId, campaignId, newCoupons, silent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Coupons
     * Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupns can be created.
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param newCoupons  (required)
     * @param silent If set to &#39;yes&#39;, response will be an empty 204, otherwise a list of the coupons generated (to to 1000). (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 createCoupons(Integer applicationId, Integer campaignId, NewCoupons newCoupons, String silent) throws ApiException {
        ApiResponse<InlineResponse2001> resp = createCouponsWithHttpInfo(applicationId, campaignId, newCoupons, silent);
        return resp.getData();
    }

    /**
     * Create Coupons
     * Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupns can be created.
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param newCoupons  (required)
     * @param silent If set to &#39;yes&#39;, response will be an empty 204, otherwise a list of the coupons generated (to to 1000). (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> createCouponsWithHttpInfo(Integer applicationId, Integer campaignId, NewCoupons newCoupons, String silent) throws ApiException {
        com.squareup.okhttp.Call call = createCouponsValidateBeforeCall(applicationId, campaignId, newCoupons, silent, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Coupons (asynchronously)
     * Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupns can be created.
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param newCoupons  (required)
     * @param silent If set to &#39;yes&#39;, response will be an empty 204, otherwise a list of the coupons generated (to to 1000). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCouponsAsync(Integer applicationId, Integer campaignId, NewCoupons newCoupons, String silent, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCouponsValidateBeforeCall(applicationId, campaignId, newCoupons, silent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPasswordRecoveryEmail
     * @param newPasswordEmail  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPasswordRecoveryEmailCall(NewPasswordEmail newPasswordEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = newPasswordEmail;

        // create path and map variables
        String localVarPath = "/v1/password_recovery_emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPasswordRecoveryEmailValidateBeforeCall(NewPasswordEmail newPasswordEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'newPasswordEmail' is set
        if (newPasswordEmail == null) {
            throw new ApiException("Missing the required parameter 'newPasswordEmail' when calling createPasswordRecoveryEmail(Async)");
        }
        

        com.squareup.okhttp.Call call = createPasswordRecoveryEmailCall(newPasswordEmail, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Request a password reset
     * Sends an email with a password recovery link to the email of an existing account. 
     * @param newPasswordEmail  (required)
     * @return NewPasswordEmail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NewPasswordEmail createPasswordRecoveryEmail(NewPasswordEmail newPasswordEmail) throws ApiException {
        ApiResponse<NewPasswordEmail> resp = createPasswordRecoveryEmailWithHttpInfo(newPasswordEmail);
        return resp.getData();
    }

    /**
     * Request a password reset
     * Sends an email with a password recovery link to the email of an existing account. 
     * @param newPasswordEmail  (required)
     * @return ApiResponse&lt;NewPasswordEmail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NewPasswordEmail> createPasswordRecoveryEmailWithHttpInfo(NewPasswordEmail newPasswordEmail) throws ApiException {
        com.squareup.okhttp.Call call = createPasswordRecoveryEmailValidateBeforeCall(newPasswordEmail, null, null);
        Type localVarReturnType = new TypeToken<NewPasswordEmail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Request a password reset (asynchronously)
     * Sends an email with a password recovery link to the email of an existing account. 
     * @param newPasswordEmail  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPasswordRecoveryEmailAsync(NewPasswordEmail newPasswordEmail, final ApiCallback<NewPasswordEmail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPasswordRecoveryEmailValidateBeforeCall(newPasswordEmail, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NewPasswordEmail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createRuleset
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param newRuleset  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRulesetCall(Integer applicationId, Integer campaignId, NewRuleset newRuleset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = newRuleset;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRulesetValidateBeforeCall(Integer applicationId, Integer campaignId, NewRuleset newRuleset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling createRuleset(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling createRuleset(Async)");
        }
        
        // verify the required parameter 'newRuleset' is set
        if (newRuleset == null) {
            throw new ApiException("Missing the required parameter 'newRuleset' when calling createRuleset(Async)");
        }
        

        com.squareup.okhttp.Call call = createRulesetCall(applicationId, campaignId, newRuleset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Ruleset
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param newRuleset  (required)
     * @return Ruleset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ruleset createRuleset(Integer applicationId, Integer campaignId, NewRuleset newRuleset) throws ApiException {
        ApiResponse<Ruleset> resp = createRulesetWithHttpInfo(applicationId, campaignId, newRuleset);
        return resp.getData();
    }

    /**
     * Create a Ruleset
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param newRuleset  (required)
     * @return ApiResponse&lt;Ruleset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ruleset> createRulesetWithHttpInfo(Integer applicationId, Integer campaignId, NewRuleset newRuleset) throws ApiException {
        com.squareup.okhttp.Call call = createRulesetValidateBeforeCall(applicationId, campaignId, newRuleset, null, null);
        Type localVarReturnType = new TypeToken<Ruleset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Ruleset (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param newRuleset  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRulesetAsync(Integer applicationId, Integer campaignId, NewRuleset newRuleset, final ApiCallback<Ruleset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRulesetValidateBeforeCall(applicationId, campaignId, newRuleset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ruleset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSession
     * @param loginParams  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSessionCall(LoginParams loginParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = loginParams;

        // create path and map variables
        String localVarPath = "/v1/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSessionValidateBeforeCall(LoginParams loginParams, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loginParams' is set
        if (loginParams == null) {
            throw new ApiException("Missing the required parameter 'loginParams' when calling createSession(Async)");
        }
        

        com.squareup.okhttp.Call call = createSessionCall(loginParams, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Session
     * 
     * @param loginParams  (required)
     * @return Session
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Session createSession(LoginParams loginParams) throws ApiException {
        ApiResponse<Session> resp = createSessionWithHttpInfo(loginParams);
        return resp.getData();
    }

    /**
     * Create a Session
     * 
     * @param loginParams  (required)
     * @return ApiResponse&lt;Session&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Session> createSessionWithHttpInfo(LoginParams loginParams) throws ApiException {
        com.squareup.okhttp.Call call = createSessionValidateBeforeCall(loginParams, null, null);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Session (asynchronously)
     * 
     * @param loginParams  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSessionAsync(LoginParams loginParams, final ApiCallback<Session> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSessionValidateBeforeCall(loginParams, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCampaign
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCampaignCall(Integer applicationId, Integer campaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCampaignValidateBeforeCall(Integer applicationId, Integer campaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling deleteCampaign(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCampaignCall(applicationId, campaignId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Campaign
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCampaign(Integer applicationId, Integer campaignId) throws ApiException {
        deleteCampaignWithHttpInfo(applicationId, campaignId);
    }

    /**
     * Delete a Campaign
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCampaignWithHttpInfo(Integer applicationId, Integer campaignId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCampaignValidateBeforeCall(applicationId, campaignId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Campaign (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCampaignAsync(Integer applicationId, Integer campaignId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCampaignValidateBeforeCall(applicationId, campaignId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCoupon
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param couponId The ID of the coupon code to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCouponCall(Integer applicationId, Integer campaignId, String couponId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()))
            .replaceAll("\\{" + "couponId" + "\\}", apiClient.escapeString(couponId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCouponValidateBeforeCall(Integer applicationId, Integer campaignId, String couponId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling deleteCoupon(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteCoupon(Async)");
        }
        
        // verify the required parameter 'couponId' is set
        if (couponId == null) {
            throw new ApiException("Missing the required parameter 'couponId' when calling deleteCoupon(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCouponCall(applicationId, campaignId, couponId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete one Coupon
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param couponId The ID of the coupon code to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCoupon(Integer applicationId, Integer campaignId, String couponId) throws ApiException {
        deleteCouponWithHttpInfo(applicationId, campaignId, couponId);
    }

    /**
     * Delete one Coupon
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param couponId The ID of the coupon code to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCouponWithHttpInfo(Integer applicationId, Integer campaignId, String couponId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCouponValidateBeforeCall(applicationId, campaignId, couponId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete one Coupon (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param couponId The ID of the coupon code to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCouponAsync(Integer applicationId, Integer campaignId, String couponId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCouponValidateBeforeCall(applicationId, campaignId, couponId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCoupons
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCouponsCall(Integer applicationId, Integer campaignId, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, OffsetDateTime startsAfter, OffsetDateTime startsBefore, OffsetDateTime expiresAfter, OffsetDateTime expiresBefore, String valid, String batchId, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (value != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("value", value));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (startsAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startsAfter", startsAfter));
        }

        if (startsBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startsBefore", startsBefore));
        }

        if (expiresAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("expiresAfter", expiresAfter));
        }

        if (expiresBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("expiresBefore", expiresBefore));
        }

        if (valid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("valid", valid));
        }

        if (batchId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("batchId", batchId));
        }

        if (usable != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("usable", usable));
        }

        if (referralId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("referralId", referralId));
        }

        if (recipientIntegrationId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("recipientIntegrationId", recipientIntegrationId));
        }

        if (exactMatch != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exactMatch", exactMatch));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCouponsValidateBeforeCall(Integer applicationId, Integer campaignId, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, OffsetDateTime startsAfter, OffsetDateTime startsBefore, OffsetDateTime expiresAfter, OffsetDateTime expiresBefore, String valid, String batchId, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling deleteCoupons(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteCoupons(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCouponsCall(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Coupons
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCoupons(Integer applicationId, Integer campaignId, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, OffsetDateTime startsAfter, OffsetDateTime startsBefore, OffsetDateTime expiresAfter, OffsetDateTime expiresBefore, String valid, String batchId, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch) throws ApiException {
        deleteCouponsWithHttpInfo(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);
    }

    /**
     * Delete Coupons
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCouponsWithHttpInfo(Integer applicationId, Integer campaignId, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, OffsetDateTime startsAfter, OffsetDateTime startsBefore, OffsetDateTime expiresAfter, OffsetDateTime expiresBefore, String valid, String batchId, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch) throws ApiException {
        com.squareup.okhttp.Call call = deleteCouponsValidateBeforeCall(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Coupons (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCouponsAsync(Integer applicationId, Integer campaignId, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, OffsetDateTime startsAfter, OffsetDateTime startsBefore, OffsetDateTime expiresAfter, OffsetDateTime expiresBefore, String valid, String batchId, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCouponsValidateBeforeCall(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReferral
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param referralId The ID of the referral code to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReferralCall(Integer applicationId, Integer campaignId, String referralId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()))
            .replaceAll("\\{" + "referralId" + "\\}", apiClient.escapeString(referralId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReferralValidateBeforeCall(Integer applicationId, Integer campaignId, String referralId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling deleteReferral(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteReferral(Async)");
        }
        
        // verify the required parameter 'referralId' is set
        if (referralId == null) {
            throw new ApiException("Missing the required parameter 'referralId' when calling deleteReferral(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReferralCall(applicationId, campaignId, referralId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete one Referral
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param referralId The ID of the referral code to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReferral(Integer applicationId, Integer campaignId, String referralId) throws ApiException {
        deleteReferralWithHttpInfo(applicationId, campaignId, referralId);
    }

    /**
     * Delete one Referral
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param referralId The ID of the referral code to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReferralWithHttpInfo(Integer applicationId, Integer campaignId, String referralId) throws ApiException {
        com.squareup.okhttp.Call call = deleteReferralValidateBeforeCall(applicationId, campaignId, referralId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete one Referral (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param referralId The ID of the referral code to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReferralAsync(Integer applicationId, Integer campaignId, String referralId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReferralValidateBeforeCall(applicationId, campaignId, referralId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteRuleset
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rulesetId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRulesetCall(Integer applicationId, Integer campaignId, Integer rulesetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()))
            .replaceAll("\\{" + "rulesetId" + "\\}", apiClient.escapeString(rulesetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRulesetValidateBeforeCall(Integer applicationId, Integer campaignId, Integer rulesetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling deleteRuleset(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteRuleset(Async)");
        }
        
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling deleteRuleset(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteRulesetCall(applicationId, campaignId, rulesetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Ruleset
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rulesetId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRuleset(Integer applicationId, Integer campaignId, Integer rulesetId) throws ApiException {
        deleteRulesetWithHttpInfo(applicationId, campaignId, rulesetId);
    }

    /**
     * Delete a Ruleset
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rulesetId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRulesetWithHttpInfo(Integer applicationId, Integer campaignId, Integer rulesetId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRulesetValidateBeforeCall(applicationId, campaignId, rulesetId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Ruleset (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rulesetId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRulesetAsync(Integer applicationId, Integer campaignId, Integer rulesetId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRulesetValidateBeforeCall(applicationId, campaignId, rulesetId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAccessLogs
     * @param applicationId  (required)
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param path Only return results where the request path matches the given regular expresssion. (optional)
     * @param method Only return results where the request method matches the given regular expresssion. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccessLogsCall(Integer applicationId, OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String path, String method, String status, Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/access_logs"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        }

        if (method != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("method", method));
        }

        if (status != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        }

        if (rangeStart != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("rangeStart", rangeStart));
        }

        if (rangeEnd != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("rangeEnd", rangeEnd));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccessLogsValidateBeforeCall(Integer applicationId, OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String path, String method, String status, Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getAccessLogs(Async)");
        }
        
        // verify the required parameter 'rangeStart' is set
        if (rangeStart == null) {
            throw new ApiException("Missing the required parameter 'rangeStart' when calling getAccessLogs(Async)");
        }
        
        // verify the required parameter 'rangeEnd' is set
        if (rangeEnd == null) {
            throw new ApiException("Missing the required parameter 'rangeEnd' when calling getAccessLogs(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccessLogsCall(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get access logs for application
     * 
     * @param applicationId  (required)
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param path Only return results where the request path matches the given regular expresssion. (optional)
     * @param method Only return results where the request method matches the given regular expresssion. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return InlineResponse2009
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2009 getAccessLogs(Integer applicationId, OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String path, String method, String status, Integer pageSize, Integer skip, String sort) throws ApiException {
        ApiResponse<InlineResponse2009> resp = getAccessLogsWithHttpInfo(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
        return resp.getData();
    }

    /**
     * Get access logs for application
     * 
     * @param applicationId  (required)
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param path Only return results where the request path matches the given regular expresssion. (optional)
     * @param method Only return results where the request method matches the given regular expresssion. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return ApiResponse&lt;InlineResponse2009&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2009> getAccessLogsWithHttpInfo(Integer applicationId, OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String path, String method, String status, Integer pageSize, Integer skip, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getAccessLogsValidateBeforeCall(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get access logs for application (asynchronously)
     * 
     * @param applicationId  (required)
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param path Only return results where the request path matches the given regular expresssion. (optional)
     * @param method Only return results where the request method matches the given regular expresssion. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccessLogsAsync(Integer applicationId, OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String path, String method, String status, Integer pageSize, Integer skip, String sort, final ApiCallback<InlineResponse2009> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccessLogsValidateBeforeCall(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccessLogsWithoutTotalCount
     * @param applicationId  (required)
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param path Only return results where the request path matches the given regular expresssion. (optional)
     * @param method Only return results where the request method matches the given regular expresssion. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccessLogsWithoutTotalCountCall(Integer applicationId, OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String path, String method, String status, Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/access_logs/no_total"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        }

        if (method != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("method", method));
        }

        if (status != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        }

        if (rangeStart != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("rangeStart", rangeStart));
        }

        if (rangeEnd != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("rangeEnd", rangeEnd));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccessLogsWithoutTotalCountValidateBeforeCall(Integer applicationId, OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String path, String method, String status, Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getAccessLogsWithoutTotalCount(Async)");
        }
        
        // verify the required parameter 'rangeStart' is set
        if (rangeStart == null) {
            throw new ApiException("Missing the required parameter 'rangeStart' when calling getAccessLogsWithoutTotalCount(Async)");
        }
        
        // verify the required parameter 'rangeEnd' is set
        if (rangeEnd == null) {
            throw new ApiException("Missing the required parameter 'rangeEnd' when calling getAccessLogsWithoutTotalCount(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccessLogsWithoutTotalCountCall(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get access logs for application
     * 
     * @param applicationId  (required)
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param path Only return results where the request path matches the given regular expresssion. (optional)
     * @param method Only return results where the request method matches the given regular expresssion. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return InlineResponse20010
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20010 getAccessLogsWithoutTotalCount(Integer applicationId, OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String path, String method, String status, Integer pageSize, Integer skip, String sort) throws ApiException {
        ApiResponse<InlineResponse20010> resp = getAccessLogsWithoutTotalCountWithHttpInfo(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
        return resp.getData();
    }

    /**
     * Get access logs for application
     * 
     * @param applicationId  (required)
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param path Only return results where the request path matches the given regular expresssion. (optional)
     * @param method Only return results where the request method matches the given regular expresssion. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20010&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20010> getAccessLogsWithoutTotalCountWithHttpInfo(Integer applicationId, OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String path, String method, String status, Integer pageSize, Integer skip, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getAccessLogsWithoutTotalCountValidateBeforeCall(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get access logs for application (asynchronously)
     * 
     * @param applicationId  (required)
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param path Only return results where the request path matches the given regular expresssion. (optional)
     * @param method Only return results where the request method matches the given regular expresssion. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccessLogsWithoutTotalCountAsync(Integer applicationId, OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String path, String method, String status, Integer pageSize, Integer skip, String sort, final ApiCallback<InlineResponse20010> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccessLogsWithoutTotalCountValidateBeforeCall(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccount
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/accounts/{accountId}"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountValidateBeforeCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Account Details
     * Return the details of your companies Talon.One account. 
     * @param accountId  (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Account getAccount(Integer accountId) throws ApiException {
        ApiResponse<Account> resp = getAccountWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Get Account Details
     * Return the details of your companies Talon.One account. 
     * @param accountId  (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Account> getAccountWithHttpInfo(Integer accountId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Account Details (asynchronously)
     * Return the details of your companies Talon.One account. 
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountAsync(Integer accountId, final ApiCallback<Account> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountAnalytics
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountAnalyticsCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/accounts/{accountId}/analytics"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountAnalyticsValidateBeforeCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountAnalytics(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountAnalyticsCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Account Analytics
     * Return the analytics of your companies Talon.One account. 
     * @param accountId  (required)
     * @return AccountAnalytics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountAnalytics getAccountAnalytics(Integer accountId) throws ApiException {
        ApiResponse<AccountAnalytics> resp = getAccountAnalyticsWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Get Account Analytics
     * Return the analytics of your companies Talon.One account. 
     * @param accountId  (required)
     * @return ApiResponse&lt;AccountAnalytics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountAnalytics> getAccountAnalyticsWithHttpInfo(Integer accountId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountAnalyticsValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<AccountAnalytics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Account Analytics (asynchronously)
     * Return the analytics of your companies Talon.One account. 
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountAnalyticsAsync(Integer accountId, final ApiCallback<AccountAnalytics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountAnalyticsValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountAnalytics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountLimits
     * @param accountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountLimitsCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/accounts/{accountId}/limits"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountLimitsValidateBeforeCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountLimits(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountLimitsCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Account Limits
     * Returns a list of all account limits set 
     * @param accountId  (required)
     * @return AccountLimits
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountLimits getAccountLimits(Integer accountId) throws ApiException {
        ApiResponse<AccountLimits> resp = getAccountLimitsWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Get Account Limits
     * Returns a list of all account limits set 
     * @param accountId  (required)
     * @return ApiResponse&lt;AccountLimits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountLimits> getAccountLimitsWithHttpInfo(Integer accountId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountLimitsValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<AccountLimits>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Account Limits (asynchronously)
     * Returns a list of all account limits set 
     * @param accountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountLimitsAsync(Integer accountId, final ApiCallback<AccountLimits> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountLimitsValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountLimits>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllAccessLogs
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param path Only return results where the request path matches the given regular expresssion. (optional)
     * @param method Only return results where the request method matches the given regular expresssion. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllAccessLogsCall(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String path, String method, String status, Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/access_logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (rangeStart != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("rangeStart", rangeStart));
        }

        if (rangeEnd != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("rangeEnd", rangeEnd));
        }

        if (path != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        }

        if (method != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("method", method));
        }

        if (status != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllAccessLogsValidateBeforeCall(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String path, String method, String status, Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'rangeStart' is set
        if (rangeStart == null) {
            throw new ApiException("Missing the required parameter 'rangeStart' when calling getAllAccessLogs(Async)");
        }
        
        // verify the required parameter 'rangeEnd' is set
        if (rangeEnd == null) {
            throw new ApiException("Missing the required parameter 'rangeEnd' when calling getAllAccessLogs(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllAccessLogsCall(rangeStart, rangeEnd, path, method, status, pageSize, skip, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all access logs
     * Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param path Only return results where the request path matches the given regular expresssion. (optional)
     * @param method Only return results where the request method matches the given regular expresssion. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return InlineResponse2009
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2009 getAllAccessLogs(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String path, String method, String status, Integer pageSize, Integer skip, String sort) throws ApiException {
        ApiResponse<InlineResponse2009> resp = getAllAccessLogsWithHttpInfo(rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
        return resp.getData();
    }

    /**
     * Get all access logs
     * Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param path Only return results where the request path matches the given regular expresssion. (optional)
     * @param method Only return results where the request method matches the given regular expresssion. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return ApiResponse&lt;InlineResponse2009&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2009> getAllAccessLogsWithHttpInfo(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String path, String method, String status, Integer pageSize, Integer skip, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getAllAccessLogsValidateBeforeCall(rangeStart, rangeEnd, path, method, status, pageSize, skip, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all access logs (asynchronously)
     * Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param path Only return results where the request path matches the given regular expresssion. (optional)
     * @param method Only return results where the request method matches the given regular expresssion. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAccessLogsAsync(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String path, String method, String status, Integer pageSize, Integer skip, String sort, final ApiCallback<InlineResponse2009> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAccessLogsValidateBeforeCall(rangeStart, rangeEnd, path, method, status, pageSize, skip, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllRoles
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllRolesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllRolesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllRolesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all roles.
     * 
     * @return InlineResponse20028
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20028 getAllRoles() throws ApiException {
        ApiResponse<InlineResponse20028> resp = getAllRolesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all roles.
     * 
     * @return ApiResponse&lt;InlineResponse20028&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20028> getAllRolesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllRolesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20028>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all roles. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllRolesAsync(final ApiCallback<InlineResponse20028> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllRolesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20028>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApplication
     * @param applicationId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApplicationCall(Integer applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApplicationValidateBeforeCall(Integer applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getApplication(Async)");
        }
        

        com.squareup.okhttp.Call call = getApplicationCall(applicationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Application
     * Get the application specified by the ID.
     * @param applicationId  (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Application getApplication(Integer applicationId) throws ApiException {
        ApiResponse<Application> resp = getApplicationWithHttpInfo(applicationId);
        return resp.getData();
    }

    /**
     * Get Application
     * Get the application specified by the ID.
     * @param applicationId  (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Application> getApplicationWithHttpInfo(Integer applicationId) throws ApiException {
        com.squareup.okhttp.Call call = getApplicationValidateBeforeCall(applicationId, null, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Application (asynchronously)
     * Get the application specified by the ID.
     * @param applicationId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicationAsync(Integer applicationId, final ApiCallback<Application> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicationValidateBeforeCall(applicationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApplicationApiHealth
     * @param applicationId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApplicationApiHealthCall(Integer applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/health_report"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApplicationApiHealthValidateBeforeCall(Integer applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getApplicationApiHealth(Async)");
        }
        

        com.squareup.okhttp.Call call = getApplicationApiHealthCall(applicationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get report of health of application API
     * 
     * @param applicationId  (required)
     * @return ApplicationApiHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApplicationApiHealth getApplicationApiHealth(Integer applicationId) throws ApiException {
        ApiResponse<ApplicationApiHealth> resp = getApplicationApiHealthWithHttpInfo(applicationId);
        return resp.getData();
    }

    /**
     * Get report of health of application API
     * 
     * @param applicationId  (required)
     * @return ApiResponse&lt;ApplicationApiHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApplicationApiHealth> getApplicationApiHealthWithHttpInfo(Integer applicationId) throws ApiException {
        com.squareup.okhttp.Call call = getApplicationApiHealthValidateBeforeCall(applicationId, null, null);
        Type localVarReturnType = new TypeToken<ApplicationApiHealth>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get report of health of application API (asynchronously)
     * 
     * @param applicationId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicationApiHealthAsync(Integer applicationId, final ApiCallback<ApplicationApiHealth> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicationApiHealthValidateBeforeCall(applicationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApplicationApiHealth>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApplicationCustomer
     * @param applicationId  (required)
     * @param customerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApplicationCustomerCall(Integer applicationId, Integer customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/customers/{customerId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApplicationCustomerValidateBeforeCall(Integer applicationId, Integer customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getApplicationCustomer(Async)");
        }
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getApplicationCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = getApplicationCustomerCall(applicationId, customerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Application Customer
     * 
     * @param applicationId  (required)
     * @param customerId  (required)
     * @return ApplicationCustomer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApplicationCustomer getApplicationCustomer(Integer applicationId, Integer customerId) throws ApiException {
        ApiResponse<ApplicationCustomer> resp = getApplicationCustomerWithHttpInfo(applicationId, customerId);
        return resp.getData();
    }

    /**
     * Get Application Customer
     * 
     * @param applicationId  (required)
     * @param customerId  (required)
     * @return ApiResponse&lt;ApplicationCustomer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApplicationCustomer> getApplicationCustomerWithHttpInfo(Integer applicationId, Integer customerId) throws ApiException {
        com.squareup.okhttp.Call call = getApplicationCustomerValidateBeforeCall(applicationId, customerId, null, null);
        Type localVarReturnType = new TypeToken<ApplicationCustomer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Application Customer (asynchronously)
     * 
     * @param applicationId  (required)
     * @param customerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicationCustomerAsync(Integer applicationId, Integer customerId, final ApiCallback<ApplicationCustomer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicationCustomerValidateBeforeCall(applicationId, customerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApplicationCustomer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApplicationCustomers
     * @param applicationId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApplicationCustomersCall(Integer applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/customers"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApplicationCustomersValidateBeforeCall(Integer applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getApplicationCustomers(Async)");
        }
        

        com.squareup.okhttp.Call call = getApplicationCustomersCall(applicationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Application Customers
     * 
     * @param applicationId  (required)
     * @return InlineResponse20012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20012 getApplicationCustomers(Integer applicationId) throws ApiException {
        ApiResponse<InlineResponse20012> resp = getApplicationCustomersWithHttpInfo(applicationId);
        return resp.getData();
    }

    /**
     * List Application Customers
     * 
     * @param applicationId  (required)
     * @return ApiResponse&lt;InlineResponse20012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20012> getApplicationCustomersWithHttpInfo(Integer applicationId) throws ApiException {
        com.squareup.okhttp.Call call = getApplicationCustomersValidateBeforeCall(applicationId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20012>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Application Customers (asynchronously)
     * 
     * @param applicationId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicationCustomersAsync(Integer applicationId, final ApiCallback<InlineResponse20012> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicationCustomersValidateBeforeCall(applicationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20012>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApplicationCustomersByAttributes
     * @param applicationCustomerSearch  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getApplicationCustomersByAttributesCall(ApplicationCustomerSearch applicationCustomerSearch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = applicationCustomerSearch;

        // create path and map variables
        String localVarPath = "/v1/application_customer_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "integration_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApplicationCustomersByAttributesValidateBeforeCall(ApplicationCustomerSearch applicationCustomerSearch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationCustomerSearch' is set
        if (applicationCustomerSearch == null) {
            throw new ApiException("Missing the required parameter 'applicationCustomerSearch' when calling getApplicationCustomersByAttributes(Async)");
        }
        

        com.squareup.okhttp.Call call = getApplicationCustomersByAttributesCall(applicationCustomerSearch, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of the customer profiles that match the given attributes
     * Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: http://help.talon.one/customer/en/portal/articles/2525263-data-model?b_id&#x3D;14115#customer-profile 
     * @param applicationCustomerSearch  (required)
     * @return InlineResponse20013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public InlineResponse20013 getApplicationCustomersByAttributes(ApplicationCustomerSearch applicationCustomerSearch) throws ApiException {
        ApiResponse<InlineResponse20013> resp = getApplicationCustomersByAttributesWithHttpInfo(applicationCustomerSearch);
        return resp.getData();
    }

    /**
     * Get a list of the customer profiles that match the given attributes
     * Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: http://help.talon.one/customer/en/portal/articles/2525263-data-model?b_id&#x3D;14115#customer-profile 
     * @param applicationCustomerSearch  (required)
     * @return ApiResponse&lt;InlineResponse20013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<InlineResponse20013> getApplicationCustomersByAttributesWithHttpInfo(ApplicationCustomerSearch applicationCustomerSearch) throws ApiException {
        com.squareup.okhttp.Call call = getApplicationCustomersByAttributesValidateBeforeCall(applicationCustomerSearch, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of the customer profiles that match the given attributes (asynchronously)
     * Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: http://help.talon.one/customer/en/portal/articles/2525263-data-model?b_id&#x3D;14115#customer-profile 
     * @param applicationCustomerSearch  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getApplicationCustomersByAttributesAsync(ApplicationCustomerSearch applicationCustomerSearch, final ApiCallback<InlineResponse20013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicationCustomersByAttributesValidateBeforeCall(applicationCustomerSearch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApplicationEventTypes
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApplicationEventTypesCall(Integer applicationId, Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/event_types"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApplicationEventTypesValidateBeforeCall(Integer applicationId, Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getApplicationEventTypes(Async)");
        }
        

        com.squareup.okhttp.Call call = getApplicationEventTypesCall(applicationId, pageSize, skip, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Applications Event Types
     * Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return InlineResponse20019
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20019 getApplicationEventTypes(Integer applicationId, Integer pageSize, Integer skip, String sort) throws ApiException {
        ApiResponse<InlineResponse20019> resp = getApplicationEventTypesWithHttpInfo(applicationId, pageSize, skip, sort);
        return resp.getData();
    }

    /**
     * List Applications Event Types
     * Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20019&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20019> getApplicationEventTypesWithHttpInfo(Integer applicationId, Integer pageSize, Integer skip, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getApplicationEventTypesValidateBeforeCall(applicationId, pageSize, skip, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20019>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Applications Event Types (asynchronously)
     * Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicationEventTypesAsync(Integer applicationId, Integer pageSize, Integer skip, String sort, final ApiCallback<InlineResponse20019> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicationEventTypesValidateBeforeCall(applicationId, pageSize, skip, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20019>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApplicationEvents
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param type Comma-separated list of types by which to filter events. Must be exact match(es). (optional)
     * @param createdBefore Only return events created before this date (optional)
     * @param createdAfter Only return events created after this date (optional)
     * @param session Session integration ID filter for events. Must be exact match. (optional)
     * @param profile Profile integration ID filter for events. Must be exact match. (optional)
     * @param customerName Customer name filter for events. Will match substrings case-insensitively. (optional)
     * @param customerEmail Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)
     * @param effectsQuery Effects filter for events. Will perform a full-text search on the text content of the events effects, if any. (optional)
     * @param attributesQuery Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values. (optional)
     * @param ruleQuery Rule name filter for events (optional)
     * @param campaignQuery Campaign name filter for events (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApplicationEventsCall(Integer applicationId, Integer pageSize, Integer skip, String sort, String type, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String session, String profile, String customerName, String customerEmail, String effectsQuery, String attributesQuery, String ruleQuery, String campaignQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/events"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (type != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (session != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("session", session));
        }

        if (profile != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("profile", profile));
        }

        if (customerName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("customerName", customerName));
        }

        if (customerEmail != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("customerEmail", customerEmail));
        }

        if (effectsQuery != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("effectsQuery", effectsQuery));
        }

        if (attributesQuery != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("attributesQuery", attributesQuery));
        }

        if (ruleQuery != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("ruleQuery", ruleQuery));
        }

        if (campaignQuery != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignQuery", campaignQuery));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApplicationEventsValidateBeforeCall(Integer applicationId, Integer pageSize, Integer skip, String sort, String type, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String session, String profile, String customerName, String customerEmail, String effectsQuery, String attributesQuery, String ruleQuery, String campaignQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getApplicationEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = getApplicationEventsCall(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, effectsQuery, attributesQuery, ruleQuery, campaignQuery, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Applications Events
     * Lists all events recorded for an application. 
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param type Comma-separated list of types by which to filter events. Must be exact match(es). (optional)
     * @param createdBefore Only return events created before this date (optional)
     * @param createdAfter Only return events created after this date (optional)
     * @param session Session integration ID filter for events. Must be exact match. (optional)
     * @param profile Profile integration ID filter for events. Must be exact match. (optional)
     * @param customerName Customer name filter for events. Will match substrings case-insensitively. (optional)
     * @param customerEmail Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)
     * @param effectsQuery Effects filter for events. Will perform a full-text search on the text content of the events effects, if any. (optional)
     * @param attributesQuery Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values. (optional)
     * @param ruleQuery Rule name filter for events (optional)
     * @param campaignQuery Campaign name filter for events (optional)
     * @return InlineResponse20017
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20017 getApplicationEvents(Integer applicationId, Integer pageSize, Integer skip, String sort, String type, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String session, String profile, String customerName, String customerEmail, String effectsQuery, String attributesQuery, String ruleQuery, String campaignQuery) throws ApiException {
        ApiResponse<InlineResponse20017> resp = getApplicationEventsWithHttpInfo(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, effectsQuery, attributesQuery, ruleQuery, campaignQuery);
        return resp.getData();
    }

    /**
     * List Applications Events
     * Lists all events recorded for an application. 
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param type Comma-separated list of types by which to filter events. Must be exact match(es). (optional)
     * @param createdBefore Only return events created before this date (optional)
     * @param createdAfter Only return events created after this date (optional)
     * @param session Session integration ID filter for events. Must be exact match. (optional)
     * @param profile Profile integration ID filter for events. Must be exact match. (optional)
     * @param customerName Customer name filter for events. Will match substrings case-insensitively. (optional)
     * @param customerEmail Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)
     * @param effectsQuery Effects filter for events. Will perform a full-text search on the text content of the events effects, if any. (optional)
     * @param attributesQuery Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values. (optional)
     * @param ruleQuery Rule name filter for events (optional)
     * @param campaignQuery Campaign name filter for events (optional)
     * @return ApiResponse&lt;InlineResponse20017&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20017> getApplicationEventsWithHttpInfo(Integer applicationId, Integer pageSize, Integer skip, String sort, String type, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String session, String profile, String customerName, String customerEmail, String effectsQuery, String attributesQuery, String ruleQuery, String campaignQuery) throws ApiException {
        com.squareup.okhttp.Call call = getApplicationEventsValidateBeforeCall(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, effectsQuery, attributesQuery, ruleQuery, campaignQuery, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20017>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Applications Events (asynchronously)
     * Lists all events recorded for an application. 
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param type Comma-separated list of types by which to filter events. Must be exact match(es). (optional)
     * @param createdBefore Only return events created before this date (optional)
     * @param createdAfter Only return events created after this date (optional)
     * @param session Session integration ID filter for events. Must be exact match. (optional)
     * @param profile Profile integration ID filter for events. Must be exact match. (optional)
     * @param customerName Customer name filter for events. Will match substrings case-insensitively. (optional)
     * @param customerEmail Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)
     * @param effectsQuery Effects filter for events. Will perform a full-text search on the text content of the events effects, if any. (optional)
     * @param attributesQuery Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values. (optional)
     * @param ruleQuery Rule name filter for events (optional)
     * @param campaignQuery Campaign name filter for events (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicationEventsAsync(Integer applicationId, Integer pageSize, Integer skip, String sort, String type, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String session, String profile, String customerName, String customerEmail, String effectsQuery, String attributesQuery, String ruleQuery, String campaignQuery, final ApiCallback<InlineResponse20017> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicationEventsValidateBeforeCall(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, effectsQuery, attributesQuery, ruleQuery, campaignQuery, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20017>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApplicationEventsWithoutTotalCount
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param type Comma-separated list of types by which to filter events. Must be exact match(es). (optional)
     * @param createdBefore Only return events created before this date (optional)
     * @param createdAfter Only return events created after this date (optional)
     * @param session Session integration ID filter for events. Must be exact match. (optional)
     * @param profile Profile integration ID filter for events. Must be exact match. (optional)
     * @param customerName Customer name filter for events. Will match substrings case-insensitively. (optional)
     * @param customerEmail Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)
     * @param effectsQuery Effects filter for events. Will perform a full-text search on the text content of the events effects, if any. (optional)
     * @param attributesQuery Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values. (optional)
     * @param ruleQuery Rule name filter for events (optional)
     * @param campaignQuery Campaign name filter for events (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApplicationEventsWithoutTotalCountCall(Integer applicationId, Integer pageSize, Integer skip, String sort, String type, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String session, String profile, String customerName, String customerEmail, String effectsQuery, String attributesQuery, String ruleQuery, String campaignQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/events/no_total"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (type != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (session != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("session", session));
        }

        if (profile != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("profile", profile));
        }

        if (customerName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("customerName", customerName));
        }

        if (customerEmail != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("customerEmail", customerEmail));
        }

        if (effectsQuery != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("effectsQuery", effectsQuery));
        }

        if (attributesQuery != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("attributesQuery", attributesQuery));
        }

        if (ruleQuery != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("ruleQuery", ruleQuery));
        }

        if (campaignQuery != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignQuery", campaignQuery));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApplicationEventsWithoutTotalCountValidateBeforeCall(Integer applicationId, Integer pageSize, Integer skip, String sort, String type, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String session, String profile, String customerName, String customerEmail, String effectsQuery, String attributesQuery, String ruleQuery, String campaignQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getApplicationEventsWithoutTotalCount(Async)");
        }
        

        com.squareup.okhttp.Call call = getApplicationEventsWithoutTotalCountCall(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, effectsQuery, attributesQuery, ruleQuery, campaignQuery, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Applications Events
     * Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param type Comma-separated list of types by which to filter events. Must be exact match(es). (optional)
     * @param createdBefore Only return events created before this date (optional)
     * @param createdAfter Only return events created after this date (optional)
     * @param session Session integration ID filter for events. Must be exact match. (optional)
     * @param profile Profile integration ID filter for events. Must be exact match. (optional)
     * @param customerName Customer name filter for events. Will match substrings case-insensitively. (optional)
     * @param customerEmail Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)
     * @param effectsQuery Effects filter for events. Will perform a full-text search on the text content of the events effects, if any. (optional)
     * @param attributesQuery Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values. (optional)
     * @param ruleQuery Rule name filter for events (optional)
     * @param campaignQuery Campaign name filter for events (optional)
     * @return InlineResponse20018
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20018 getApplicationEventsWithoutTotalCount(Integer applicationId, Integer pageSize, Integer skip, String sort, String type, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String session, String profile, String customerName, String customerEmail, String effectsQuery, String attributesQuery, String ruleQuery, String campaignQuery) throws ApiException {
        ApiResponse<InlineResponse20018> resp = getApplicationEventsWithoutTotalCountWithHttpInfo(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, effectsQuery, attributesQuery, ruleQuery, campaignQuery);
        return resp.getData();
    }

    /**
     * List Applications Events
     * Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param type Comma-separated list of types by which to filter events. Must be exact match(es). (optional)
     * @param createdBefore Only return events created before this date (optional)
     * @param createdAfter Only return events created after this date (optional)
     * @param session Session integration ID filter for events. Must be exact match. (optional)
     * @param profile Profile integration ID filter for events. Must be exact match. (optional)
     * @param customerName Customer name filter for events. Will match substrings case-insensitively. (optional)
     * @param customerEmail Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)
     * @param effectsQuery Effects filter for events. Will perform a full-text search on the text content of the events effects, if any. (optional)
     * @param attributesQuery Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values. (optional)
     * @param ruleQuery Rule name filter for events (optional)
     * @param campaignQuery Campaign name filter for events (optional)
     * @return ApiResponse&lt;InlineResponse20018&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20018> getApplicationEventsWithoutTotalCountWithHttpInfo(Integer applicationId, Integer pageSize, Integer skip, String sort, String type, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String session, String profile, String customerName, String customerEmail, String effectsQuery, String attributesQuery, String ruleQuery, String campaignQuery) throws ApiException {
        com.squareup.okhttp.Call call = getApplicationEventsWithoutTotalCountValidateBeforeCall(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, effectsQuery, attributesQuery, ruleQuery, campaignQuery, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20018>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Applications Events (asynchronously)
     * Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param type Comma-separated list of types by which to filter events. Must be exact match(es). (optional)
     * @param createdBefore Only return events created before this date (optional)
     * @param createdAfter Only return events created after this date (optional)
     * @param session Session integration ID filter for events. Must be exact match. (optional)
     * @param profile Profile integration ID filter for events. Must be exact match. (optional)
     * @param customerName Customer name filter for events. Will match substrings case-insensitively. (optional)
     * @param customerEmail Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)
     * @param effectsQuery Effects filter for events. Will perform a full-text search on the text content of the events effects, if any. (optional)
     * @param attributesQuery Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values. (optional)
     * @param ruleQuery Rule name filter for events (optional)
     * @param campaignQuery Campaign name filter for events (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicationEventsWithoutTotalCountAsync(Integer applicationId, Integer pageSize, Integer skip, String sort, String type, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String session, String profile, String customerName, String customerEmail, String effectsQuery, String attributesQuery, String ruleQuery, String campaignQuery, final ApiCallback<InlineResponse20018> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicationEventsWithoutTotalCountValidateBeforeCall(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, effectsQuery, attributesQuery, ruleQuery, campaignQuery, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20018>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApplicationSession
     * @param applicationId  (required)
     * @param sessionId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApplicationSessionCall(Integer applicationId, Integer sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/sessions/{sessionId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "sessionId" + "\\}", apiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApplicationSessionValidateBeforeCall(Integer applicationId, Integer sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getApplicationSession(Async)");
        }
        
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling getApplicationSession(Async)");
        }
        

        com.squareup.okhttp.Call call = getApplicationSessionCall(applicationId, sessionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Application Session
     * 
     * @param applicationId  (required)
     * @param sessionId  (required)
     * @return ApplicationSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApplicationSession getApplicationSession(Integer applicationId, Integer sessionId) throws ApiException {
        ApiResponse<ApplicationSession> resp = getApplicationSessionWithHttpInfo(applicationId, sessionId);
        return resp.getData();
    }

    /**
     * Get Application Session
     * 
     * @param applicationId  (required)
     * @param sessionId  (required)
     * @return ApiResponse&lt;ApplicationSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApplicationSession> getApplicationSessionWithHttpInfo(Integer applicationId, Integer sessionId) throws ApiException {
        com.squareup.okhttp.Call call = getApplicationSessionValidateBeforeCall(applicationId, sessionId, null, null);
        Type localVarReturnType = new TypeToken<ApplicationSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Application Session (asynchronously)
     * 
     * @param applicationId  (required)
     * @param sessionId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicationSessionAsync(Integer applicationId, Integer sessionId, final ApiCallback<ApplicationSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicationSessionValidateBeforeCall(applicationId, sessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApplicationSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApplicationSessions
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param profile Profile integration ID filter for sessions. Must be exact match. (optional)
     * @param state Filter by sessions with this state. Must be exact match. (optional)
     * @param coupon Filter by sessions with this coupon. Must be exact match. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApplicationSessionsCall(Integer applicationId, Integer pageSize, Integer skip, String sort, String profile, String state, String coupon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/sessions"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (profile != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("profile", profile));
        }

        if (state != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        }

        if (coupon != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("coupon", coupon));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApplicationSessionsValidateBeforeCall(Integer applicationId, Integer pageSize, Integer skip, String sort, String profile, String state, String coupon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getApplicationSessions(Async)");
        }
        

        com.squareup.okhttp.Call call = getApplicationSessionsCall(applicationId, pageSize, skip, sort, profile, state, coupon, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Application Sessions
     * 
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param profile Profile integration ID filter for sessions. Must be exact match. (optional)
     * @param state Filter by sessions with this state. Must be exact match. (optional)
     * @param coupon Filter by sessions with this coupon. Must be exact match. (optional)
     * @return InlineResponse20016
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20016 getApplicationSessions(Integer applicationId, Integer pageSize, Integer skip, String sort, String profile, String state, String coupon) throws ApiException {
        ApiResponse<InlineResponse20016> resp = getApplicationSessionsWithHttpInfo(applicationId, pageSize, skip, sort, profile, state, coupon);
        return resp.getData();
    }

    /**
     * List Application Sessions
     * 
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param profile Profile integration ID filter for sessions. Must be exact match. (optional)
     * @param state Filter by sessions with this state. Must be exact match. (optional)
     * @param coupon Filter by sessions with this coupon. Must be exact match. (optional)
     * @return ApiResponse&lt;InlineResponse20016&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20016> getApplicationSessionsWithHttpInfo(Integer applicationId, Integer pageSize, Integer skip, String sort, String profile, String state, String coupon) throws ApiException {
        com.squareup.okhttp.Call call = getApplicationSessionsValidateBeforeCall(applicationId, pageSize, skip, sort, profile, state, coupon, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20016>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Application Sessions (asynchronously)
     * 
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param profile Profile integration ID filter for sessions. Must be exact match. (optional)
     * @param state Filter by sessions with this state. Must be exact match. (optional)
     * @param coupon Filter by sessions with this coupon. Must be exact match. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicationSessionsAsync(Integer applicationId, Integer pageSize, Integer skip, String sort, String profile, String state, String coupon, final ApiCallback<InlineResponse20016> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicationSessionsValidateBeforeCall(applicationId, pageSize, skip, sort, profile, state, coupon, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20016>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getApplications
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApplicationsCall(Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApplicationsValidateBeforeCall(Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getApplicationsCall(pageSize, skip, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Applications
     * List all application in the current account.
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 getApplications(Integer pageSize, Integer skip, String sort) throws ApiException {
        ApiResponse<InlineResponse2002> resp = getApplicationsWithHttpInfo(pageSize, skip, sort);
        return resp.getData();
    }

    /**
     * List Applications
     * List all application in the current account.
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> getApplicationsWithHttpInfo(Integer pageSize, Integer skip, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getApplicationsValidateBeforeCall(pageSize, skip, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Applications (asynchronously)
     * List all application in the current account.
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApplicationsAsync(Integer pageSize, Integer skip, String sort, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApplicationsValidateBeforeCall(pageSize, skip, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAttribute
     * @param attributeId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAttributeCall(Integer attributeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/attributes/{attributeId}"
            .replaceAll("\\{" + "attributeId" + "\\}", apiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAttributeValidateBeforeCall(Integer attributeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling getAttribute(Async)");
        }
        

        com.squareup.okhttp.Call call = getAttributeCall(attributeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a custom attribute
     * Returns custom attribute for the account by its id. 
     * @param attributeId  (required)
     * @return Attribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Attribute getAttribute(Integer attributeId) throws ApiException {
        ApiResponse<Attribute> resp = getAttributeWithHttpInfo(attributeId);
        return resp.getData();
    }

    /**
     * Get a custom attribute
     * Returns custom attribute for the account by its id. 
     * @param attributeId  (required)
     * @return ApiResponse&lt;Attribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Attribute> getAttributeWithHttpInfo(Integer attributeId) throws ApiException {
        com.squareup.okhttp.Call call = getAttributeValidateBeforeCall(attributeId, null, null);
        Type localVarReturnType = new TypeToken<Attribute>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a custom attribute (asynchronously)
     * Returns custom attribute for the account by its id. 
     * @param attributeId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAttributeAsync(Integer attributeId, final ApiCallback<Attribute> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAttributeValidateBeforeCall(attributeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Attribute>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCampaign
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCampaignCall(Integer applicationId, Integer campaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCampaignValidateBeforeCall(Integer applicationId, Integer campaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getCampaign(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = getCampaignCall(applicationId, campaignId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Campaign
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @return Campaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Campaign getCampaign(Integer applicationId, Integer campaignId) throws ApiException {
        ApiResponse<Campaign> resp = getCampaignWithHttpInfo(applicationId, campaignId);
        return resp.getData();
    }

    /**
     * Get a Campaign
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @return ApiResponse&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Campaign> getCampaignWithHttpInfo(Integer applicationId, Integer campaignId) throws ApiException {
        com.squareup.okhttp.Call call = getCampaignValidateBeforeCall(applicationId, campaignId, null, null);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Campaign (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCampaignAsync(Integer applicationId, Integer campaignId, final ApiCallback<Campaign> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCampaignValidateBeforeCall(applicationId, campaignId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCampaignAnalytics
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param granularity The time interval between the results in the returned time-series. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCampaignAnalyticsCall(Integer applicationId, Integer campaignId, OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String granularity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/analytics"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (rangeStart != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("rangeStart", rangeStart));
        }

        if (rangeEnd != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("rangeEnd", rangeEnd));
        }

        if (granularity != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("granularity", granularity));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCampaignAnalyticsValidateBeforeCall(Integer applicationId, Integer campaignId, OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String granularity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getCampaignAnalytics(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaignAnalytics(Async)");
        }
        
        // verify the required parameter 'rangeStart' is set
        if (rangeStart == null) {
            throw new ApiException("Missing the required parameter 'rangeStart' when calling getCampaignAnalytics(Async)");
        }
        
        // verify the required parameter 'rangeEnd' is set
        if (rangeEnd == null) {
            throw new ApiException("Missing the required parameter 'rangeEnd' when calling getCampaignAnalytics(Async)");
        }
        

        com.squareup.okhttp.Call call = getCampaignAnalyticsCall(applicationId, campaignId, rangeStart, rangeEnd, granularity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get analytics of campaigns
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param granularity The time interval between the results in the returned time-series. (optional)
     * @return InlineResponse20011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20011 getCampaignAnalytics(Integer applicationId, Integer campaignId, OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String granularity) throws ApiException {
        ApiResponse<InlineResponse20011> resp = getCampaignAnalyticsWithHttpInfo(applicationId, campaignId, rangeStart, rangeEnd, granularity);
        return resp.getData();
    }

    /**
     * Get analytics of campaigns
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param granularity The time interval between the results in the returned time-series. (optional)
     * @return ApiResponse&lt;InlineResponse20011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20011> getCampaignAnalyticsWithHttpInfo(Integer applicationId, Integer campaignId, OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String granularity) throws ApiException {
        com.squareup.okhttp.Call call = getCampaignAnalyticsValidateBeforeCall(applicationId, campaignId, rangeStart, rangeEnd, granularity, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get analytics of campaigns (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param granularity The time interval between the results in the returned time-series. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCampaignAnalyticsAsync(Integer applicationId, Integer campaignId, OffsetDateTime rangeStart, OffsetDateTime rangeEnd, String granularity, final ApiCallback<InlineResponse20011> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCampaignAnalyticsValidateBeforeCall(applicationId, campaignId, rangeStart, rangeEnd, granularity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCampaignByAttributes
     * @param applicationId  (required)
     * @param campaignSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCampaignByAttributesCall(Integer applicationId, CampaignSearch campaignSearch, Integer pageSize, Integer skip, String sort, String campaignState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = campaignSearch;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns_search"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (campaignState != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignState", campaignState));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCampaignByAttributesValidateBeforeCall(Integer applicationId, CampaignSearch campaignSearch, Integer pageSize, Integer skip, String sort, String campaignState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getCampaignByAttributes(Async)");
        }
        
        // verify the required parameter 'campaignSearch' is set
        if (campaignSearch == null) {
            throw new ApiException("Missing the required parameter 'campaignSearch' when calling getCampaignByAttributes(Async)");
        }
        

        com.squareup.okhttp.Call call = getCampaignByAttributesCall(applicationId, campaignSearch, pageSize, skip, sort, campaignState, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of all campaigns that match the given attributes
     * Gets a list of all the campaigns that exactly match a set of attributes. 
     * @param applicationId  (required)
     * @param campaignSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 getCampaignByAttributes(Integer applicationId, CampaignSearch campaignSearch, Integer pageSize, Integer skip, String sort, String campaignState) throws ApiException {
        ApiResponse<InlineResponse2003> resp = getCampaignByAttributesWithHttpInfo(applicationId, campaignSearch, pageSize, skip, sort, campaignState);
        return resp.getData();
    }

    /**
     * Get a list of all campaigns that match the given attributes
     * Gets a list of all the campaigns that exactly match a set of attributes. 
     * @param applicationId  (required)
     * @param campaignSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> getCampaignByAttributesWithHttpInfo(Integer applicationId, CampaignSearch campaignSearch, Integer pageSize, Integer skip, String sort, String campaignState) throws ApiException {
        com.squareup.okhttp.Call call = getCampaignByAttributesValidateBeforeCall(applicationId, campaignSearch, pageSize, skip, sort, campaignState, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of all campaigns that match the given attributes (asynchronously)
     * Gets a list of all the campaigns that exactly match a set of attributes. 
     * @param applicationId  (required)
     * @param campaignSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCampaignByAttributesAsync(Integer applicationId, CampaignSearch campaignSearch, Integer pageSize, Integer skip, String sort, String campaignState, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCampaignByAttributesValidateBeforeCall(applicationId, campaignSearch, pageSize, skip, sort, campaignState, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCampaignSet
     * @param applicationId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCampaignSetCall(Integer applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaign_set"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCampaignSetValidateBeforeCall(Integer applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getCampaignSet(Async)");
        }
        

        com.squareup.okhttp.Call call = getCampaignSetCall(applicationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List CampaignSet
     * 
     * @param applicationId  (required)
     * @return CampaignSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CampaignSet getCampaignSet(Integer applicationId) throws ApiException {
        ApiResponse<CampaignSet> resp = getCampaignSetWithHttpInfo(applicationId);
        return resp.getData();
    }

    /**
     * List CampaignSet
     * 
     * @param applicationId  (required)
     * @return ApiResponse&lt;CampaignSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CampaignSet> getCampaignSetWithHttpInfo(Integer applicationId) throws ApiException {
        com.squareup.okhttp.Call call = getCampaignSetValidateBeforeCall(applicationId, null, null);
        Type localVarReturnType = new TypeToken<CampaignSet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List CampaignSet (asynchronously)
     * 
     * @param applicationId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCampaignSetAsync(Integer applicationId, final ApiCallback<CampaignSet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCampaignSetValidateBeforeCall(applicationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CampaignSet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCampaigns
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @param name Filter results performing case-insensitive matching against the name of the campaign. (optional)
     * @param tags Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCampaignsCall(Integer applicationId, Integer pageSize, Integer skip, String sort, String campaignState, String name, String tags, OffsetDateTime createdBefore, OffsetDateTime createdAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (campaignState != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignState", campaignState));
        }

        if (name != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        }

        if (tags != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("tags", tags));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCampaignsValidateBeforeCall(Integer applicationId, Integer pageSize, Integer skip, String sort, String campaignState, String name, String tags, OffsetDateTime createdBefore, OffsetDateTime createdAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getCampaigns(Async)");
        }
        

        com.squareup.okhttp.Call call = getCampaignsCall(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List your Campaigns
     * 
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @param name Filter results performing case-insensitive matching against the name of the campaign. (optional)
     * @param tags Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. (optional)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 getCampaigns(Integer applicationId, Integer pageSize, Integer skip, String sort, String campaignState, String name, String tags, OffsetDateTime createdBefore, OffsetDateTime createdAfter) throws ApiException {
        ApiResponse<InlineResponse2003> resp = getCampaignsWithHttpInfo(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter);
        return resp.getData();
    }

    /**
     * List your Campaigns
     * 
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @param name Filter results performing case-insensitive matching against the name of the campaign. (optional)
     * @param tags Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. (optional)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> getCampaignsWithHttpInfo(Integer applicationId, Integer pageSize, Integer skip, String sort, String campaignState, String name, String tags, OffsetDateTime createdBefore, OffsetDateTime createdAfter) throws ApiException {
        com.squareup.okhttp.Call call = getCampaignsValidateBeforeCall(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List your Campaigns (asynchronously)
     * 
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @param name Filter results performing case-insensitive matching against the name of the campaign. (optional)
     * @param tags Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCampaignsAsync(Integer applicationId, Integer pageSize, Integer skip, String sort, String campaignState, String name, String tags, OffsetDateTime createdBefore, OffsetDateTime createdAfter, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCampaignsValidateBeforeCall(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChanges
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChangesCall(Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/changes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChangesValidateBeforeCall(Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getChangesCall(pageSize, skip, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get audit log for an account
     * Get list of changes caused by API calls for an account. Only accessible for admins.
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return InlineResponse20025
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20025 getChanges(Integer pageSize, Integer skip, String sort) throws ApiException {
        ApiResponse<InlineResponse20025> resp = getChangesWithHttpInfo(pageSize, skip, sort);
        return resp.getData();
    }

    /**
     * Get audit log for an account
     * Get list of changes caused by API calls for an account. Only accessible for admins.
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20025&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20025> getChangesWithHttpInfo(Integer pageSize, Integer skip, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getChangesValidateBeforeCall(pageSize, skip, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20025>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get audit log for an account (asynchronously)
     * Get list of changes caused by API calls for an account. Only accessible for admins.
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChangesAsync(Integer pageSize, Integer skip, String sort, final ApiCallback<InlineResponse20025> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChangesValidateBeforeCall(pageSize, skip, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20025>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoupons
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCouponsCall(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, OffsetDateTime startsAfter, OffsetDateTime startsBefore, OffsetDateTime expiresAfter, OffsetDateTime expiresBefore, String valid, String batchId, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (value != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("value", value));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (startsAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startsAfter", startsAfter));
        }

        if (startsBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startsBefore", startsBefore));
        }

        if (expiresAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("expiresAfter", expiresAfter));
        }

        if (expiresBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("expiresBefore", expiresBefore));
        }

        if (valid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("valid", valid));
        }

        if (batchId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("batchId", batchId));
        }

        if (usable != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("usable", usable));
        }

        if (referralId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("referralId", referralId));
        }

        if (recipientIntegrationId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("recipientIntegrationId", recipientIntegrationId));
        }

        if (exactMatch != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exactMatch", exactMatch));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCouponsValidateBeforeCall(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, OffsetDateTime startsAfter, OffsetDateTime startsBefore, OffsetDateTime expiresAfter, OffsetDateTime expiresBefore, String valid, String batchId, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getCoupons(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCoupons(Async)");
        }
        

        com.squareup.okhttp.Call call = getCouponsCall(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Coupons
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getCoupons(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, OffsetDateTime startsAfter, OffsetDateTime startsBefore, OffsetDateTime expiresAfter, OffsetDateTime expiresBefore, String valid, String batchId, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch) throws ApiException {
        ApiResponse<InlineResponse2001> resp = getCouponsWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);
        return resp.getData();
    }

    /**
     * List Coupons
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getCouponsWithHttpInfo(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, OffsetDateTime startsAfter, OffsetDateTime startsBefore, OffsetDateTime expiresAfter, OffsetDateTime expiresBefore, String valid, String batchId, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch) throws ApiException {
        com.squareup.okhttp.Call call = getCouponsValidateBeforeCall(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Coupons (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param startsBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param expiresBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCouponsAsync(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, OffsetDateTime startsAfter, OffsetDateTime startsBefore, OffsetDateTime expiresAfter, OffsetDateTime expiresBefore, String valid, String batchId, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCouponsValidateBeforeCall(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCouponsByAttributes
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param couponSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param batchId Filter results by batches of coupons (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCouponsByAttributesCall(Integer applicationId, Integer campaignId, CouponSearch couponSearch, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, String batchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = couponSearch;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (value != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("value", value));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (valid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("valid", valid));
        }

        if (usable != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("usable", usable));
        }

        if (referralId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("referralId", referralId));
        }

        if (recipientIntegrationId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("recipientIntegrationId", recipientIntegrationId));
        }

        if (exactMatch != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exactMatch", exactMatch));
        }

        if (batchId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("batchId", batchId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCouponsByAttributesValidateBeforeCall(Integer applicationId, Integer campaignId, CouponSearch couponSearch, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, String batchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getCouponsByAttributes(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCouponsByAttributes(Async)");
        }
        
        // verify the required parameter 'couponSearch' is set
        if (couponSearch == null) {
            throw new ApiException("Missing the required parameter 'couponSearch' when calling getCouponsByAttributes(Async)");
        }
        

        com.squareup.okhttp.Call call = getCouponsByAttributesCall(applicationId, campaignId, couponSearch, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of the coupons that match the given attributes
     * Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param couponSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param batchId Filter results by batches of coupons (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getCouponsByAttributes(Integer applicationId, Integer campaignId, CouponSearch couponSearch, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, String batchId) throws ApiException {
        ApiResponse<InlineResponse2001> resp = getCouponsByAttributesWithHttpInfo(applicationId, campaignId, couponSearch, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
        return resp.getData();
    }

    /**
     * Get a list of the coupons that match the given attributes
     * Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param couponSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param batchId Filter results by batches of coupons (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getCouponsByAttributesWithHttpInfo(Integer applicationId, Integer campaignId, CouponSearch couponSearch, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, String batchId) throws ApiException {
        com.squareup.okhttp.Call call = getCouponsByAttributesValidateBeforeCall(applicationId, campaignId, couponSearch, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of the coupons that match the given attributes (asynchronously)
     * Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param couponSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param batchId Filter results by batches of coupons (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCouponsByAttributesAsync(Integer applicationId, Integer campaignId, CouponSearch couponSearch, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, String batchId, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCouponsByAttributesValidateBeforeCall(applicationId, campaignId, couponSearch, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCouponsByAttributesApplicationWide
     * @param applicationId  (required)
     * @param couponSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCouponsByAttributesApplicationWideCall(Integer applicationId, CouponSearch couponSearch, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, String campaignState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = couponSearch;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/coupons_search"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (value != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("value", value));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (valid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("valid", valid));
        }

        if (usable != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("usable", usable));
        }

        if (referralId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("referralId", referralId));
        }

        if (recipientIntegrationId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("recipientIntegrationId", recipientIntegrationId));
        }

        if (batchId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("batchId", batchId));
        }

        if (exactMatch != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exactMatch", exactMatch));
        }

        if (campaignState != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignState", campaignState));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCouponsByAttributesApplicationWideValidateBeforeCall(Integer applicationId, CouponSearch couponSearch, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, String campaignState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getCouponsByAttributesApplicationWide(Async)");
        }
        
        // verify the required parameter 'couponSearch' is set
        if (couponSearch == null) {
            throw new ApiException("Missing the required parameter 'couponSearch' when calling getCouponsByAttributesApplicationWide(Async)");
        }
        

        com.squareup.okhttp.Call call = getCouponsByAttributesApplicationWideCall(applicationId, couponSearch, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application
     * Gets a list of all the coupons with attributes matching the query criteria Application wide 
     * @param applicationId  (required)
     * @param couponSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getCouponsByAttributesApplicationWide(Integer applicationId, CouponSearch couponSearch, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, String campaignState) throws ApiException {
        ApiResponse<InlineResponse2001> resp = getCouponsByAttributesApplicationWideWithHttpInfo(applicationId, couponSearch, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
        return resp.getData();
    }

    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application
     * Gets a list of all the coupons with attributes matching the query criteria Application wide 
     * @param applicationId  (required)
     * @param couponSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getCouponsByAttributesApplicationWideWithHttpInfo(Integer applicationId, CouponSearch couponSearch, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, String campaignState) throws ApiException {
        com.squareup.okhttp.Call call = getCouponsByAttributesApplicationWideValidateBeforeCall(applicationId, couponSearch, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application (asynchronously)
     * Gets a list of all the coupons with attributes matching the query criteria Application wide 
     * @param applicationId  (required)
     * @param couponSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCouponsByAttributesApplicationWideAsync(Integer applicationId, CouponSearch couponSearch, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, String campaignState, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCouponsByAttributesApplicationWideValidateBeforeCall(applicationId, couponSearch, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCouponsWithoutTotalCount
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCouponsWithoutTotalCountCall(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/no_total"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (value != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("value", value));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (valid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("valid", valid));
        }

        if (usable != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("usable", usable));
        }

        if (referralId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("referralId", referralId));
        }

        if (recipientIntegrationId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("recipientIntegrationId", recipientIntegrationId));
        }

        if (batchId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("batchId", batchId));
        }

        if (exactMatch != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exactMatch", exactMatch));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCouponsWithoutTotalCountValidateBeforeCall(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getCouponsWithoutTotalCount(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCouponsWithoutTotalCount(Async)");
        }
        

        com.squareup.okhttp.Call call = getCouponsWithoutTotalCountCall(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Coupons
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2005 getCouponsWithoutTotalCount(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch) throws ApiException {
        ApiResponse<InlineResponse2005> resp = getCouponsWithoutTotalCountWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch);
        return resp.getData();
    }

    /**
     * List Coupons
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2005> getCouponsWithoutTotalCountWithHttpInfo(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch) throws ApiException {
        com.squareup.okhttp.Call call = getCouponsWithoutTotalCountValidateBeforeCall(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Coupons (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCouponsWithoutTotalCountAsync(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, final ApiCallback<InlineResponse2005> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCouponsWithoutTotalCountValidateBeforeCall(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerActivityReport
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param applicationId  (required)
     * @param customerId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerActivityReportCall(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, Integer applicationId, Integer customerId, Integer pageSize, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/customer_activity_reports/{customerId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (rangeStart != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("rangeStart", rangeStart));
        }

        if (rangeEnd != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("rangeEnd", rangeEnd));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerActivityReportValidateBeforeCall(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, Integer applicationId, Integer customerId, Integer pageSize, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'rangeStart' is set
        if (rangeStart == null) {
            throw new ApiException("Missing the required parameter 'rangeStart' when calling getCustomerActivityReport(Async)");
        }
        
        // verify the required parameter 'rangeEnd' is set
        if (rangeEnd == null) {
            throw new ApiException("Missing the required parameter 'rangeEnd' when calling getCustomerActivityReport(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getCustomerActivityReport(Async)");
        }
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomerActivityReport(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerActivityReportCall(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Activity Report for Single Customer
     * Fetch summary report for single application customer based on a time range
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param applicationId  (required)
     * @param customerId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @return CustomerActivityReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerActivityReport getCustomerActivityReport(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, Integer applicationId, Integer customerId, Integer pageSize, Integer skip) throws ApiException {
        ApiResponse<CustomerActivityReport> resp = getCustomerActivityReportWithHttpInfo(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip);
        return resp.getData();
    }

    /**
     * Get Activity Report for Single Customer
     * Fetch summary report for single application customer based on a time range
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param applicationId  (required)
     * @param customerId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @return ApiResponse&lt;CustomerActivityReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerActivityReport> getCustomerActivityReportWithHttpInfo(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, Integer applicationId, Integer customerId, Integer pageSize, Integer skip) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerActivityReportValidateBeforeCall(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip, null, null);
        Type localVarReturnType = new TypeToken<CustomerActivityReport>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Activity Report for Single Customer (asynchronously)
     * Fetch summary report for single application customer based on a time range
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param applicationId  (required)
     * @param customerId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerActivityReportAsync(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, Integer applicationId, Integer customerId, Integer pageSize, Integer skip, final ApiCallback<CustomerActivityReport> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerActivityReportValidateBeforeCall(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerActivityReport>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerActivityReports
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param name Only return reports matching the customer name (optional)
     * @param integrationId Only return reports matching the integrationId (optional)
     * @param campaignName Only return reports matching the campaignName (optional)
     * @param advocateName Only return reports matching the current customer referrer name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerActivityReportsCall(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, Integer applicationId, Integer pageSize, Integer skip, String sort, String name, String integrationId, String campaignName, String advocateName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/customer_activity_reports"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (rangeStart != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("rangeStart", rangeStart));
        }

        if (rangeEnd != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("rangeEnd", rangeEnd));
        }

        if (name != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        }

        if (integrationId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("integrationId", integrationId));
        }

        if (campaignName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignName", campaignName));
        }

        if (advocateName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("advocateName", advocateName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerActivityReportsValidateBeforeCall(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, Integer applicationId, Integer pageSize, Integer skip, String sort, String name, String integrationId, String campaignName, String advocateName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'rangeStart' is set
        if (rangeStart == null) {
            throw new ApiException("Missing the required parameter 'rangeStart' when calling getCustomerActivityReports(Async)");
        }
        
        // verify the required parameter 'rangeEnd' is set
        if (rangeEnd == null) {
            throw new ApiException("Missing the required parameter 'rangeEnd' when calling getCustomerActivityReports(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getCustomerActivityReports(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerActivityReportsCall(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Activity Reports for Application Customers
     * Fetch summary reports for all application customers based on a time range
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param name Only return reports matching the customer name (optional)
     * @param integrationId Only return reports matching the integrationId (optional)
     * @param campaignName Only return reports matching the campaignName (optional)
     * @param advocateName Only return reports matching the current customer referrer name (optional)
     * @return InlineResponse20014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20014 getCustomerActivityReports(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, Integer applicationId, Integer pageSize, Integer skip, String sort, String name, String integrationId, String campaignName, String advocateName) throws ApiException {
        ApiResponse<InlineResponse20014> resp = getCustomerActivityReportsWithHttpInfo(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);
        return resp.getData();
    }

    /**
     * Get Activity Reports for Application Customers
     * Fetch summary reports for all application customers based on a time range
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param name Only return reports matching the customer name (optional)
     * @param integrationId Only return reports matching the integrationId (optional)
     * @param campaignName Only return reports matching the campaignName (optional)
     * @param advocateName Only return reports matching the current customer referrer name (optional)
     * @return ApiResponse&lt;InlineResponse20014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20014> getCustomerActivityReportsWithHttpInfo(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, Integer applicationId, Integer pageSize, Integer skip, String sort, String name, String integrationId, String campaignName, String advocateName) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerActivityReportsValidateBeforeCall(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Activity Reports for Application Customers (asynchronously)
     * Fetch summary reports for all application customers based on a time range
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param name Only return reports matching the customer name (optional)
     * @param integrationId Only return reports matching the integrationId (optional)
     * @param campaignName Only return reports matching the campaignName (optional)
     * @param advocateName Only return reports matching the current customer referrer name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerActivityReportsAsync(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, Integer applicationId, Integer pageSize, Integer skip, String sort, String name, String integrationId, String campaignName, String advocateName, final ApiCallback<InlineResponse20014> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerActivityReportsValidateBeforeCall(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerActivityReportsWithoutTotalCount
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param name Only return reports matching the customer name (optional)
     * @param integrationId Only return reports matching the integrationId (optional)
     * @param campaignName Only return reports matching the campaignName (optional)
     * @param advocateName Only return reports matching the current customer referrer name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerActivityReportsWithoutTotalCountCall(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, Integer applicationId, Integer pageSize, Integer skip, String sort, String name, String integrationId, String campaignName, String advocateName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/customer_activity_reports/no_total"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (rangeStart != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("rangeStart", rangeStart));
        }

        if (rangeEnd != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("rangeEnd", rangeEnd));
        }

        if (name != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        }

        if (integrationId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("integrationId", integrationId));
        }

        if (campaignName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignName", campaignName));
        }

        if (advocateName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("advocateName", advocateName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerActivityReportsWithoutTotalCountValidateBeforeCall(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, Integer applicationId, Integer pageSize, Integer skip, String sort, String name, String integrationId, String campaignName, String advocateName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'rangeStart' is set
        if (rangeStart == null) {
            throw new ApiException("Missing the required parameter 'rangeStart' when calling getCustomerActivityReportsWithoutTotalCount(Async)");
        }
        
        // verify the required parameter 'rangeEnd' is set
        if (rangeEnd == null) {
            throw new ApiException("Missing the required parameter 'rangeEnd' when calling getCustomerActivityReportsWithoutTotalCount(Async)");
        }
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getCustomerActivityReportsWithoutTotalCount(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerActivityReportsWithoutTotalCountCall(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Activity Reports for Application Customers
     * Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param name Only return reports matching the customer name (optional)
     * @param integrationId Only return reports matching the integrationId (optional)
     * @param campaignName Only return reports matching the campaignName (optional)
     * @param advocateName Only return reports matching the current customer referrer name (optional)
     * @return InlineResponse20015
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20015 getCustomerActivityReportsWithoutTotalCount(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, Integer applicationId, Integer pageSize, Integer skip, String sort, String name, String integrationId, String campaignName, String advocateName) throws ApiException {
        ApiResponse<InlineResponse20015> resp = getCustomerActivityReportsWithoutTotalCountWithHttpInfo(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);
        return resp.getData();
    }

    /**
     * Get Activity Reports for Application Customers
     * Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param name Only return reports matching the customer name (optional)
     * @param integrationId Only return reports matching the integrationId (optional)
     * @param campaignName Only return reports matching the campaignName (optional)
     * @param advocateName Only return reports matching the current customer referrer name (optional)
     * @return ApiResponse&lt;InlineResponse20015&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20015> getCustomerActivityReportsWithoutTotalCountWithHttpInfo(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, Integer applicationId, Integer pageSize, Integer skip, String sort, String name, String integrationId, String campaignName, String advocateName) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerActivityReportsWithoutTotalCountValidateBeforeCall(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Activity Reports for Application Customers (asynchronously)
     * Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
     * @param rangeStart Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param rangeEnd Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param applicationId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param name Only return reports matching the customer name (optional)
     * @param integrationId Only return reports matching the integrationId (optional)
     * @param campaignName Only return reports matching the campaignName (optional)
     * @param advocateName Only return reports matching the current customer referrer name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerActivityReportsWithoutTotalCountAsync(OffsetDateTime rangeStart, OffsetDateTime rangeEnd, Integer applicationId, Integer pageSize, Integer skip, String sort, String name, String integrationId, String campaignName, String advocateName, final ApiCallback<InlineResponse20015> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerActivityReportsWithoutTotalCountValidateBeforeCall(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerAnalytics
     * @param applicationId  (required)
     * @param customerId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerAnalyticsCall(Integer applicationId, Integer customerId, Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/customers/{customerId}/analytics"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerAnalyticsValidateBeforeCall(Integer applicationId, Integer customerId, Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getCustomerAnalytics(Async)");
        }
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomerAnalytics(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerAnalyticsCall(applicationId, customerId, pageSize, skip, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Analytics Report for a Customer
     * Fetch analytics for single application customer
     * @param applicationId  (required)
     * @param customerId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return CustomerAnalytics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerAnalytics getCustomerAnalytics(Integer applicationId, Integer customerId, Integer pageSize, Integer skip, String sort) throws ApiException {
        ApiResponse<CustomerAnalytics> resp = getCustomerAnalyticsWithHttpInfo(applicationId, customerId, pageSize, skip, sort);
        return resp.getData();
    }

    /**
     * Get Analytics Report for a Customer
     * Fetch analytics for single application customer
     * @param applicationId  (required)
     * @param customerId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return ApiResponse&lt;CustomerAnalytics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerAnalytics> getCustomerAnalyticsWithHttpInfo(Integer applicationId, Integer customerId, Integer pageSize, Integer skip, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerAnalyticsValidateBeforeCall(applicationId, customerId, pageSize, skip, sort, null, null);
        Type localVarReturnType = new TypeToken<CustomerAnalytics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Analytics Report for a Customer (asynchronously)
     * Fetch analytics for single application customer
     * @param applicationId  (required)
     * @param customerId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerAnalyticsAsync(Integer applicationId, Integer customerId, Integer pageSize, Integer skip, String sort, final ApiCallback<CustomerAnalytics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerAnalyticsValidateBeforeCall(applicationId, customerId, pageSize, skip, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerAnalytics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerProfile
     * @param applicationId  (required)
     * @param customerId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerProfileCall(Integer applicationId, Integer customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/customers/{customerId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerProfileValidateBeforeCall(Integer applicationId, Integer customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getCustomerProfile(Async)");
        }
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomerProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerProfileCall(applicationId, customerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Customer Profile
     * 
     * @param applicationId  (required)
     * @param customerId  (required)
     * @return ApplicationCustomer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApplicationCustomer getCustomerProfile(Integer applicationId, Integer customerId) throws ApiException {
        ApiResponse<ApplicationCustomer> resp = getCustomerProfileWithHttpInfo(applicationId, customerId);
        return resp.getData();
    }

    /**
     * Get Customer Profile
     * 
     * @param applicationId  (required)
     * @param customerId  (required)
     * @return ApiResponse&lt;ApplicationCustomer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApplicationCustomer> getCustomerProfileWithHttpInfo(Integer applicationId, Integer customerId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerProfileValidateBeforeCall(applicationId, customerId, null, null);
        Type localVarReturnType = new TypeToken<ApplicationCustomer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Customer Profile (asynchronously)
     * 
     * @param applicationId  (required)
     * @param customerId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerProfileAsync(Integer applicationId, Integer customerId, final ApiCallback<ApplicationCustomer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerProfileValidateBeforeCall(applicationId, customerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApplicationCustomer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerProfiles
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerProfilesCall(Integer pageSize, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/customers/no_total";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerProfilesValidateBeforeCall(Integer pageSize, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCustomerProfilesCall(pageSize, skip, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Customer Profiles
     * 
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @return InlineResponse20013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20013 getCustomerProfiles(Integer pageSize, Integer skip) throws ApiException {
        ApiResponse<InlineResponse20013> resp = getCustomerProfilesWithHttpInfo(pageSize, skip);
        return resp.getData();
    }

    /**
     * List Customer Profiles
     * 
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @return ApiResponse&lt;InlineResponse20013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20013> getCustomerProfilesWithHttpInfo(Integer pageSize, Integer skip) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerProfilesValidateBeforeCall(pageSize, skip, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Customer Profiles (asynchronously)
     * 
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerProfilesAsync(Integer pageSize, Integer skip, final ApiCallback<InlineResponse20013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerProfilesValidateBeforeCall(pageSize, skip, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomersByAttributes
     * @param applicationCustomerSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomersByAttributesCall(ApplicationCustomerSearch applicationCustomerSearch, Integer pageSize, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = applicationCustomerSearch;

        // create path and map variables
        String localVarPath = "/v1/customer_search/no_total";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomersByAttributesValidateBeforeCall(ApplicationCustomerSearch applicationCustomerSearch, Integer pageSize, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationCustomerSearch' is set
        if (applicationCustomerSearch == null) {
            throw new ApiException("Missing the required parameter 'applicationCustomerSearch' when calling getCustomersByAttributes(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomersByAttributesCall(applicationCustomerSearch, pageSize, skip, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of the customer profiles that match the given attributes
     * Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: http://help.talon.one/customer/en/portal/articles/2525263-data-model?b_id&#x3D;14115#customer-profile 
     * @param applicationCustomerSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @return InlineResponse20013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20013 getCustomersByAttributes(ApplicationCustomerSearch applicationCustomerSearch, Integer pageSize, Integer skip) throws ApiException {
        ApiResponse<InlineResponse20013> resp = getCustomersByAttributesWithHttpInfo(applicationCustomerSearch, pageSize, skip);
        return resp.getData();
    }

    /**
     * Get a list of the customer profiles that match the given attributes
     * Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: http://help.talon.one/customer/en/portal/articles/2525263-data-model?b_id&#x3D;14115#customer-profile 
     * @param applicationCustomerSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @return ApiResponse&lt;InlineResponse20013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20013> getCustomersByAttributesWithHttpInfo(ApplicationCustomerSearch applicationCustomerSearch, Integer pageSize, Integer skip) throws ApiException {
        com.squareup.okhttp.Call call = getCustomersByAttributesValidateBeforeCall(applicationCustomerSearch, pageSize, skip, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of the customer profiles that match the given attributes (asynchronously)
     * Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: http://help.talon.one/customer/en/portal/articles/2525263-data-model?b_id&#x3D;14115#customer-profile 
     * @param applicationCustomerSearch  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomersByAttributesAsync(ApplicationCustomerSearch applicationCustomerSearch, Integer pageSize, Integer skip, final ApiCallback<InlineResponse20013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomersByAttributesValidateBeforeCall(applicationCustomerSearch, pageSize, skip, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEventTypes
     * @param applicationIds Filter by one or more application ids separated by comma (optional)
     * @param name Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)
     * @param includeOldVersions Include all versions of every event type. (optional, default to false)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventTypesCall(String applicationIds, String name, Boolean includeOldVersions, Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/event_types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicationIds != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("applicationIds", applicationIds));
        }

        if (name != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        }

        if (includeOldVersions != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("includeOldVersions", includeOldVersions));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventTypesValidateBeforeCall(String applicationIds, String name, Boolean includeOldVersions, Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getEventTypesCall(applicationIds, name, includeOldVersions, pageSize, skip, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Event Types
     * Fetch all event type definitions for your account. Each event type can be 
     * @param applicationIds Filter by one or more application ids separated by comma (optional)
     * @param name Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)
     * @param includeOldVersions Include all versions of every event type. (optional, default to false)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return InlineResponse20023
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20023 getEventTypes(String applicationIds, String name, Boolean includeOldVersions, Integer pageSize, Integer skip, String sort) throws ApiException {
        ApiResponse<InlineResponse20023> resp = getEventTypesWithHttpInfo(applicationIds, name, includeOldVersions, pageSize, skip, sort);
        return resp.getData();
    }

    /**
     * List Event Types
     * Fetch all event type definitions for your account. Each event type can be 
     * @param applicationIds Filter by one or more application ids separated by comma (optional)
     * @param name Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)
     * @param includeOldVersions Include all versions of every event type. (optional, default to false)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20023&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20023> getEventTypesWithHttpInfo(String applicationIds, String name, Boolean includeOldVersions, Integer pageSize, Integer skip, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getEventTypesValidateBeforeCall(applicationIds, name, includeOldVersions, pageSize, skip, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20023>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Event Types (asynchronously)
     * Fetch all event type definitions for your account. Each event type can be 
     * @param applicationIds Filter by one or more application ids separated by comma (optional)
     * @param name Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)
     * @param includeOldVersions Include all versions of every event type. (optional, default to false)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventTypesAsync(String applicationIds, String name, Boolean includeOldVersions, Integer pageSize, Integer skip, String sort, final ApiCallback<InlineResponse20023> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventTypesValidateBeforeCall(applicationIds, name, includeOldVersions, pageSize, skip, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20023>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExports
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param applicationId  (optional)
     * @param campaignId  (optional)
     * @param entity The name of the entity type that was exported. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExportsCall(Integer pageSize, Integer skip, Integer applicationId, Integer campaignId, String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/exports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (applicationId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("applicationId", applicationId));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        }

        if (entity != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("entity", entity));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExportsValidateBeforeCall(Integer pageSize, Integer skip, Integer applicationId, Integer campaignId, String entity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getExportsCall(pageSize, skip, applicationId, campaignId, entity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Exports
     * Get a list of all past exports 
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param applicationId  (optional)
     * @param campaignId  (optional)
     * @param entity The name of the entity type that was exported. (optional)
     * @return InlineResponse20026
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20026 getExports(Integer pageSize, Integer skip, Integer applicationId, Integer campaignId, String entity) throws ApiException {
        ApiResponse<InlineResponse20026> resp = getExportsWithHttpInfo(pageSize, skip, applicationId, campaignId, entity);
        return resp.getData();
    }

    /**
     * Get Exports
     * Get a list of all past exports 
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param applicationId  (optional)
     * @param campaignId  (optional)
     * @param entity The name of the entity type that was exported. (optional)
     * @return ApiResponse&lt;InlineResponse20026&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20026> getExportsWithHttpInfo(Integer pageSize, Integer skip, Integer applicationId, Integer campaignId, String entity) throws ApiException {
        com.squareup.okhttp.Call call = getExportsValidateBeforeCall(pageSize, skip, applicationId, campaignId, entity, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20026>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Exports (asynchronously)
     * Get a list of all past exports 
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param applicationId  (optional)
     * @param campaignId  (optional)
     * @param entity The name of the entity type that was exported. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExportsAsync(Integer pageSize, Integer skip, Integer applicationId, Integer campaignId, String entity, final ApiCallback<InlineResponse20026> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExportsValidateBeforeCall(pageSize, skip, applicationId, campaignId, entity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20026>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImports
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImportsCall(Integer pageSize, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/imports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImportsValidateBeforeCall(Integer pageSize, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getImportsCall(pageSize, skip, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Imports
     * Get a list of all past imports 
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @return InlineResponse20027
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20027 getImports(Integer pageSize, Integer skip) throws ApiException {
        ApiResponse<InlineResponse20027> resp = getImportsWithHttpInfo(pageSize, skip);
        return resp.getData();
    }

    /**
     * Get Imports
     * Get a list of all past imports 
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @return ApiResponse&lt;InlineResponse20027&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20027> getImportsWithHttpInfo(Integer pageSize, Integer skip) throws ApiException {
        com.squareup.okhttp.Call call = getImportsValidateBeforeCall(pageSize, skip, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20027>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Imports (asynchronously)
     * Get a list of all past imports 
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImportsAsync(Integer pageSize, Integer skip, final ApiCallback<InlineResponse20027> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImportsValidateBeforeCall(pageSize, skip, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20027>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoyaltyPoints
     * @param programID The identifier for the application, must be unique within the account. (required)
     * @param integrationID The identifier for the application, must be unique within the account. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyPointsCall(String programID, String integrationID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/loyalty_programs/{programID}/profile/{integrationID}"
            .replaceAll("\\{" + "programID" + "\\}", apiClient.escapeString(programID.toString()))
            .replaceAll("\\{" + "integrationID" + "\\}", apiClient.escapeString(integrationID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoyaltyPointsValidateBeforeCall(String programID, String integrationID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'programID' is set
        if (programID == null) {
            throw new ApiException("Missing the required parameter 'programID' when calling getLoyaltyPoints(Async)");
        }
        
        // verify the required parameter 'integrationID' is set
        if (integrationID == null) {
            throw new ApiException("Missing the required parameter 'integrationID' when calling getLoyaltyPoints(Async)");
        }
        

        com.squareup.okhttp.Call call = getLoyaltyPointsCall(programID, integrationID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get the Loyalty Ledger for this integrationID
     * Get the Loyalty Ledger for this profile integration ID.
     * @param programID The identifier for the application, must be unique within the account. (required)
     * @param integrationID The identifier for the application, must be unique within the account. (required)
     * @return LoyaltyLedger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltyLedger getLoyaltyPoints(String programID, String integrationID) throws ApiException {
        ApiResponse<LoyaltyLedger> resp = getLoyaltyPointsWithHttpInfo(programID, integrationID);
        return resp.getData();
    }

    /**
     * get the Loyalty Ledger for this integrationID
     * Get the Loyalty Ledger for this profile integration ID.
     * @param programID The identifier for the application, must be unique within the account. (required)
     * @param integrationID The identifier for the application, must be unique within the account. (required)
     * @return ApiResponse&lt;LoyaltyLedger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltyLedger> getLoyaltyPointsWithHttpInfo(String programID, String integrationID) throws ApiException {
        com.squareup.okhttp.Call call = getLoyaltyPointsValidateBeforeCall(programID, integrationID, null, null);
        Type localVarReturnType = new TypeToken<LoyaltyLedger>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get the Loyalty Ledger for this integrationID (asynchronously)
     * Get the Loyalty Ledger for this profile integration ID.
     * @param programID The identifier for the application, must be unique within the account. (required)
     * @param integrationID The identifier for the application, must be unique within the account. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyPointsAsync(String programID, String integrationID, final ApiCallback<LoyaltyLedger> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoyaltyPointsValidateBeforeCall(programID, integrationID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoyaltyLedger>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoyaltyProgram
     * @param programID  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyProgramCall(String programID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/loyalty_programs/{programID}"
            .replaceAll("\\{" + "programID" + "\\}", apiClient.escapeString(programID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoyaltyProgramValidateBeforeCall(String programID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'programID' is set
        if (programID == null) {
            throw new ApiException("Missing the required parameter 'programID' when calling getLoyaltyProgram(Async)");
        }
        

        com.squareup.okhttp.Call call = getLoyaltyProgramCall(programID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a loyalty program
     * 
     * @param programID  (required)
     * @return LoyaltyProgram
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltyProgram getLoyaltyProgram(String programID) throws ApiException {
        ApiResponse<LoyaltyProgram> resp = getLoyaltyProgramWithHttpInfo(programID);
        return resp.getData();
    }

    /**
     * Get a loyalty program
     * 
     * @param programID  (required)
     * @return ApiResponse&lt;LoyaltyProgram&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltyProgram> getLoyaltyProgramWithHttpInfo(String programID) throws ApiException {
        com.squareup.okhttp.Call call = getLoyaltyProgramValidateBeforeCall(programID, null, null);
        Type localVarReturnType = new TypeToken<LoyaltyProgram>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a loyalty program (asynchronously)
     * 
     * @param programID  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyProgramAsync(String programID, final ApiCallback<LoyaltyProgram> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoyaltyProgramValidateBeforeCall(programID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoyaltyProgram>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoyaltyPrograms
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyProgramsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/loyalty_programs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoyaltyProgramsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getLoyaltyProgramsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all loyalty Programs
     * 
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 getLoyaltyPrograms() throws ApiException {
        ApiResponse<InlineResponse2008> resp = getLoyaltyProgramsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all loyalty Programs
     * 
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> getLoyaltyProgramsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getLoyaltyProgramsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all loyalty Programs (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyProgramsAsync(final ApiCallback<InlineResponse2008> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLoyaltyProgramsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReferrals
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param code Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param advocate Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReferralsCall(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String code, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, String advocate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/referrals"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (code != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("code", code));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (valid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("valid", valid));
        }

        if (usable != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("usable", usable));
        }

        if (advocate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("advocate", advocate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReferralsValidateBeforeCall(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String code, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, String advocate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getReferrals(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getReferrals(Async)");
        }
        

        com.squareup.okhttp.Call call = getReferralsCall(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Referrals
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param code Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param advocate Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)
     * @return InlineResponse2006
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2006 getReferrals(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String code, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, String advocate) throws ApiException {
        ApiResponse<InlineResponse2006> resp = getReferralsWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);
        return resp.getData();
    }

    /**
     * List Referrals
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param code Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param advocate Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)
     * @return ApiResponse&lt;InlineResponse2006&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2006> getReferralsWithHttpInfo(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String code, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, String advocate) throws ApiException {
        com.squareup.okhttp.Call call = getReferralsValidateBeforeCall(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Referrals (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param code Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param advocate Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReferralsAsync(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String code, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, String advocate, final ApiCallback<InlineResponse2006> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReferralsValidateBeforeCall(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReferralsWithoutTotalCount
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param code Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param advocate Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReferralsWithoutTotalCountCall(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String code, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, String advocate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/no_total"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (code != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("code", code));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (valid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("valid", valid));
        }

        if (usable != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("usable", usable));
        }

        if (advocate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("advocate", advocate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReferralsWithoutTotalCountValidateBeforeCall(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String code, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, String advocate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getReferralsWithoutTotalCount(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getReferralsWithoutTotalCount(Async)");
        }
        

        com.squareup.okhttp.Call call = getReferralsWithoutTotalCountCall(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Referrals
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param code Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param advocate Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)
     * @return InlineResponse2007
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2007 getReferralsWithoutTotalCount(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String code, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, String advocate) throws ApiException {
        ApiResponse<InlineResponse2007> resp = getReferralsWithoutTotalCountWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);
        return resp.getData();
    }

    /**
     * List Referrals
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param code Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param advocate Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)
     * @return ApiResponse&lt;InlineResponse2007&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2007> getReferralsWithoutTotalCountWithHttpInfo(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String code, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, String advocate) throws ApiException {
        com.squareup.okhttp.Call call = getReferralsWithoutTotalCountValidateBeforeCall(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Referrals (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param code Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param advocate Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReferralsWithoutTotalCountAsync(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, String code, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, String advocate, final ApiCallback<InlineResponse2007> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReferralsWithoutTotalCountValidateBeforeCall(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRole
     * @param roleId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRoleCall(Integer roleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/roles/{roleId}"
            .replaceAll("\\{" + "roleId" + "\\}", apiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRoleValidateBeforeCall(Integer roleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getRole(Async)");
        }
        

        com.squareup.okhttp.Call call = getRoleCall(roleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get information for the specified role.
     * 
     * @param roleId  (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Role getRole(Integer roleId) throws ApiException {
        ApiResponse<Role> resp = getRoleWithHttpInfo(roleId);
        return resp.getData();
    }

    /**
     * Get information for the specified role.
     * 
     * @param roleId  (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Role> getRoleWithHttpInfo(Integer roleId) throws ApiException {
        com.squareup.okhttp.Call call = getRoleValidateBeforeCall(roleId, null, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get information for the specified role. (asynchronously)
     * 
     * @param roleId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRoleAsync(Integer roleId, final ApiCallback<Role> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRoleValidateBeforeCall(roleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRuleset
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rulesetId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRulesetCall(Integer applicationId, Integer campaignId, Integer rulesetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()))
            .replaceAll("\\{" + "rulesetId" + "\\}", apiClient.escapeString(rulesetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRulesetValidateBeforeCall(Integer applicationId, Integer campaignId, Integer rulesetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getRuleset(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getRuleset(Async)");
        }
        
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling getRuleset(Async)");
        }
        

        com.squareup.okhttp.Call call = getRulesetCall(applicationId, campaignId, rulesetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Ruleset
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rulesetId  (required)
     * @return Ruleset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ruleset getRuleset(Integer applicationId, Integer campaignId, Integer rulesetId) throws ApiException {
        ApiResponse<Ruleset> resp = getRulesetWithHttpInfo(applicationId, campaignId, rulesetId);
        return resp.getData();
    }

    /**
     * Get a Ruleset
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rulesetId  (required)
     * @return ApiResponse&lt;Ruleset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ruleset> getRulesetWithHttpInfo(Integer applicationId, Integer campaignId, Integer rulesetId) throws ApiException {
        com.squareup.okhttp.Call call = getRulesetValidateBeforeCall(applicationId, campaignId, rulesetId, null, null);
        Type localVarReturnType = new TypeToken<Ruleset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Ruleset (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rulesetId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRulesetAsync(Integer applicationId, Integer campaignId, Integer rulesetId, final ApiCallback<Ruleset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRulesetValidateBeforeCall(applicationId, campaignId, rulesetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ruleset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRulesets
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRulesetsCall(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRulesetsValidateBeforeCall(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getRulesets(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getRulesets(Async)");
        }
        

        com.squareup.okhttp.Call call = getRulesetsCall(applicationId, campaignId, pageSize, skip, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Campaign Rulesets
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 getRulesets(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort) throws ApiException {
        ApiResponse<InlineResponse2004> resp = getRulesetsWithHttpInfo(applicationId, campaignId, pageSize, skip, sort);
        return resp.getData();
    }

    /**
     * List Campaign Rulesets
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> getRulesetsWithHttpInfo(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getRulesetsValidateBeforeCall(applicationId, campaignId, pageSize, skip, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Campaign Rulesets (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRulesetsAsync(Integer applicationId, Integer campaignId, Integer pageSize, Integer skip, String sort, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRulesetsValidateBeforeCall(applicationId, campaignId, pageSize, skip, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUser
     * @param userId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUser(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserCall(userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a single User
     * Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
     * @param userId  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User getUser(Integer userId) throws ApiException {
        ApiResponse<User> resp = getUserWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Get a single User
     * Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
     * @param userId  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> getUserWithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = getUserValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single User (asynchronously)
     * Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
     * @param userId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserAsync(Integer userId, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsers
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsersCall(Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsersValidateBeforeCall(Integer pageSize, Integer skip, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getUsersCall(pageSize, skip, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Users in your account
     * Retrieve all users in your account. 
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return InlineResponse20024
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20024 getUsers(Integer pageSize, Integer skip, String sort) throws ApiException {
        ApiResponse<InlineResponse20024> resp = getUsersWithHttpInfo(pageSize, skip, sort);
        return resp.getData();
    }

    /**
     * List Users in your account
     * Retrieve all users in your account. 
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @return ApiResponse&lt;InlineResponse20024&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20024> getUsersWithHttpInfo(Integer pageSize, Integer skip, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getUsersValidateBeforeCall(pageSize, skip, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20024>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Users in your account (asynchronously)
     * Retrieve all users in your account. 
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsersAsync(Integer pageSize, Integer skip, String sort, final ApiCallback<InlineResponse20024> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsersValidateBeforeCall(pageSize, skip, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20024>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWebhook
     * @param webhookId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWebhookCall(Integer webhookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/webhooks/{webhookId}"
            .replaceAll("\\{" + "webhookId" + "\\}", apiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebhookValidateBeforeCall(Integer webhookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling getWebhook(Async)");
        }
        

        com.squareup.okhttp.Call call = getWebhookCall(webhookId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Webhook
     * Returns an webhook by its id.
     * @param webhookId  (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Webhook getWebhook(Integer webhookId) throws ApiException {
        ApiResponse<Webhook> resp = getWebhookWithHttpInfo(webhookId);
        return resp.getData();
    }

    /**
     * Get Webhook
     * Returns an webhook by its id.
     * @param webhookId  (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Webhook> getWebhookWithHttpInfo(Integer webhookId) throws ApiException {
        com.squareup.okhttp.Call call = getWebhookValidateBeforeCall(webhookId, null, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Webhook (asynchronously)
     * Returns an webhook by its id.
     * @param webhookId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebhookAsync(Integer webhookId, final ApiCallback<Webhook> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebhookValidateBeforeCall(webhookId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWebhookActivationLogs
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param integrationRequestUuid Filter results by integration request UUID. (optional)
     * @param webhookId Filter results by Webhook. (optional)
     * @param applicationId  (optional)
     * @param campaignId Filter results by campaign. (optional)
     * @param createdBefore Only return events created before this date. (optional)
     * @param createdAfter Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWebhookActivationLogsCall(Integer pageSize, Integer skip, String sort, String integrationRequestUuid, BigDecimal webhookId, BigDecimal applicationId, BigDecimal campaignId, OffsetDateTime createdBefore, OffsetDateTime createdAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/webhook_activation_logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (integrationRequestUuid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("integrationRequestUuid", integrationRequestUuid));
        }

        if (webhookId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("webhookId", webhookId));
        }

        if (applicationId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("applicationId", applicationId));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebhookActivationLogsValidateBeforeCall(Integer pageSize, Integer skip, String sort, String integrationRequestUuid, BigDecimal webhookId, BigDecimal applicationId, BigDecimal campaignId, OffsetDateTime createdBefore, OffsetDateTime createdAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getWebhookActivationLogsCall(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Webhook activation Log Entries
     * Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param integrationRequestUuid Filter results by integration request UUID. (optional)
     * @param webhookId Filter results by Webhook. (optional)
     * @param applicationId  (optional)
     * @param campaignId Filter results by campaign. (optional)
     * @param createdBefore Only return events created before this date. (optional)
     * @param createdAfter Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. (optional)
     * @return InlineResponse20021
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20021 getWebhookActivationLogs(Integer pageSize, Integer skip, String sort, String integrationRequestUuid, BigDecimal webhookId, BigDecimal applicationId, BigDecimal campaignId, OffsetDateTime createdBefore, OffsetDateTime createdAfter) throws ApiException {
        ApiResponse<InlineResponse20021> resp = getWebhookActivationLogsWithHttpInfo(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter);
        return resp.getData();
    }

    /**
     * List Webhook activation Log Entries
     * Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param integrationRequestUuid Filter results by integration request UUID. (optional)
     * @param webhookId Filter results by Webhook. (optional)
     * @param applicationId  (optional)
     * @param campaignId Filter results by campaign. (optional)
     * @param createdBefore Only return events created before this date. (optional)
     * @param createdAfter Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. (optional)
     * @return ApiResponse&lt;InlineResponse20021&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20021> getWebhookActivationLogsWithHttpInfo(Integer pageSize, Integer skip, String sort, String integrationRequestUuid, BigDecimal webhookId, BigDecimal applicationId, BigDecimal campaignId, OffsetDateTime createdBefore, OffsetDateTime createdAfter) throws ApiException {
        com.squareup.okhttp.Call call = getWebhookActivationLogsValidateBeforeCall(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20021>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Webhook activation Log Entries (asynchronously)
     * Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param integrationRequestUuid Filter results by integration request UUID. (optional)
     * @param webhookId Filter results by Webhook. (optional)
     * @param applicationId  (optional)
     * @param campaignId Filter results by campaign. (optional)
     * @param createdBefore Only return events created before this date. (optional)
     * @param createdAfter Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebhookActivationLogsAsync(Integer pageSize, Integer skip, String sort, String integrationRequestUuid, BigDecimal webhookId, BigDecimal applicationId, BigDecimal campaignId, OffsetDateTime createdBefore, OffsetDateTime createdAfter, final ApiCallback<InlineResponse20021> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebhookActivationLogsValidateBeforeCall(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20021>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWebhookLogs
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param webhookId Filter results by Webhook. (optional)
     * @param applicationId  (optional)
     * @param campaignId Filter results by campaign. (optional)
     * @param requestUuid Filter results by request UUID. (optional)
     * @param createdBefore Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. (optional)
     * @param createdAfter Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWebhookLogsCall(Integer pageSize, Integer skip, String sort, String status, BigDecimal webhookId, BigDecimal applicationId, BigDecimal campaignId, String requestUuid, OffsetDateTime createdBefore, OffsetDateTime createdAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/webhook_logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (status != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        }

        if (webhookId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("webhookId", webhookId));
        }

        if (applicationId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("applicationId", applicationId));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        }

        if (requestUuid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("requestUuid", requestUuid));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebhookLogsValidateBeforeCall(Integer pageSize, Integer skip, String sort, String status, BigDecimal webhookId, BigDecimal applicationId, BigDecimal campaignId, String requestUuid, OffsetDateTime createdBefore, OffsetDateTime createdAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getWebhookLogsCall(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Webhook Log Entries
     * 
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param webhookId Filter results by Webhook. (optional)
     * @param applicationId  (optional)
     * @param campaignId Filter results by campaign. (optional)
     * @param requestUuid Filter results by request UUID. (optional)
     * @param createdBefore Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. (optional)
     * @param createdAfter Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. (optional)
     * @return InlineResponse20022
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20022 getWebhookLogs(Integer pageSize, Integer skip, String sort, String status, BigDecimal webhookId, BigDecimal applicationId, BigDecimal campaignId, String requestUuid, OffsetDateTime createdBefore, OffsetDateTime createdAfter) throws ApiException {
        ApiResponse<InlineResponse20022> resp = getWebhookLogsWithHttpInfo(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter);
        return resp.getData();
    }

    /**
     * List Webhook Log Entries
     * 
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param webhookId Filter results by Webhook. (optional)
     * @param applicationId  (optional)
     * @param campaignId Filter results by campaign. (optional)
     * @param requestUuid Filter results by request UUID. (optional)
     * @param createdBefore Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. (optional)
     * @param createdAfter Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. (optional)
     * @return ApiResponse&lt;InlineResponse20022&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20022> getWebhookLogsWithHttpInfo(Integer pageSize, Integer skip, String sort, String status, BigDecimal webhookId, BigDecimal applicationId, BigDecimal campaignId, String requestUuid, OffsetDateTime createdBefore, OffsetDateTime createdAfter) throws ApiException {
        com.squareup.okhttp.Call call = getWebhookLogsValidateBeforeCall(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20022>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Webhook Log Entries (asynchronously)
     * 
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param status Filter results by HTTP status codes. (optional)
     * @param webhookId Filter results by Webhook. (optional)
     * @param applicationId  (optional)
     * @param campaignId Filter results by campaign. (optional)
     * @param requestUuid Filter results by request UUID. (optional)
     * @param createdBefore Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. (optional)
     * @param createdAfter Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebhookLogsAsync(Integer pageSize, Integer skip, String sort, String status, BigDecimal webhookId, BigDecimal applicationId, BigDecimal campaignId, String requestUuid, OffsetDateTime createdBefore, OffsetDateTime createdAfter, final ApiCallback<InlineResponse20022> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebhookLogsValidateBeforeCall(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20022>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWebhooks
     * @param applicationIds Filter by one or more application ids separated by comma (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWebhooksCall(String applicationIds, String sort, Integer pageSize, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicationIds != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("applicationIds", applicationIds));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebhooksValidateBeforeCall(String applicationIds, String sort, Integer pageSize, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getWebhooksCall(applicationIds, sort, pageSize, skip, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Webhooks
     * 
     * @param applicationIds Filter by one or more application ids separated by comma (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @return InlineResponse20020
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20020 getWebhooks(String applicationIds, String sort, Integer pageSize, Integer skip) throws ApiException {
        ApiResponse<InlineResponse20020> resp = getWebhooksWithHttpInfo(applicationIds, sort, pageSize, skip);
        return resp.getData();
    }

    /**
     * List Webhooks
     * 
     * @param applicationIds Filter by one or more application ids separated by comma (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @return ApiResponse&lt;InlineResponse20020&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20020> getWebhooksWithHttpInfo(String applicationIds, String sort, Integer pageSize, Integer skip) throws ApiException {
        com.squareup.okhttp.Call call = getWebhooksValidateBeforeCall(applicationIds, sort, pageSize, skip, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20020>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Webhooks (asynchronously)
     * 
     * @param applicationIds Filter by one or more application ids separated by comma (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebhooksAsync(String applicationIds, String sort, Integer pageSize, Integer skip, final ApiCallback<InlineResponse20020> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebhooksValidateBeforeCall(applicationIds, sort, pageSize, skip, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20020>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for refreshAnalytics
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call refreshAnalyticsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/refresh_analytics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call refreshAnalyticsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = refreshAnalyticsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Trigger refresh on stale analytics.
     * Should be used to trigger a manual refresh of analytics.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void refreshAnalytics() throws ApiException {
        refreshAnalyticsWithHttpInfo();
    }

    /**
     * Trigger refresh on stale analytics.
     * Should be used to trigger a manual refresh of analytics.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> refreshAnalyticsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = refreshAnalyticsValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Trigger refresh on stale analytics. (asynchronously)
     * Should be used to trigger a manual refresh of analytics.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call refreshAnalyticsAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = refreshAnalyticsValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeLoyaltyPoints
     * @param programID  (required)
     * @param integrationID  (required)
     * @param loyaltyPoints  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeLoyaltyPointsCall(String programID, String integrationID, LoyaltyPoints loyaltyPoints, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = loyaltyPoints;

        // create path and map variables
        String localVarPath = "/v1/loyalty_programs/{programID}/profile/{integrationID}/deduct_points"
            .replaceAll("\\{" + "programID" + "\\}", apiClient.escapeString(programID.toString()))
            .replaceAll("\\{" + "integrationID" + "\\}", apiClient.escapeString(integrationID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeLoyaltyPointsValidateBeforeCall(String programID, String integrationID, LoyaltyPoints loyaltyPoints, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'programID' is set
        if (programID == null) {
            throw new ApiException("Missing the required parameter 'programID' when calling removeLoyaltyPoints(Async)");
        }
        
        // verify the required parameter 'integrationID' is set
        if (integrationID == null) {
            throw new ApiException("Missing the required parameter 'integrationID' when calling removeLoyaltyPoints(Async)");
        }
        
        // verify the required parameter 'loyaltyPoints' is set
        if (loyaltyPoints == null) {
            throw new ApiException("Missing the required parameter 'loyaltyPoints' when calling removeLoyaltyPoints(Async)");
        }
        

        com.squareup.okhttp.Call call = removeLoyaltyPointsCall(programID, integrationID, loyaltyPoints, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deduct points in a certain loyalty program for the specified customer
     * 
     * @param programID  (required)
     * @param integrationID  (required)
     * @param loyaltyPoints  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeLoyaltyPoints(String programID, String integrationID, LoyaltyPoints loyaltyPoints) throws ApiException {
        removeLoyaltyPointsWithHttpInfo(programID, integrationID, loyaltyPoints);
    }

    /**
     * Deduct points in a certain loyalty program for the specified customer
     * 
     * @param programID  (required)
     * @param integrationID  (required)
     * @param loyaltyPoints  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeLoyaltyPointsWithHttpInfo(String programID, String integrationID, LoyaltyPoints loyaltyPoints) throws ApiException {
        com.squareup.okhttp.Call call = removeLoyaltyPointsValidateBeforeCall(programID, integrationID, loyaltyPoints, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deduct points in a certain loyalty program for the specified customer (asynchronously)
     * 
     * @param programID  (required)
     * @param integrationID  (required)
     * @param loyaltyPoints  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeLoyaltyPointsAsync(String programID, String integrationID, LoyaltyPoints loyaltyPoints, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeLoyaltyPointsValidateBeforeCall(programID, integrationID, loyaltyPoints, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for resetPassword
     * @param newPassword  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resetPasswordCall(NewPassword newPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = newPassword;

        // create path and map variables
        String localVarPath = "/v1/reset_password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resetPasswordValidateBeforeCall(NewPassword newPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'newPassword' is set
        if (newPassword == null) {
            throw new ApiException("Missing the required parameter 'newPassword' when calling resetPassword(Async)");
        }
        

        com.squareup.okhttp.Call call = resetPasswordCall(newPassword, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Reset password
     * Consumes the supplied password reset token and updates the password for the associated account. 
     * @param newPassword  (required)
     * @return NewPassword
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NewPassword resetPassword(NewPassword newPassword) throws ApiException {
        ApiResponse<NewPassword> resp = resetPasswordWithHttpInfo(newPassword);
        return resp.getData();
    }

    /**
     * Reset password
     * Consumes the supplied password reset token and updates the password for the associated account. 
     * @param newPassword  (required)
     * @return ApiResponse&lt;NewPassword&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NewPassword> resetPasswordWithHttpInfo(NewPassword newPassword) throws ApiException {
        com.squareup.okhttp.Call call = resetPasswordValidateBeforeCall(newPassword, null, null);
        Type localVarReturnType = new TypeToken<NewPassword>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reset password (asynchronously)
     * Consumes the supplied password reset token and updates the password for the associated account. 
     * @param newPassword  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resetPasswordAsync(NewPassword newPassword, final ApiCallback<NewPassword> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resetPasswordValidateBeforeCall(newPassword, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NewPassword>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchCouponsAdvanced
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param batchId Filter results by batches of coupons (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchCouponsAdvancedCall(Integer applicationId, Integer campaignId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, String batchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = attributeQuery;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search_advanced"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (value != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("value", value));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (valid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("valid", valid));
        }

        if (usable != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("usable", usable));
        }

        if (referralId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("referralId", referralId));
        }

        if (recipientIntegrationId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("recipientIntegrationId", recipientIntegrationId));
        }

        if (exactMatch != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exactMatch", exactMatch));
        }

        if (batchId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("batchId", batchId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchCouponsAdvancedValidateBeforeCall(Integer applicationId, Integer campaignId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, String batchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling searchCouponsAdvanced(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling searchCouponsAdvanced(Async)");
        }
        
        // verify the required parameter 'attributeQuery' is set
        if (attributeQuery == null) {
            throw new ApiException("Missing the required parameter 'attributeQuery' when calling searchCouponsAdvanced(Async)");
        }
        

        com.squareup.okhttp.Call call = searchCouponsAdvancedCall(applicationId, campaignId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of the coupons that match the given attributes
     * Gets a list of all the coupons with attributes matching the query criteria 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param batchId Filter results by batches of coupons (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 searchCouponsAdvanced(Integer applicationId, Integer campaignId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, String batchId) throws ApiException {
        ApiResponse<InlineResponse2001> resp = searchCouponsAdvancedWithHttpInfo(applicationId, campaignId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
        return resp.getData();
    }

    /**
     * Get a list of the coupons that match the given attributes
     * Gets a list of all the coupons with attributes matching the query criteria 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param batchId Filter results by batches of coupons (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> searchCouponsAdvancedWithHttpInfo(Integer applicationId, Integer campaignId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, String batchId) throws ApiException {
        com.squareup.okhttp.Call call = searchCouponsAdvancedValidateBeforeCall(applicationId, campaignId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of the coupons that match the given attributes (asynchronously)
     * Gets a list of all the coupons with attributes matching the query criteria 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param batchId Filter results by batches of coupons (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchCouponsAdvancedAsync(Integer applicationId, Integer campaignId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, String batchId, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchCouponsAdvancedValidateBeforeCall(applicationId, campaignId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchCouponsAdvancedApplicationWide
     * @param applicationId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchCouponsAdvancedApplicationWideCall(Integer applicationId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, String campaignState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = attributeQuery;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/coupons_search_advanced"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (value != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("value", value));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (valid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("valid", valid));
        }

        if (usable != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("usable", usable));
        }

        if (referralId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("referralId", referralId));
        }

        if (recipientIntegrationId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("recipientIntegrationId", recipientIntegrationId));
        }

        if (batchId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("batchId", batchId));
        }

        if (exactMatch != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exactMatch", exactMatch));
        }

        if (campaignState != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignState", campaignState));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchCouponsAdvancedApplicationWideValidateBeforeCall(Integer applicationId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, String campaignState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling searchCouponsAdvancedApplicationWide(Async)");
        }
        
        // verify the required parameter 'attributeQuery' is set
        if (attributeQuery == null) {
            throw new ApiException("Missing the required parameter 'attributeQuery' when calling searchCouponsAdvancedApplicationWide(Async)");
        }
        

        com.squareup.okhttp.Call call = searchCouponsAdvancedApplicationWideCall(applicationId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application
     * Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
     * @param applicationId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 searchCouponsAdvancedApplicationWide(Integer applicationId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, String campaignState) throws ApiException {
        ApiResponse<InlineResponse2001> resp = searchCouponsAdvancedApplicationWideWithHttpInfo(applicationId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
        return resp.getData();
    }

    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application
     * Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
     * @param applicationId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> searchCouponsAdvancedApplicationWideWithHttpInfo(Integer applicationId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, String campaignState) throws ApiException {
        com.squareup.okhttp.Call call = searchCouponsAdvancedApplicationWideValidateBeforeCall(applicationId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application (asynchronously)
     * Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
     * @param applicationId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchCouponsAdvancedApplicationWideAsync(Integer applicationId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, String campaignState, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchCouponsAdvancedApplicationWideValidateBeforeCall(applicationId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchCouponsAdvancedApplicationWideWithoutTotalCount
     * @param applicationId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchCouponsAdvancedApplicationWideWithoutTotalCountCall(Integer applicationId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, String campaignState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = attributeQuery;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/coupons_search_advanced/no_total"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (value != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("value", value));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (valid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("valid", valid));
        }

        if (usable != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("usable", usable));
        }

        if (referralId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("referralId", referralId));
        }

        if (recipientIntegrationId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("recipientIntegrationId", recipientIntegrationId));
        }

        if (batchId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("batchId", batchId));
        }

        if (exactMatch != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exactMatch", exactMatch));
        }

        if (campaignState != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignState", campaignState));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchCouponsAdvancedApplicationWideWithoutTotalCountValidateBeforeCall(Integer applicationId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, String campaignState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling searchCouponsAdvancedApplicationWideWithoutTotalCount(Async)");
        }
        
        // verify the required parameter 'attributeQuery' is set
        if (attributeQuery == null) {
            throw new ApiException("Missing the required parameter 'attributeQuery' when calling searchCouponsAdvancedApplicationWideWithoutTotalCount(Async)");
        }
        

        com.squareup.okhttp.Call call = searchCouponsAdvancedApplicationWideWithoutTotalCountCall(applicationId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application
     * Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
     * @param applicationId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2005 searchCouponsAdvancedApplicationWideWithoutTotalCount(Integer applicationId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, String campaignState) throws ApiException {
        ApiResponse<InlineResponse2005> resp = searchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo(applicationId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
        return resp.getData();
    }

    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application
     * Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
     * @param applicationId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2005> searchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo(Integer applicationId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, String campaignState) throws ApiException {
        com.squareup.okhttp.Call call = searchCouponsAdvancedApplicationWideWithoutTotalCountValidateBeforeCall(applicationId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application (asynchronously)
     * Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
     * @param applicationId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param batchId Filter results by batches of coupons (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param campaignState Filter results by the state of the campaign. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchCouponsAdvancedApplicationWideWithoutTotalCountAsync(Integer applicationId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, String batchId, Boolean exactMatch, String campaignState, final ApiCallback<InlineResponse2005> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchCouponsAdvancedApplicationWideWithoutTotalCountValidateBeforeCall(applicationId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchCouponsAdvancedWithoutTotalCount
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param batchId Filter results by batches of coupons (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchCouponsAdvancedWithoutTotalCountCall(Integer applicationId, Integer campaignId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, String batchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = attributeQuery;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search_advanced/no_total"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (skip != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        if (value != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("value", value));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (valid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("valid", valid));
        }

        if (usable != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("usable", usable));
        }

        if (referralId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("referralId", referralId));
        }

        if (recipientIntegrationId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("recipientIntegrationId", recipientIntegrationId));
        }

        if (exactMatch != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exactMatch", exactMatch));
        }

        if (batchId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("batchId", batchId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchCouponsAdvancedWithoutTotalCountValidateBeforeCall(Integer applicationId, Integer campaignId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, String batchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling searchCouponsAdvancedWithoutTotalCount(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling searchCouponsAdvancedWithoutTotalCount(Async)");
        }
        
        // verify the required parameter 'attributeQuery' is set
        if (attributeQuery == null) {
            throw new ApiException("Missing the required parameter 'attributeQuery' when calling searchCouponsAdvancedWithoutTotalCount(Async)");
        }
        

        com.squareup.okhttp.Call call = searchCouponsAdvancedWithoutTotalCountCall(applicationId, campaignId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of the coupons that match the given attributes
     * Gets a list of all the coupons with attributes matching the query criteria 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param batchId Filter results by batches of coupons (optional)
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2005 searchCouponsAdvancedWithoutTotalCount(Integer applicationId, Integer campaignId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, String batchId) throws ApiException {
        ApiResponse<InlineResponse2005> resp = searchCouponsAdvancedWithoutTotalCountWithHttpInfo(applicationId, campaignId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
        return resp.getData();
    }

    /**
     * Get a list of the coupons that match the given attributes
     * Gets a list of all the coupons with attributes matching the query criteria 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param batchId Filter results by batches of coupons (optional)
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2005> searchCouponsAdvancedWithoutTotalCountWithHttpInfo(Integer applicationId, Integer campaignId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, String batchId) throws ApiException {
        com.squareup.okhttp.Call call = searchCouponsAdvancedWithoutTotalCountValidateBeforeCall(applicationId, campaignId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of the coupons that match the given attributes (asynchronously)
     * Gets a list of all the coupons with attributes matching the query criteria 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param attributeQuery  (required)
     * @param pageSize The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)
     * @param skip Skips the given number of items when paging through large result sets. (optional)
     * @param sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)
     * @param createdBefore Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param createdAfter Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. (optional)
     * @param valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)
     * @param usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)
     * @param referralId Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)
     * @param recipientIntegrationId Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)
     * @param exactMatch Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)
     * @param batchId Filter results by batches of coupons (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchCouponsAdvancedWithoutTotalCountAsync(Integer applicationId, Integer campaignId, AttributeQuery attributeQuery, Integer pageSize, Integer skip, String sort, String value, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String valid, String usable, Integer referralId, String recipientIntegrationId, Boolean exactMatch, String batchId, final ApiCallback<InlineResponse2005> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchCouponsAdvancedWithoutTotalCountValidateBeforeCall(applicationId, campaignId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setAccountLimits
     * @param accountId  (required)
     * @param accountLimits  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setAccountLimitsCall(Integer accountId, AccountLimits accountLimits, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accountLimits;

        // create path and map variables
        String localVarPath = "/v1/accounts/{accountId}/limits"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setAccountLimitsValidateBeforeCall(Integer accountId, AccountLimits accountLimits, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling setAccountLimits(Async)");
        }
        
        // verify the required parameter 'accountLimits' is set
        if (accountLimits == null) {
            throw new ApiException("Missing the required parameter 'accountLimits' when calling setAccountLimits(Async)");
        }
        

        com.squareup.okhttp.Call call = setAccountLimitsCall(accountId, accountLimits, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set account limits
     * sets account limits 
     * @param accountId  (required)
     * @param accountLimits  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setAccountLimits(Integer accountId, AccountLimits accountLimits) throws ApiException {
        setAccountLimitsWithHttpInfo(accountId, accountLimits);
    }

    /**
     * Set account limits
     * sets account limits 
     * @param accountId  (required)
     * @param accountLimits  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setAccountLimitsWithHttpInfo(Integer accountId, AccountLimits accountLimits) throws ApiException {
        com.squareup.okhttp.Call call = setAccountLimitsValidateBeforeCall(accountId, accountLimits, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set account limits (asynchronously)
     * sets account limits 
     * @param accountId  (required)
     * @param accountLimits  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setAccountLimitsAsync(Integer accountId, AccountLimits accountLimits, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setAccountLimitsValidateBeforeCall(accountId, accountLimits, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateCampaign
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param updateCampaign  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCampaignCall(Integer applicationId, Integer campaignId, UpdateCampaign updateCampaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateCampaign;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCampaignValidateBeforeCall(Integer applicationId, Integer campaignId, UpdateCampaign updateCampaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling updateCampaign(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateCampaign(Async)");
        }
        
        // verify the required parameter 'updateCampaign' is set
        if (updateCampaign == null) {
            throw new ApiException("Missing the required parameter 'updateCampaign' when calling updateCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCampaignCall(applicationId, campaignId, updateCampaign, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Campaign
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param updateCampaign  (required)
     * @return Campaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Campaign updateCampaign(Integer applicationId, Integer campaignId, UpdateCampaign updateCampaign) throws ApiException {
        ApiResponse<Campaign> resp = updateCampaignWithHttpInfo(applicationId, campaignId, updateCampaign);
        return resp.getData();
    }

    /**
     * Update a Campaign
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param updateCampaign  (required)
     * @return ApiResponse&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Campaign> updateCampaignWithHttpInfo(Integer applicationId, Integer campaignId, UpdateCampaign updateCampaign) throws ApiException {
        com.squareup.okhttp.Call call = updateCampaignValidateBeforeCall(applicationId, campaignId, updateCampaign, null, null);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Campaign (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param updateCampaign  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCampaignAsync(Integer applicationId, Integer campaignId, UpdateCampaign updateCampaign, final ApiCallback<Campaign> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCampaignValidateBeforeCall(applicationId, campaignId, updateCampaign, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCampaignSet
     * @param applicationId  (required)
     * @param newCampaignSet  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCampaignSetCall(Integer applicationId, NewCampaignSet newCampaignSet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = newCampaignSet;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaign_set"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCampaignSetValidateBeforeCall(Integer applicationId, NewCampaignSet newCampaignSet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling updateCampaignSet(Async)");
        }
        
        // verify the required parameter 'newCampaignSet' is set
        if (newCampaignSet == null) {
            throw new ApiException("Missing the required parameter 'newCampaignSet' when calling updateCampaignSet(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCampaignSetCall(applicationId, newCampaignSet, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Campaign Set
     * 
     * @param applicationId  (required)
     * @param newCampaignSet  (required)
     * @return CampaignSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CampaignSet updateCampaignSet(Integer applicationId, NewCampaignSet newCampaignSet) throws ApiException {
        ApiResponse<CampaignSet> resp = updateCampaignSetWithHttpInfo(applicationId, newCampaignSet);
        return resp.getData();
    }

    /**
     * Update a Campaign Set
     * 
     * @param applicationId  (required)
     * @param newCampaignSet  (required)
     * @return ApiResponse&lt;CampaignSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CampaignSet> updateCampaignSetWithHttpInfo(Integer applicationId, NewCampaignSet newCampaignSet) throws ApiException {
        com.squareup.okhttp.Call call = updateCampaignSetValidateBeforeCall(applicationId, newCampaignSet, null, null);
        Type localVarReturnType = new TypeToken<CampaignSet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Campaign Set (asynchronously)
     * 
     * @param applicationId  (required)
     * @param newCampaignSet  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCampaignSetAsync(Integer applicationId, NewCampaignSet newCampaignSet, final ApiCallback<CampaignSet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCampaignSetValidateBeforeCall(applicationId, newCampaignSet, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CampaignSet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCoupon
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param couponId The ID of the coupon code to update (required)
     * @param updateCoupon  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCouponCall(Integer applicationId, Integer campaignId, String couponId, UpdateCoupon updateCoupon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateCoupon;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()))
            .replaceAll("\\{" + "couponId" + "\\}", apiClient.escapeString(couponId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCouponValidateBeforeCall(Integer applicationId, Integer campaignId, String couponId, UpdateCoupon updateCoupon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling updateCoupon(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateCoupon(Async)");
        }
        
        // verify the required parameter 'couponId' is set
        if (couponId == null) {
            throw new ApiException("Missing the required parameter 'couponId' when calling updateCoupon(Async)");
        }
        
        // verify the required parameter 'updateCoupon' is set
        if (updateCoupon == null) {
            throw new ApiException("Missing the required parameter 'updateCoupon' when calling updateCoupon(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCouponCall(applicationId, campaignId, couponId, updateCoupon, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Coupon
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param couponId The ID of the coupon code to update (required)
     * @param updateCoupon  (required)
     * @return Coupon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Coupon updateCoupon(Integer applicationId, Integer campaignId, String couponId, UpdateCoupon updateCoupon) throws ApiException {
        ApiResponse<Coupon> resp = updateCouponWithHttpInfo(applicationId, campaignId, couponId, updateCoupon);
        return resp.getData();
    }

    /**
     * Update a Coupon
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param couponId The ID of the coupon code to update (required)
     * @param updateCoupon  (required)
     * @return ApiResponse&lt;Coupon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Coupon> updateCouponWithHttpInfo(Integer applicationId, Integer campaignId, String couponId, UpdateCoupon updateCoupon) throws ApiException {
        com.squareup.okhttp.Call call = updateCouponValidateBeforeCall(applicationId, campaignId, couponId, updateCoupon, null, null);
        Type localVarReturnType = new TypeToken<Coupon>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Coupon (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param couponId The ID of the coupon code to update (required)
     * @param updateCoupon  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCouponAsync(Integer applicationId, Integer campaignId, String couponId, UpdateCoupon updateCoupon, final ApiCallback<Coupon> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCouponValidateBeforeCall(applicationId, campaignId, couponId, updateCoupon, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Coupon>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCouponBatch
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param updateCouponBatch  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCouponBatchCall(Integer applicationId, Integer campaignId, UpdateCouponBatch updateCouponBatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateCouponBatch;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCouponBatchValidateBeforeCall(Integer applicationId, Integer campaignId, UpdateCouponBatch updateCouponBatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling updateCouponBatch(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateCouponBatch(Async)");
        }
        
        // verify the required parameter 'updateCouponBatch' is set
        if (updateCouponBatch == null) {
            throw new ApiException("Missing the required parameter 'updateCouponBatch' when calling updateCouponBatch(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCouponBatchCall(applicationId, campaignId, updateCouponBatch, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Batch of Coupons
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param updateCouponBatch  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateCouponBatch(Integer applicationId, Integer campaignId, UpdateCouponBatch updateCouponBatch) throws ApiException {
        updateCouponBatchWithHttpInfo(applicationId, campaignId, updateCouponBatch);
    }

    /**
     * Update a Batch of Coupons
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param updateCouponBatch  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateCouponBatchWithHttpInfo(Integer applicationId, Integer campaignId, UpdateCouponBatch updateCouponBatch) throws ApiException {
        com.squareup.okhttp.Call call = updateCouponBatchValidateBeforeCall(applicationId, campaignId, updateCouponBatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a Batch of Coupons (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param updateCouponBatch  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCouponBatchAsync(Integer applicationId, Integer campaignId, UpdateCouponBatch updateCouponBatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCouponBatchValidateBeforeCall(applicationId, campaignId, updateCouponBatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateRuleset
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rulesetId  (required)
     * @param newRuleset  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRulesetCall(Integer applicationId, Integer campaignId, Integer rulesetId, NewRuleset newRuleset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = newRuleset;

        // create path and map variables
        String localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "campaignId" + "\\}", apiClient.escapeString(campaignId.toString()))
            .replaceAll("\\{" + "rulesetId" + "\\}", apiClient.escapeString(rulesetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "manager_auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRulesetValidateBeforeCall(Integer applicationId, Integer campaignId, Integer rulesetId, NewRuleset newRuleset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling updateRuleset(Async)");
        }
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateRuleset(Async)");
        }
        
        // verify the required parameter 'rulesetId' is set
        if (rulesetId == null) {
            throw new ApiException("Missing the required parameter 'rulesetId' when calling updateRuleset(Async)");
        }
        
        // verify the required parameter 'newRuleset' is set
        if (newRuleset == null) {
            throw new ApiException("Missing the required parameter 'newRuleset' when calling updateRuleset(Async)");
        }
        

        com.squareup.okhttp.Call call = updateRulesetCall(applicationId, campaignId, rulesetId, newRuleset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Ruleset
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rulesetId  (required)
     * @param newRuleset  (required)
     * @return Ruleset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ruleset updateRuleset(Integer applicationId, Integer campaignId, Integer rulesetId, NewRuleset newRuleset) throws ApiException {
        ApiResponse<Ruleset> resp = updateRulesetWithHttpInfo(applicationId, campaignId, rulesetId, newRuleset);
        return resp.getData();
    }

    /**
     * Update a Ruleset
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rulesetId  (required)
     * @param newRuleset  (required)
     * @return ApiResponse&lt;Ruleset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ruleset> updateRulesetWithHttpInfo(Integer applicationId, Integer campaignId, Integer rulesetId, NewRuleset newRuleset) throws ApiException {
        com.squareup.okhttp.Call call = updateRulesetValidateBeforeCall(applicationId, campaignId, rulesetId, newRuleset, null, null);
        Type localVarReturnType = new TypeToken<Ruleset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Ruleset (asynchronously)
     * 
     * @param applicationId  (required)
     * @param campaignId  (required)
     * @param rulesetId  (required)
     * @param newRuleset  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRulesetAsync(Integer applicationId, Integer campaignId, Integer rulesetId, NewRuleset newRuleset, final ApiCallback<Ruleset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRulesetValidateBeforeCall(applicationId, campaignId, rulesetId, newRuleset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ruleset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
