/*
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.api;

import one.talon.ApiException;
import one.talon.model.Coupon;
import one.talon.model.CouponReservations;
import one.talon.model.CustomerInventory;
import one.talon.model.CustomerProfileUpdate;
import one.talon.model.InlineResponse200;
import one.talon.model.IntegrationRequest;
import one.talon.model.IntegrationState;
import one.talon.model.IntegrationStateV2;
import one.talon.model.NewCustomerProfile;
import one.talon.model.NewCustomerSession;
import one.talon.model.NewEvent;
import one.talon.model.NewReferral;
import one.talon.model.Referral;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IntegrationApi
 */
@Ignore
public class IntegrationApiTest {

    private final IntegrationApi api = new IntegrationApi();

    
    /**
     * Create a new coupon reservation
     *
     * Creates a coupon reservation for all passed customer profiles on this couponID 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCouponReservationTest() throws ApiException {
        String couponValue = null;
        CouponReservations body = null;
        Coupon response = api.createCouponReservation(couponValue, body);

        // TODO: test validations
    }
    
    /**
     * Create a referral code for an advocate
     *
     * Creates a referral code for an advocate. The code will be valid for the referral campaign for which is created, indicated in the &#x60;campaignId&#x60; parameter, and will be associated with the profile specified in the &#x60;advocateProfileIntegrationId&#x60; parameter as the advocate&#39;s profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createReferralTest() throws ApiException {
        NewReferral body = null;
        Referral response = api.createReferral(body);

        // TODO: test validations
    }
    
    /**
     * Delete coupon reservations
     *
     * Removes all passed customer profiles reservation from this coupon 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCouponReservationTest() throws ApiException {
        String couponValue = null;
        CouponReservations body = null;
        api.deleteCouponReservation(couponValue, body);

        // TODO: test validations
    }
    
    /**
     * Delete the personal data of a customer.
     *
     * Delete all attributes on the customer profile and on entities that reference that customer profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCustomerDataTest() throws ApiException {
        String integrationId = null;
        api.deleteCustomerData(integrationId);

        // TODO: test validations
    }
    
    /**
     * Get an inventory of all data associated with a specific customer profile.
     *
     * Get information regarding entities referencing this customer profile&#39;s integrationId. Currently we support customer profile information, referral codes and reserved coupons. In the future, this will be expanded with loyalty points.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerInventoryTest() throws ApiException {
        String integrationId = null;
        Boolean profile = null;
        Boolean referrals = null;
        Boolean coupons = null;
        CustomerInventory response = api.getCustomerInventory(integrationId, profile, referrals, coupons);

        // TODO: test validations
    }
    
    /**
     * Get the users that have this coupon reserved
     *
     * Returns all users that have this coupon marked as reserved 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReservedCustomersTest() throws ApiException {
        String couponValue = null;
        InlineResponse200 response = api.getReservedCustomers(couponValue);

        // TODO: test validations
    }
    
    /**
     * Track an Event
     *
     * Records an arbitrary event in a customer session. For example, an integration might record an event when a user updates their payment information.  The &#x60;sessionId&#x60; body parameter is required, an event is always part of a session. Much like updating a customer session, if either the profile or the session do not exist, a new empty one will be created. Note that if the specified session already exists, it must belong to the same &#x60;profileId&#x60; or an error will be returned.  As with customer sessions, you can use an empty string for &#x60;profileId&#x60; to indicate that this is an anonymous session.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trackEventTest() throws ApiException {
        NewEvent body = null;
        Boolean dry = null;
        IntegrationState response = api.trackEvent(body, dry);

        // TODO: test validations
    }
    
    /**
     * Update a Customer Profile
     *
     * Update (or create) a [Customer Profile][]. This profile information can then be matched and/or updated by campaign [Rules][].  The &#x60;integrationId&#x60; may be any identifier that will remain stable for the customer. For example, you might use a database ID, an email, or a phone number as the &#x60;integrationId&#x60;. It is vital that this ID **not** change over time, so **don&#39;t** use any identifier that the customer can update themselves. E.g. if your application allows a customer to update their e-mail address, you should instead use a database ID.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  [Customer Profile]: /Getting-Started/entities#customer-profile [Rules]: /Getting-Started/entities#campaigns-rulesets-and-coupons 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomerProfileTest() throws ApiException {
        String integrationId = null;
        NewCustomerProfile body = null;
        Boolean dry = null;
        IntegrationState response = api.updateCustomerProfile(integrationId, body, dry);

        // TODO: test validations
    }
    
    /**
     * Update a Customer Profile
     *
     * Update (or create) a [Customer Profile][].   The &#x60;integrationId&#x60; may be any identifier that will remain stable for the customer. For example, you might use a database ID, an email, or a phone number as the &#x60;integrationId&#x60;. It is vital that this ID **not** change over time, so **don&#39;t** use any identifier that the customer can update themselves. E.g. if your application allows a customer to update their e-mail address, you should instead use a database ID.  [Customer Profile]: /Getting-Started/entities#customer-profile 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomerProfileV2Test() throws ApiException {
        String customerProfileId = null;
        NewCustomerProfile body = null;
        CustomerProfileUpdate response = api.updateCustomerProfileV2(customerProfileId, body);

        // TODO: test validations
    }
    
    /**
     * Update a Customer Session
     *
     * Update (or create) a [Customer Session][]. For example, the items in a customers cart are part of a session.  The Talon.One platform supports multiple simultaneous sessions for the same profile, so if you have multiple ways of accessing the same application you have the option of either tracking multiple independent sessions or using the same session across all of them. You should share sessions when application access points share other state, such as the users cart. If two points of access to the application have independent state (e.g. a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  The &#x60;profileId&#x60; parameter in the request body should correspond to an &#x60;integrationId&#x60; for a customer profile, to track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. Note that you do **not** need to create a customer profile first: if the specified profile does not yet exist, an empty profile will be created automatically.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated.  [Customer Session]: /Getting-Started/entities#customer-session 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomerSessionTest() throws ApiException {
        String customerSessionId = null;
        NewCustomerSession body = null;
        Boolean dry = null;
        IntegrationState response = api.updateCustomerSession(customerSessionId, body, dry);

        // TODO: test validations
    }
    
    /**
     * Update a Customer Session
     *
     * Update (or create) a [Customer Session][]. For example, the items in a customers cart are part of a session.  The Talon.One platform supports multiple simultaneous sessions for the same profile, so if you have multiple ways of accessing the same application you have the option of either tracking multiple independent sessions or using the same session across all of them. You should share sessions when application access points share other state, such as the users cart. If two points of access to the application have independent state (e.g. a user can have different items in their cart across the two) they should use independent customer session ID&#39;s.  The &#x60;profileId&#x60; parameter in the request body should correspond to an &#x60;integrationId&#x60; for a customer profile, to track an anonymous session use the empty string (&#x60;\&quot;\&quot;&#x60;) as the &#x60;profileId&#x60;. Note that you do **not** need to create a customer profile first: if the specified profile does not yet exist, an empty profile will be created automatically.  Updating a customer profile will return a response with the requested integration state. This includes the effects that were generated due to triggered campaigns, the created coupons and referral objects, as well as any entity that was requested in the request parameter \&quot;responseContent\&quot;.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated.  [Customer Session]: /Getting-Started/entities#customer-session 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomerSessionV2Test() throws ApiException {
        String customerSessionId = null;
        IntegrationRequest body = null;
        Boolean dry = null;
        IntegrationStateV2 response = api.updateCustomerSessionV2(customerSessionId, body, dry);

        // TODO: test validations
    }
    
}
