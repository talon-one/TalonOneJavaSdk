/*
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.api;

import one.talon.ApiException;
import one.talon.model.Account;
import one.talon.model.AccountAdditionalCost;
import one.talon.model.AccountAnalytics;
import one.talon.model.Application;
import one.talon.model.ApplicationApiHealth;
import one.talon.model.ApplicationCustomer;
import one.talon.model.ApplicationCustomerSearch;
import one.talon.model.ApplicationSession;
import one.talon.model.Attribute;
import java.math.BigDecimal;
import one.talon.model.Campaign;
import one.talon.model.CampaignCopy;
import one.talon.model.CampaignSearch;
import one.talon.model.Coupon;
import one.talon.model.CouponSearch;
import one.talon.model.CustomerActivityReport;
import one.talon.model.CustomerAnalytics;
import java.io.File;
import one.talon.model.InlineResponse2001;
import one.talon.model.InlineResponse20010;
import one.talon.model.InlineResponse20011;
import one.talon.model.InlineResponse20012;
import one.talon.model.InlineResponse20013;
import one.talon.model.InlineResponse20014;
import one.talon.model.InlineResponse20015;
import one.talon.model.InlineResponse20016;
import one.talon.model.InlineResponse20017;
import one.talon.model.InlineResponse20018;
import one.talon.model.InlineResponse20019;
import one.talon.model.InlineResponse2002;
import one.talon.model.InlineResponse20020;
import one.talon.model.InlineResponse20021;
import one.talon.model.InlineResponse20022;
import one.talon.model.InlineResponse20023;
import one.talon.model.InlineResponse20024;
import one.talon.model.InlineResponse20025;
import one.talon.model.InlineResponse20026;
import one.talon.model.InlineResponse20027;
import one.talon.model.InlineResponse20028;
import one.talon.model.InlineResponse20029;
import one.talon.model.InlineResponse2003;
import one.talon.model.InlineResponse20030;
import one.talon.model.InlineResponse2004;
import one.talon.model.InlineResponse2005;
import one.talon.model.InlineResponse2006;
import one.talon.model.InlineResponse2007;
import one.talon.model.InlineResponse2008;
import one.talon.model.InlineResponse2009;
import one.talon.model.LoginParams;
import one.talon.model.LoyaltyLedger;
import one.talon.model.LoyaltyPoints;
import one.talon.model.LoyaltyProgram;
import one.talon.model.LoyaltyStatistics;
import one.talon.model.NewAdditionalCost;
import one.talon.model.NewAttribute;
import one.talon.model.NewCampaign;
import one.talon.model.NewCoupons;
import one.talon.model.NewCouponsForMultipleRecipients;
import one.talon.model.NewPassword;
import one.talon.model.NewPasswordEmail;
import one.talon.model.NewRuleset;
import org.threeten.bp.OffsetDateTime;
import one.talon.model.Role;
import one.talon.model.Ruleset;
import one.talon.model.Session;
import one.talon.model.UpdateCampaign;
import one.talon.model.UpdateCoupon;
import one.talon.model.UpdateCouponBatch;
import one.talon.model.User;
import one.talon.model.Webhook;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementApi
 */
@Ignore
public class ManagementApiTest {

    private final ManagementApi api = new ManagementApi();

    
    /**
     * Add points in a certain loyalty program for the specified customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLoyaltyPointsTest() throws ApiException {
        String programID = null;
        String integrationID = null;
        LoyaltyPoints body = null;
        api.addLoyaltyPoints(programID, integrationID, body);

        // TODO: test validations
    }
    
    /**
     * Copy the campaign into every specified application
     *
     * Copy the campaign into every specified application.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyCampaignToApplicationsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        CampaignCopy body = null;
        InlineResponse2002 response = api.copyCampaignToApplications(applicationId, campaignId, body);

        // TODO: test validations
    }
    
    /**
     * Define a new additional cost
     *
     * Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAdditionalCostTest() throws ApiException {
        NewAdditionalCost body = null;
        AccountAdditionalCost response = api.createAdditionalCost(body);

        // TODO: test validations
    }
    
    /**
     * Define a new custom attribute
     *
     * Defines a new _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on. These attributes can then be given values when creating / updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAttributeTest() throws ApiException {
        NewAttribute body = null;
        Attribute response = api.createAttribute(body);

        // TODO: test validations
    }
    
    /**
     * Create a Campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCampaignTest() throws ApiException {
        Integer applicationId = null;
        NewCampaign body = null;
        Campaign response = api.createCampaign(applicationId, body);

        // TODO: test validations
    }
    
    /**
     * Create Coupons
     *
     * Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCouponsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        NewCoupons body = null;
        String silent = null;
        InlineResponse2004 response = api.createCoupons(applicationId, campaignId, body, silent);

        // TODO: test validations
    }
    
    /**
     * Create Coupons for Multiple Recipients
     *
     * Create coupons according to some pattern for up to 1000 recipients.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCouponsForMultipleRecipientsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        NewCouponsForMultipleRecipients body = null;
        String silent = null;
        InlineResponse2004 response = api.createCouponsForMultipleRecipients(applicationId, campaignId, body, silent);

        // TODO: test validations
    }
    
    /**
     * Request a password reset
     *
     * Sends an email with a password recovery link to the email of an existing account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPasswordRecoveryEmailTest() throws ApiException {
        NewPasswordEmail body = null;
        NewPasswordEmail response = api.createPasswordRecoveryEmail(body);

        // TODO: test validations
    }
    
    /**
     * Create a Ruleset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRulesetTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        NewRuleset body = null;
        Ruleset response = api.createRuleset(applicationId, campaignId, body);

        // TODO: test validations
    }
    
    /**
     * Create a Session
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSessionTest() throws ApiException {
        LoginParams body = null;
        Session response = api.createSession(body);

        // TODO: test validations
    }
    
    /**
     * Delete a Campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCampaignTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        api.deleteCampaign(applicationId, campaignId);

        // TODO: test validations
    }
    
    /**
     * Delete one Coupon
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCouponTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        String couponId = null;
        api.deleteCoupon(applicationId, campaignId, couponId);

        // TODO: test validations
    }
    
    /**
     * Delete Coupons
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCouponsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        OffsetDateTime startsAfter = null;
        OffsetDateTime startsBefore = null;
        OffsetDateTime expiresAfter = null;
        OffsetDateTime expiresBefore = null;
        String valid = null;
        String batchId = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        Boolean exactMatch = null;
        api.deleteCoupons(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);

        // TODO: test validations
    }
    
    /**
     * Delete one Referral
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteReferralTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        String referralId = null;
        api.deleteReferral(applicationId, campaignId, referralId);

        // TODO: test validations
    }
    
    /**
     * Delete a Ruleset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRulesetTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer rulesetId = null;
        api.deleteRuleset(applicationId, campaignId, rulesetId);

        // TODO: test validations
    }
    
    /**
     * Destroy a Session
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroySessionTest() throws ApiException {
        api.destroySession();

        // TODO: test validations
    }
    
    /**
     * Export Coupons to a CSV file.
     *
     * Download a file with the coupons that match the given attributes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportCouponsTest() throws ApiException {
        Integer applicationId = null;
        BigDecimal campaignId = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        String batchId = null;
        Boolean exactMatch = null;
        String dateFormat = null;
        String campaignState = null;
        File response = api.exportCoupons(applicationId, campaignId, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, dateFormat, campaignState);

        // TODO: test validations
    }
    
    /**
     * Export Customer Sessions to a CSV file.
     *
     * Download a file with the customer sessions that match the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportCustomerSessionsTest() throws ApiException {
        Integer applicationId = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String profileIntegrationId = null;
        String dateFormat = null;
        String customerSessionState = null;
        File response = api.exportCustomerSessions(applicationId, createdBefore, createdAfter, profileIntegrationId, dateFormat, customerSessionState);

        // TODO: test validations
    }
    
    /**
     * Export triggered Effects to a CSV file.
     *
     * Download a file with the triggered effects that match the given attributes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportEffectsTest() throws ApiException {
        Integer applicationId = null;
        BigDecimal campaignId = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String dateFormat = null;
        File response = api.exportEffects(applicationId, campaignId, createdBefore, createdAfter, dateFormat);

        // TODO: test validations
    }
    
    /**
     * Export customer loyalty balance to a CSV file
     *
     * Download a file with the balance of each customer in the loyalty program
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportLoyaltyBalanceTest() throws ApiException {
        String programID = null;
        File response = api.exportLoyaltyBalance(programID);

        // TODO: test validations
    }
    
    /**
     * Get access logs for application (with total count)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccessLogsTest() throws ApiException {
        Integer applicationId = null;
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        String path = null;
        String method = null;
        String status = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse2009 response = api.getAccessLogs(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get access logs for application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccessLogsWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        String path = null;
        String method = null;
        String status = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20010 response = api.getAccessLogsWithoutTotalCount(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get Account Details
     *
     * Return the details of your companies Talon.One account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        Integer accountId = null;
        Account response = api.getAccount(accountId);

        // TODO: test validations
    }
    
    /**
     * Get Account Analytics
     *
     * Return the analytics of your companies Talon.One account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountAnalyticsTest() throws ApiException {
        Integer accountId = null;
        AccountAnalytics response = api.getAccountAnalytics(accountId);

        // TODO: test validations
    }
    
    /**
     * Get an additional cost
     *
     * Returns additional cost for the account by its id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAdditionalCostTest() throws ApiException {
        Integer additionalCostId = null;
        AccountAdditionalCost response = api.getAdditionalCost(additionalCostId);

        // TODO: test validations
    }
    
    /**
     * List additional costs
     *
     * Returns all the defined additional costs for the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAdditionalCostsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20022 response = api.getAdditionalCosts(pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get all access logs
     *
     * Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllAccessLogsTest() throws ApiException {
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        String path = null;
        String method = null;
        String status = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse2009 response = api.getAllAccessLogs(rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get all roles.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllRolesTest() throws ApiException {
        InlineResponse20030 response = api.getAllRoles();

        // TODO: test validations
    }
    
    /**
     * Get Application
     *
     * Get the application specified by the ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationTest() throws ApiException {
        Integer applicationId = null;
        Application response = api.getApplication(applicationId);

        // TODO: test validations
    }
    
    /**
     * Get report of health of application API
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationApiHealthTest() throws ApiException {
        Integer applicationId = null;
        ApplicationApiHealth response = api.getApplicationApiHealth(applicationId);

        // TODO: test validations
    }
    
    /**
     * Get Application Customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationCustomerTest() throws ApiException {
        Integer applicationId = null;
        Integer customerId = null;
        ApplicationCustomer response = api.getApplicationCustomer(applicationId, customerId);

        // TODO: test validations
    }
    
    /**
     * List Application Customers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationCustomersTest() throws ApiException {
        Integer applicationId = null;
        String integrationId = null;
        Integer pageSize = null;
        Integer skip = null;
        Boolean withTotalResultSize = null;
        InlineResponse20012 response = api.getApplicationCustomers(applicationId, integrationId, pageSize, skip, withTotalResultSize);

        // TODO: test validations
    }
    
    /**
     * Get a list of the customer profiles that match the given attributes (with total count)
     *
     * Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#CustomerProfile 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationCustomersByAttributesTest() throws ApiException {
        ApplicationCustomerSearch body = null;
        InlineResponse20013 response = api.getApplicationCustomersByAttributes(body);

        // TODO: test validations
    }
    
    /**
     * List Applications Event Types
     *
     * Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationEventTypesTest() throws ApiException {
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20019 response = api.getApplicationEventTypes(applicationId, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * List Applications Events (with total count)
     *
     * Lists all events recorded for an application. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationEventsTest() throws ApiException {
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String type = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String session = null;
        String profile = null;
        String customerName = null;
        String customerEmail = null;
        String couponCode = null;
        String referralCode = null;
        String ruleQuery = null;
        String campaignQuery = null;
        InlineResponse20017 response = api.getApplicationEvents(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, couponCode, referralCode, ruleQuery, campaignQuery);

        // TODO: test validations
    }
    
    /**
     * List Applications Events
     *
     * Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationEventsWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String type = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String session = null;
        String profile = null;
        String customerName = null;
        String customerEmail = null;
        String couponCode = null;
        String referralCode = null;
        String ruleQuery = null;
        String campaignQuery = null;
        InlineResponse20018 response = api.getApplicationEventsWithoutTotalCount(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, couponCode, referralCode, ruleQuery, campaignQuery);

        // TODO: test validations
    }
    
    /**
     * Get Application Session
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationSessionTest() throws ApiException {
        Integer applicationId = null;
        Integer sessionId = null;
        ApplicationSession response = api.getApplicationSession(applicationId, sessionId);

        // TODO: test validations
    }
    
    /**
     * List Application Sessions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationSessionsTest() throws ApiException {
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String profile = null;
        String state = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String coupon = null;
        String referral = null;
        String integrationId = null;
        InlineResponse20016 response = api.getApplicationSessions(applicationId, pageSize, skip, sort, profile, state, createdBefore, createdAfter, coupon, referral, integrationId);

        // TODO: test validations
    }
    
    /**
     * List Applications
     *
     * List all application in the current account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse2001 response = api.getApplications(pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get a custom attribute
     *
     * Returns custom attribute for the account by its id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttributeTest() throws ApiException {
        Integer attributeId = null;
        Attribute response = api.getAttribute(attributeId);

        // TODO: test validations
    }
    
    /**
     * List custom attributes
     *
     * Returns all the defined custom attributes for the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttributesTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20021 response = api.getAttributes(pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get all audiences
     *
     * Get All audiences created in the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAudiencesTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        Boolean withTotalResultSize = null;
        InlineResponse20020 response = api.getAudiences(pageSize, skip, sort, withTotalResultSize);

        // TODO: test validations
    }
    
    /**
     * Get a Campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Campaign response = api.getCampaign(applicationId, campaignId);

        // TODO: test validations
    }
    
    /**
     * Get analytics of campaigns
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignAnalyticsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        String granularity = null;
        InlineResponse20011 response = api.getCampaignAnalytics(applicationId, campaignId, rangeStart, rangeEnd, granularity);

        // TODO: test validations
    }
    
    /**
     * Get a list of all campaigns that match the given attributes
     *
     * Gets a list of all the campaigns that exactly match a set of attributes. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignByAttributesTest() throws ApiException {
        Integer applicationId = null;
        CampaignSearch body = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String campaignState = null;
        InlineResponse2002 response = api.getCampaignByAttributes(applicationId, body, pageSize, skip, sort, campaignState);

        // TODO: test validations
    }
    
    /**
     * List your Campaigns
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignsTest() throws ApiException {
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String campaignState = null;
        String name = null;
        String tags = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        Integer campaignGroupId = null;
        InlineResponse2002 response = api.getCampaigns(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter, campaignGroupId);

        // TODO: test validations
    }
    
    /**
     * Get audit log for an account
     *
     * Get list of changes caused by API calls for an account. Only accessible for admins.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChangesTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        Integer applicationId = null;
        String entityPath = null;
        Integer userId = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        Boolean withTotalResultSize = null;
        Boolean includeOld = null;
        InlineResponse20028 response = api.getChanges(pageSize, skip, sort, applicationId, entityPath, userId, createdBefore, createdAfter, withTotalResultSize, includeOld);

        // TODO: test validations
    }
    
    /**
     * List Coupons (with total count)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCouponsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        OffsetDateTime startsAfter = null;
        OffsetDateTime startsBefore = null;
        OffsetDateTime expiresAfter = null;
        OffsetDateTime expiresBefore = null;
        String valid = null;
        String batchId = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        Boolean exactMatch = null;
        InlineResponse2004 response = api.getCoupons(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);

        // TODO: test validations
    }
    
    /**
     * Get a list of the coupons that match the given attributes
     *
     * Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCouponsByAttributesTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        CouponSearch body = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        Boolean exactMatch = null;
        String batchId = null;
        InlineResponse2004 response = api.getCouponsByAttributes(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);

        // TODO: test validations
    }
    
    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application (with total count)
     *
     * Gets a list of all the coupons with attributes matching the query criteria Application wide 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCouponsByAttributesApplicationWideTest() throws ApiException {
        Integer applicationId = null;
        CouponSearch body = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        String batchId = null;
        Boolean exactMatch = null;
        String campaignState = null;
        InlineResponse2004 response = api.getCouponsByAttributesApplicationWide(applicationId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);

        // TODO: test validations
    }
    
    /**
     * List Coupons
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCouponsWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        String batchId = null;
        Boolean exactMatch = null;
        InlineResponse2005 response = api.getCouponsWithoutTotalCount(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch);

        // TODO: test validations
    }
    
    /**
     * Get Activity Report for Single Customer
     *
     * Fetch summary report for single application customer based on a time range
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerActivityReportTest() throws ApiException {
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        Integer applicationId = null;
        Integer customerId = null;
        Integer pageSize = null;
        Integer skip = null;
        CustomerActivityReport response = api.getCustomerActivityReport(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip);

        // TODO: test validations
    }
    
    /**
     * Get Activity Reports for Application Customers (with total count)
     *
     * Fetch summary reports for all application customers based on a time range
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerActivityReportsTest() throws ApiException {
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String name = null;
        String integrationId = null;
        String campaignName = null;
        String advocateName = null;
        InlineResponse20014 response = api.getCustomerActivityReports(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);

        // TODO: test validations
    }
    
    /**
     * Get Activity Reports for Application Customers
     *
     * Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerActivityReportsWithoutTotalCountTest() throws ApiException {
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String name = null;
        String integrationId = null;
        String campaignName = null;
        String advocateName = null;
        InlineResponse20015 response = api.getCustomerActivityReportsWithoutTotalCount(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);

        // TODO: test validations
    }
    
    /**
     * Get Analytics Report for a Customer
     *
     * Fetch analytics for single application customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerAnalyticsTest() throws ApiException {
        Integer applicationId = null;
        Integer customerId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        CustomerAnalytics response = api.getCustomerAnalytics(applicationId, customerId, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get Customer Profile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerProfileTest() throws ApiException {
        Integer customerId = null;
        ApplicationCustomer response = api.getCustomerProfile(customerId);

        // TODO: test validations
    }
    
    /**
     * List Customer Profiles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerProfilesTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        InlineResponse20013 response = api.getCustomerProfiles(pageSize, skip);

        // TODO: test validations
    }
    
    /**
     * Get a list of the customer profiles that match the given attributes
     *
     * Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#CustomerProfile 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomersByAttributesTest() throws ApiException {
        ApplicationCustomerSearch body = null;
        Integer pageSize = null;
        Integer skip = null;
        InlineResponse20013 response = api.getCustomersByAttributes(body, pageSize, skip);

        // TODO: test validations
    }
    
    /**
     * List Event Types
     *
     * Fetch all event type definitions for your account. Each event type can be 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventTypesTest() throws ApiException {
        String applicationIds = null;
        String name = null;
        Boolean includeOldVersions = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20026 response = api.getEventTypes(applicationIds, name, includeOldVersions, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get Exports
     *
     * Get a list of all past exports 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExportsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        Integer applicationId = null;
        Integer campaignId = null;
        String entity = null;
        InlineResponse20029 response = api.getExports(pageSize, skip, applicationId, campaignId, entity);

        // TODO: test validations
    }
    
    /**
     * get the Loyalty Ledger for this integrationID
     *
     * Get the Loyalty Ledger for this profile integration ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoyaltyPointsTest() throws ApiException {
        String programID = null;
        String integrationID = null;
        LoyaltyLedger response = api.getLoyaltyPoints(programID, integrationID);

        // TODO: test validations
    }
    
    /**
     * Get a loyalty program
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoyaltyProgramTest() throws ApiException {
        String programID = null;
        LoyaltyProgram response = api.getLoyaltyProgram(programID);

        // TODO: test validations
    }
    
    /**
     * List all loyalty Programs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoyaltyProgramsTest() throws ApiException {
        InlineResponse2008 response = api.getLoyaltyPrograms();

        // TODO: test validations
    }
    
    /**
     * Get loyalty program statistics by loyalty program ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoyaltyStatisticsTest() throws ApiException {
        String programID = null;
        LoyaltyStatistics response = api.getLoyaltyStatistics(programID);

        // TODO: test validations
    }
    
    /**
     * List Referrals (with total count)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReferralsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String code = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        String advocate = null;
        InlineResponse2006 response = api.getReferrals(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);

        // TODO: test validations
    }
    
    /**
     * List Referrals
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReferralsWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String code = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        String advocate = null;
        InlineResponse2007 response = api.getReferralsWithoutTotalCount(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);

        // TODO: test validations
    }
    
    /**
     * Get information for the specified role.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoleTest() throws ApiException {
        Integer roleId = null;
        Role response = api.getRole(roleId);

        // TODO: test validations
    }
    
    /**
     * Get a Ruleset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRulesetTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer rulesetId = null;
        Ruleset response = api.getRuleset(applicationId, campaignId, rulesetId);

        // TODO: test validations
    }
    
    /**
     * List Campaign Rulesets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRulesetsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse2003 response = api.getRulesets(applicationId, campaignId, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get a single User
     *
     * Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        Integer userId = null;
        User response = api.getUser(userId);

        // TODO: test validations
    }
    
    /**
     * List Users in your account
     *
     * Retrieve all users in your account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20027 response = api.getUsers(pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get Webhook
     *
     * Returns an webhook by its id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookTest() throws ApiException {
        Integer webhookId = null;
        Webhook response = api.getWebhook(webhookId);

        // TODO: test validations
    }
    
    /**
     * List Webhook activation Log Entries
     *
     * Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookActivationLogsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String integrationRequestUuid = null;
        BigDecimal webhookId = null;
        BigDecimal applicationId = null;
        BigDecimal campaignId = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        InlineResponse20024 response = api.getWebhookActivationLogs(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter);

        // TODO: test validations
    }
    
    /**
     * List Webhook Log Entries
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookLogsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String status = null;
        BigDecimal webhookId = null;
        BigDecimal applicationId = null;
        BigDecimal campaignId = null;
        String requestUuid = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        InlineResponse20025 response = api.getWebhookLogs(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter);

        // TODO: test validations
    }
    
    /**
     * List Webhooks
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhooksTest() throws ApiException {
        String applicationIds = null;
        String sort = null;
        Integer pageSize = null;
        Integer skip = null;
        InlineResponse20023 response = api.getWebhooks(applicationIds, sort, pageSize, skip);

        // TODO: test validations
    }
    
    /**
     * Deduct points in a certain loyalty program for the specified customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeLoyaltyPointsTest() throws ApiException {
        String programID = null;
        String integrationID = null;
        LoyaltyPoints body = null;
        api.removeLoyaltyPoints(programID, integrationID, body);

        // TODO: test validations
    }
    
    /**
     * Reset password
     *
     * Consumes the supplied password reset token and updates the password for the associated account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetPasswordTest() throws ApiException {
        NewPassword body = null;
        NewPassword response = api.resetPassword(body);

        // TODO: test validations
    }
    
    /**
     * Get a list of the coupons that match the given attributes (with total count)
     *
     * Gets a list of all the coupons with attributes matching the query criteria 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchCouponsAdvancedTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Object body = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        Boolean exactMatch = null;
        String batchId = null;
        InlineResponse2004 response = api.searchCouponsAdvanced(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);

        // TODO: test validations
    }
    
    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application (with total count)
     *
     * Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchCouponsAdvancedApplicationWideTest() throws ApiException {
        Integer applicationId = null;
        Object body = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        String batchId = null;
        Boolean exactMatch = null;
        String campaignState = null;
        InlineResponse2004 response = api.searchCouponsAdvancedApplicationWide(applicationId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);

        // TODO: test validations
    }
    
    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application
     *
     * Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchCouponsAdvancedApplicationWideWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        Object body = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        String batchId = null;
        Boolean exactMatch = null;
        String campaignState = null;
        InlineResponse2005 response = api.searchCouponsAdvancedApplicationWideWithoutTotalCount(applicationId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);

        // TODO: test validations
    }
    
    /**
     * Get a list of the coupons that match the given attributes
     *
     * Gets a list of all the coupons with attributes matching the query criteria 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchCouponsAdvancedWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Object body = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        Boolean exactMatch = null;
        String batchId = null;
        InlineResponse2005 response = api.searchCouponsAdvancedWithoutTotalCount(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);

        // TODO: test validations
    }
    
    /**
     * Update an additional cost
     *
     * Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAdditionalCostTest() throws ApiException {
        Integer additionalCostId = null;
        NewAdditionalCost body = null;
        AccountAdditionalCost response = api.updateAdditionalCost(additionalCostId, body);

        // TODO: test validations
    }
    
    /**
     * Update a custom attribute
     *
     * Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAttributeTest() throws ApiException {
        Integer attributeId = null;
        NewAttribute body = null;
        Attribute response = api.updateAttribute(attributeId, body);

        // TODO: test validations
    }
    
    /**
     * Update a Campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCampaignTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        UpdateCampaign body = null;
        Campaign response = api.updateCampaign(applicationId, campaignId, body);

        // TODO: test validations
    }
    
    /**
     * Update a Coupon
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCouponTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        String couponId = null;
        UpdateCoupon body = null;
        Coupon response = api.updateCoupon(applicationId, campaignId, couponId, body);

        // TODO: test validations
    }
    
    /**
     * Update a Batch of Coupons
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCouponBatchTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        UpdateCouponBatch body = null;
        api.updateCouponBatch(applicationId, campaignId, body);

        // TODO: test validations
    }
    
    /**
     * Update a Ruleset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRulesetTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer rulesetId = null;
        NewRuleset body = null;
        Ruleset response = api.updateRuleset(applicationId, campaignId, rulesetId, body);

        // TODO: test validations
    }
    
}
