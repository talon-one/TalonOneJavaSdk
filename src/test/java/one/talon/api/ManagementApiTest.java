/*
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.api;

import one.talon.ApiException;
import one.talon.model.Account;
import one.talon.model.AccountAdditionalCost;
import one.talon.model.AccountAnalytics;
import one.talon.model.Application;
import one.talon.model.ApplicationApiHealth;
import one.talon.model.ApplicationCustomer;
import one.talon.model.ApplicationSession;
import one.talon.model.AsyncCouponCreationResponse;
import one.talon.model.Attribute;
import java.math.BigDecimal;
import one.talon.model.Campaign;
import one.talon.model.CampaignCopy;
import one.talon.model.CampaignSearch;
import one.talon.model.Collection;
import one.talon.model.Coupon;
import one.talon.model.CreateTemplateCampaign;
import one.talon.model.CreateTemplateCampaignResponse;
import one.talon.model.CustomerActivityReport;
import one.talon.model.CustomerAnalytics;
import one.talon.model.CustomerProfile;
import one.talon.model.CustomerProfileSearchQuery;
import one.talon.model.ErrorResponse;
import one.talon.model.ErrorResponseWithStatus;
import one.talon.model.InlineResponse2001;
import one.talon.model.InlineResponse20010;
import one.talon.model.InlineResponse20011;
import one.talon.model.InlineResponse20012;
import one.talon.model.InlineResponse20013;
import one.talon.model.InlineResponse20014;
import one.talon.model.InlineResponse20015;
import one.talon.model.InlineResponse20016;
import one.talon.model.InlineResponse20017;
import one.talon.model.InlineResponse20018;
import one.talon.model.InlineResponse20019;
import one.talon.model.InlineResponse2002;
import one.talon.model.InlineResponse20020;
import one.talon.model.InlineResponse20021;
import one.talon.model.InlineResponse20022;
import one.talon.model.InlineResponse20023;
import one.talon.model.InlineResponse20024;
import one.talon.model.InlineResponse20025;
import one.talon.model.InlineResponse20026;
import one.talon.model.InlineResponse20027;
import one.talon.model.InlineResponse20028;
import one.talon.model.InlineResponse20029;
import one.talon.model.InlineResponse2003;
import one.talon.model.InlineResponse20030;
import one.talon.model.InlineResponse20031;
import one.talon.model.InlineResponse2004;
import one.talon.model.InlineResponse2005;
import one.talon.model.InlineResponse2006;
import one.talon.model.InlineResponse2007;
import one.talon.model.InlineResponse2008;
import one.talon.model.InlineResponse2009;
import one.talon.model.LoginParams;
import one.talon.model.LoyaltyLedger;
import one.talon.model.LoyaltyPoints;
import one.talon.model.LoyaltyProgram;
import one.talon.model.LoyaltyStatistics;
import one.talon.model.ModelImport;
import one.talon.model.NewAdditionalCost;
import one.talon.model.NewAttribute;
import one.talon.model.NewCampaignCollection;
import one.talon.model.NewCollection;
import one.talon.model.NewCouponCreationJob;
import one.talon.model.NewCoupons;
import one.talon.model.NewCouponsForMultipleRecipients;
import one.talon.model.NewPassword;
import one.talon.model.NewPasswordEmail;
import org.threeten.bp.OffsetDateTime;
import one.talon.model.Referral;
import one.talon.model.Role;
import one.talon.model.Ruleset;
import one.talon.model.Session;
import one.talon.model.UpdateCampaign;
import one.talon.model.UpdateCampaignCollection;
import one.talon.model.UpdateCollection;
import one.talon.model.UpdateCoupon;
import one.talon.model.UpdateCouponBatch;
import one.talon.model.UpdateReferral;
import one.talon.model.User;
import one.talon.model.Webhook;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementApi
 */
@Ignore
public class ManagementApiTest {

    private final ManagementApi api = new ManagementApi();

    
    /**
     * Add points in loyalty program for given customer
     *
     * Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLoyaltyPointsTest() throws ApiException {
        String loyaltyProgramId = null;
        String integrationId = null;
        LoyaltyPoints body = null;
        api.addLoyaltyPoints(loyaltyProgramId, integrationId, body);

        // TODO: test validations
    }
    
    /**
     * Copy the campaign into the specified application
     *
     * Copy the campaign into all specified application.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyCampaignToApplicationsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        CampaignCopy body = null;
        InlineResponse2002 response = api.copyCampaignToApplications(applicationId, campaignId, body);

        // TODO: test validations
    }
    
    /**
     * Create account-level collection
     *
     * Create account-level collection.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAccountCollectionTest() throws ApiException {
        NewCollection body = null;
        Collection response = api.createAccountCollection(body);

        // TODO: test validations
    }
    
    /**
     * Create additional cost
     *
     * Create an [additional cost](/docs/product/account/dev-tools/managing-additional-costs/).  These additional costs are shared across all applications in your account, and are never required. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAdditionalCostTest() throws ApiException {
        NewAdditionalCost body = null;
        AccountAdditionalCost response = api.createAdditionalCost(body);

        // TODO: test validations
    }
    
    /**
     * Create custom attribute
     *
     * Create a _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAttributeTest() throws ApiException {
        NewAttribute body = null;
        Attribute response = api.createAttribute(body);

        // TODO: test validations
    }
    
    /**
     * Create campaign from campaign template
     *
     * Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCampaignFromTemplateTest() throws ApiException {
        Integer applicationId = null;
        CreateTemplateCampaign body = null;
        CreateTemplateCampaignResponse response = api.createCampaignFromTemplate(applicationId, body);

        // TODO: test validations
    }
    
    /**
     * Create collection
     *
     * Create a collection.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCollectionTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        NewCampaignCollection body = null;
        Collection response = api.createCollection(applicationId, campaignId, body);

        // TODO: test validations
    }
    
    /**
     * Create coupons
     *
     * Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCouponsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        NewCoupons body = null;
        String silent = null;
        InlineResponse2004 response = api.createCoupons(applicationId, campaignId, body, silent);

        // TODO: test validations
    }
    
    /**
     * Create coupons asynchronously
     *
     * Create any number of coupons from 20,001 to 5,000,000.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCouponsAsyncTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        NewCouponCreationJob body = null;
        AsyncCouponCreationResponse response = api.createCouponsAsync(applicationId, campaignId, body);

        // TODO: test validations
    }
    
    /**
     * Create coupons for multiple recipients
     *
     * Create coupons according to some pattern for up to 1000 recipients.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCouponsForMultipleRecipientsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        NewCouponsForMultipleRecipients body = null;
        String silent = null;
        InlineResponse2004 response = api.createCouponsForMultipleRecipients(applicationId, campaignId, body, silent);

        // TODO: test validations
    }
    
    /**
     * Request a password reset
     *
     * Send an email with a password recovery link to the email address of an existing account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPasswordRecoveryEmailTest() throws ApiException {
        NewPasswordEmail body = null;
        NewPasswordEmail response = api.createPasswordRecoveryEmail(body);

        // TODO: test validations
    }
    
    /**
     * Create session
     *
     * Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  **Note:** You can also use your browser&#39;s developer&#39;s console to [display your token](https://docs.talon.one/docs/dev/tutorials/receiving-loyalty-ledger-braze/#extracting-the-session-token) when you log into the Campaign Manager.  In this case, keep in mind that logging out destroys the token. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSessionTest() throws ApiException {
        LoginParams body = null;
        Session response = api.createSession(body);

        // TODO: test validations
    }
    
    /**
     * Delete account-level collection
     *
     * Delete the given account-level collection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAccountCollectionTest() throws ApiException {
        Integer collectionId = null;
        api.deleteAccountCollection(collectionId);

        // TODO: test validations
    }
    
    /**
     * Delete campaign
     *
     * Delete the given campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCampaignTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        api.deleteCampaign(applicationId, campaignId);

        // TODO: test validations
    }
    
    /**
     * Delete collection
     *
     * Delete the given collection.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer collectionId = null;
        api.deleteCollection(applicationId, campaignId, collectionId);

        // TODO: test validations
    }
    
    /**
     * Delete coupon
     *
     * Delete the specified coupon.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCouponTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        String couponId = null;
        api.deleteCoupon(applicationId, campaignId, couponId);

        // TODO: test validations
    }
    
    /**
     * Delete coupons
     *
     * Deletes all the coupons matching the specified criteria.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCouponsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        OffsetDateTime startsAfter = null;
        OffsetDateTime startsBefore = null;
        OffsetDateTime expiresAfter = null;
        OffsetDateTime expiresBefore = null;
        String valid = null;
        String batchId = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        Boolean exactMatch = null;
        api.deleteCoupons(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);

        // TODO: test validations
    }
    
    /**
     * Delete loyalty card
     *
     * Delete the specified loyalty card.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoyaltyCardTest() throws ApiException {
        Integer loyaltyProgramId = null;
        String loyaltyCardIdentifier = null;
        api.deleteLoyaltyCard(loyaltyProgramId, loyaltyCardIdentifier);

        // TODO: test validations
    }
    
    /**
     * Delete referral
     *
     * Delete the specified referral.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteReferralTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        String referralId = null;
        api.deleteReferral(applicationId, campaignId, referralId);

        // TODO: test validations
    }
    
    /**
     * Destroy session
     *
     * Destroys the session.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void destroySessionTest() throws ApiException {
        api.destroySession();

        // TODO: test validations
    }
    
    /**
     * Export account-level collection items to CSV file
     *
     * Download a file containing an account-level collection&#39;s items.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportAccountCollectionItemsTest() throws ApiException {
        Integer collectionId = null;
        String response = api.exportAccountCollectionItems(collectionId);

        // TODO: test validations
    }
    
    /**
     * Export a collection&#39;s items to CSV file
     *
     * Download a file containing a collection&#39;s items.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportCollectionItemsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer collectionId = null;
        String response = api.exportCollectionItems(applicationId, campaignId, collectionId);

        // TODO: test validations
    }
    
    /**
     * Export coupons to CSV file
     *
     * Download a file containing the coupons that match the given properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportCouponsTest() throws ApiException {
        Integer applicationId = null;
        BigDecimal campaignId = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        String batchId = null;
        Boolean exactMatch = null;
        String dateFormat = null;
        String campaignState = null;
        String response = api.exportCoupons(applicationId, campaignId, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, dateFormat, campaignState);

        // TODO: test validations
    }
    
    /**
     * Export customer sessions to CSV file
     *
     * Download a file containing the customer sessions that match the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportCustomerSessionsTest() throws ApiException {
        Integer applicationId = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String profileIntegrationId = null;
        String dateFormat = null;
        String customerSessionState = null;
        String response = api.exportCustomerSessions(applicationId, createdBefore, createdAfter, profileIntegrationId, dateFormat, customerSessionState);

        // TODO: test validations
    }
    
    /**
     * Export triggered effects to CSV file
     *
     * Download a file containing the triggered effects that match the given attributes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportEffectsTest() throws ApiException {
        Integer applicationId = null;
        BigDecimal campaignId = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String dateFormat = null;
        String response = api.exportEffects(applicationId, campaignId, createdBefore, createdAfter, dateFormat);

        // TODO: test validations
    }
    
    /**
     * Export customer loyalty balance to a CSV file
     *
     * Download a file with the balance of each customer in the loyalty program.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportLoyaltyBalanceTest() throws ApiException {
        String loyaltyProgramId = null;
        String response = api.exportLoyaltyBalance(loyaltyProgramId);

        // TODO: test validations
    }
    
    /**
     * Export a customer&#39;s loyalty ledger log to CSV file
     *
     * Download a file with a customer&#39;s ledger log in the loyalty program
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportLoyaltyLedgerTest() throws ApiException {
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        String loyaltyProgramId = null;
        String integrationId = null;
        String dateFormat = null;
        String response = api.exportLoyaltyLedger(rangeStart, rangeEnd, loyaltyProgramId, integrationId, dateFormat);

        // TODO: test validations
    }
    
    /**
     * Export referrals to CSV file
     *
     * Download a file containing the referrals that match the given parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportReferralsTest() throws ApiException {
        Integer applicationId = null;
        BigDecimal campaignId = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        String batchId = null;
        String dateFormat = null;
        String response = api.exportReferrals(applicationId, campaignId, createdBefore, createdAfter, valid, usable, batchId, dateFormat);

        // TODO: test validations
    }
    
    /**
     * Get access logs for Application
     *
     * Retrieve the list of API calls to this Application matching the specified criteria. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccessLogsWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        String path = null;
        String method = null;
        String status = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20010 response = api.getAccessLogsWithoutTotalCount(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get account details
     *
     * Return the details of your companies Talon.One account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        Integer accountId = null;
        Account response = api.getAccount(accountId);

        // TODO: test validations
    }
    
    /**
     * Get account analytics
     *
     * Return the analytics of your Talon.One account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountAnalyticsTest() throws ApiException {
        Integer accountId = null;
        AccountAnalytics response = api.getAccountAnalytics(accountId);

        // TODO: test validations
    }
    
    /**
     * Get account-level collection
     *
     * Retrieve the given account-level collection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountCollectionTest() throws ApiException {
        Integer collectionId = null;
        Collection response = api.getAccountCollection(collectionId);

        // TODO: test validations
    }
    
    /**
     * Get additional cost
     *
     * Returns the additional cost. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAdditionalCostTest() throws ApiException {
        Integer additionalCostId = null;
        AccountAdditionalCost response = api.getAdditionalCost(additionalCostId);

        // TODO: test validations
    }
    
    /**
     * List additional costs
     *
     * Returns all the defined additional costs for the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAdditionalCostsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20023 response = api.getAdditionalCosts(pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * List access logs
     *
     * Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllAccessLogsTest() throws ApiException {
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        String path = null;
        String method = null;
        String status = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20011 response = api.getAllAccessLogs(rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * List roles
     *
     * List all roles.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllRolesTest() throws ApiException {
        InlineResponse20031 response = api.getAllRoles();

        // TODO: test validations
    }
    
    /**
     * Get application
     *
     * Get the application specified by the ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationTest() throws ApiException {
        Integer applicationId = null;
        Application response = api.getApplication(applicationId);

        // TODO: test validations
    }
    
    /**
     * Get report of health of application API
     *
     * Display the health of the application and show the last time the Application was used. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationApiHealthTest() throws ApiException {
        Integer applicationId = null;
        ApplicationApiHealth response = api.getApplicationApiHealth(applicationId);

        // TODO: test validations
    }
    
    /**
     * Get application&#39;s customer
     *
     * Retrieve the customers of the specified application. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationCustomerTest() throws ApiException {
        Integer applicationId = null;
        Integer customerId = null;
        ApplicationCustomer response = api.getApplicationCustomer(applicationId, customerId);

        // TODO: test validations
    }
    
    /**
     * List friends referred by customer profile
     *
     * List the friends referred by the specified customer profile in this Application. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationCustomerFriendsTest() throws ApiException {
        Integer applicationId = null;
        String integrationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        Boolean withTotalResultSize = null;
        InlineResponse20021 response = api.getApplicationCustomerFriends(applicationId, integrationId, pageSize, skip, sort, withTotalResultSize);

        // TODO: test validations
    }
    
    /**
     * List application&#39;s customers
     *
     * List all the customers of the specified application.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationCustomersTest() throws ApiException {
        Integer applicationId = null;
        String integrationId = null;
        Integer pageSize = null;
        Integer skip = null;
        Boolean withTotalResultSize = null;
        InlineResponse20013 response = api.getApplicationCustomers(applicationId, integrationId, pageSize, skip, withTotalResultSize);

        // TODO: test validations
    }
    
    /**
     * List application customers matching the given attributes
     *
     * Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationCustomersByAttributesTest() throws ApiException {
        Integer applicationId = null;
        CustomerProfileSearchQuery body = null;
        Integer pageSize = null;
        Integer skip = null;
        Boolean withTotalResultSize = null;
        InlineResponse20014 response = api.getApplicationCustomersByAttributes(applicationId, body, pageSize, skip, withTotalResultSize);

        // TODO: test validations
    }
    
    /**
     * List Applications event types
     *
     * Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/#operation/trackEvent) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationEventTypesTest() throws ApiException {
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20019 response = api.getApplicationEventTypes(applicationId, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * List Applications events
     *
     * Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationEventsWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String type = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String session = null;
        String profile = null;
        String customerName = null;
        String customerEmail = null;
        String couponCode = null;
        String referralCode = null;
        String ruleQuery = null;
        String campaignQuery = null;
        InlineResponse20018 response = api.getApplicationEventsWithoutTotalCount(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, couponCode, referralCode, ruleQuery, campaignQuery);

        // TODO: test validations
    }
    
    /**
     * Get Application session
     *
     * Get the details of the given session. You can list the sessions with the [List Application sessions](#operation/getApplicationSessions) endpoint. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationSessionTest() throws ApiException {
        Integer applicationId = null;
        Integer sessionId = null;
        ApplicationSession response = api.getApplicationSession(applicationId, sessionId);

        // TODO: test validations
    }
    
    /**
     * List Application sessions
     *
     * List all the sessions of the specified Application. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationSessionsTest() throws ApiException {
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String profile = null;
        String state = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String coupon = null;
        String referral = null;
        String integrationId = null;
        InlineResponse20017 response = api.getApplicationSessions(applicationId, pageSize, skip, sort, profile, state, createdBefore, createdAfter, coupon, referral, integrationId);

        // TODO: test validations
    }
    
    /**
     * List applications
     *
     * List all applications in the current account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse2001 response = api.getApplications(pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get custom attribute
     *
     * Returns custom attribute for the account by its id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttributeTest() throws ApiException {
        Integer attributeId = null;
        Attribute response = api.getAttribute(attributeId);

        // TODO: test validations
    }
    
    /**
     * List custom attributes
     *
     * Returns all the defined custom attributes for the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttributesTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String entity = null;
        InlineResponse20022 response = api.getAttributes(pageSize, skip, sort, entity);

        // TODO: test validations
    }
    
    /**
     * List audiences
     *
     * Get All audiences created in the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAudiencesTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        Boolean withTotalResultSize = null;
        InlineResponse20020 response = api.getAudiences(pageSize, skip, sort, withTotalResultSize);

        // TODO: test validations
    }
    
    /**
     * Get campaign
     *
     * Retrieve the given campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Campaign response = api.getCampaign(applicationId, campaignId);

        // TODO: test validations
    }
    
    /**
     * Get analytics of campaigns
     *
     * Retrieve statistical data about the performance of the given campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignAnalyticsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        String granularity = null;
        InlineResponse20012 response = api.getCampaignAnalytics(applicationId, campaignId, rangeStart, rangeEnd, granularity);

        // TODO: test validations
    }
    
    /**
     * List campaigns that match the given attributes
     *
     * Get a list of all the campaigns that match a set of attributes. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignByAttributesTest() throws ApiException {
        Integer applicationId = null;
        CampaignSearch body = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String campaignState = null;
        InlineResponse2002 response = api.getCampaignByAttributes(applicationId, body, pageSize, skip, sort, campaignState);

        // TODO: test validations
    }
    
    /**
     * List campaigns
     *
     * List the campaigns of the specified application that match your filter criteria. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignsTest() throws ApiException {
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String campaignState = null;
        String name = null;
        String tags = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        Integer campaignGroupId = null;
        Integer templateId = null;
        InlineResponse2002 response = api.getCampaigns(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter, campaignGroupId, templateId);

        // TODO: test validations
    }
    
    /**
     * Get audit log for an account
     *
     * Get list of changes caused by API calls for an account. Only accessible for admins.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChangesTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        BigDecimal applicationId = null;
        String entityPath = null;
        Integer userId = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        Boolean withTotalResultSize = null;
        Boolean includeOld = null;
        InlineResponse20029 response = api.getChanges(pageSize, skip, sort, applicationId, entityPath, userId, createdBefore, createdAfter, withTotalResultSize, includeOld);

        // TODO: test validations
    }
    
    /**
     * Get collection
     *
     * Retrieve the given collection.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCollectionTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer collectionId = null;
        Collection response = api.getCollection(applicationId, campaignId, collectionId);

        // TODO: test validations
    }
    
    /**
     * List coupons
     *
     * List all the coupons matching the specified criteria. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCouponsWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        String batchId = null;
        Boolean exactMatch = null;
        InlineResponse2005 response = api.getCouponsWithoutTotalCount(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch);

        // TODO: test validations
    }
    
    /**
     * Get customer&#39;s activity report
     *
     * Fetch the summary report of a given customer in the given application, in a time range.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerActivityReportTest() throws ApiException {
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        Integer applicationId = null;
        Integer customerId = null;
        Integer pageSize = null;
        Integer skip = null;
        CustomerActivityReport response = api.getCustomerActivityReport(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip);

        // TODO: test validations
    }
    
    /**
     * Get Activity Reports for Application Customers
     *
     * Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerActivityReportsWithoutTotalCountTest() throws ApiException {
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String name = null;
        String integrationId = null;
        String campaignName = null;
        String advocateName = null;
        InlineResponse20016 response = api.getCustomerActivityReportsWithoutTotalCount(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);

        // TODO: test validations
    }
    
    /**
     * Get customer&#39;s analytics report
     *
     * Fetch analytics for a given customer in the given application.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerAnalyticsTest() throws ApiException {
        Integer applicationId = null;
        Integer customerId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        CustomerAnalytics response = api.getCustomerAnalytics(applicationId, customerId, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get customer profile
     *
     * Return the details of the specified customer profile.  **Performance tip:** You can retrieve the same information via the Integration API, which can save you extra API requests. Consider these options: - Request the customer profile to be part of the response content using   [Update Customer Session](/integration-api/operation#updateCustomerSessionV2). - Send an empty update with the [Update Customer Profile](/integration-api/#operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerProfileTest() throws ApiException {
        Integer customerId = null;
        CustomerProfile response = api.getCustomerProfile(customerId);

        // TODO: test validations
    }
    
    /**
     * List customer profiles
     *
     * List all customer profiles.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerProfilesTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        InlineResponse20015 response = api.getCustomerProfiles(pageSize, skip);

        // TODO: test validations
    }
    
    /**
     * List customer profiles matching the given attributes
     *
     * Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomersByAttributesTest() throws ApiException {
        CustomerProfileSearchQuery body = null;
        Integer pageSize = null;
        Integer skip = null;
        InlineResponse20015 response = api.getCustomersByAttributes(body, pageSize, skip);

        // TODO: test validations
    }
    
    /**
     * List event types
     *
     * Fetch all event type definitions for your account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventTypesTest() throws ApiException {
        String name = null;
        Boolean includeOldVersions = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20027 response = api.getEventTypes(name, includeOldVersions, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get exports
     *
     * List all past exports 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExportsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        BigDecimal applicationId = null;
        Integer campaignId = null;
        String entity = null;
        InlineResponse20030 response = api.getExports(pageSize, skip, applicationId, campaignId, entity);

        // TODO: test validations
    }
    
    /**
     * Get the Loyalty Ledger for this integrationID
     *
     * Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoyaltyPointsTest() throws ApiException {
        String loyaltyProgramId = null;
        String integrationId = null;
        LoyaltyLedger response = api.getLoyaltyPoints(loyaltyProgramId, integrationId);

        // TODO: test validations
    }
    
    /**
     * Get loyalty program
     *
     * Get the specified [loyalty program](https://www.talon.one/glossary/loyalty). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer profile data](/integration-api/#operation/getCustomerInventory) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoyaltyProgramTest() throws ApiException {
        Integer loyaltyProgramId = null;
        LoyaltyProgram response = api.getLoyaltyProgram(loyaltyProgramId);

        // TODO: test validations
    }
    
    /**
     * List loyalty programs
     *
     * List the loyalty programs of the account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoyaltyProgramsTest() throws ApiException {
        InlineResponse2007 response = api.getLoyaltyPrograms();

        // TODO: test validations
    }
    
    /**
     * Get loyalty program statistics by loyalty program ID
     *
     * Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points and expired points. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoyaltyStatisticsTest() throws ApiException {
        Integer loyaltyProgramId = null;
        LoyaltyStatistics response = api.getLoyaltyStatistics(loyaltyProgramId);

        // TODO: test validations
    }
    
    /**
     * List referrals
     *
     * List all referrals of the specified campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReferralsWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String code = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        String advocate = null;
        InlineResponse2006 response = api.getReferralsWithoutTotalCount(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);

        // TODO: test validations
    }
    
    /**
     * Get role
     *
     * Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoleTest() throws ApiException {
        Integer roleId = null;
        Role response = api.getRole(roleId);

        // TODO: test validations
    }
    
    /**
     * Get ruleset
     *
     * Retrieve the specified ruleset.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRulesetTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer rulesetId = null;
        Ruleset response = api.getRuleset(applicationId, campaignId, rulesetId);

        // TODO: test validations
    }
    
    /**
     * List campaign rulesets
     *
     * List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRulesetsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse2003 response = api.getRulesets(applicationId, campaignId, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get user
     *
     * Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        Integer userId = null;
        User response = api.getUser(userId);

        // TODO: test validations
    }
    
    /**
     * List users in account
     *
     * Retrieve all users in your account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20028 response = api.getUsers(pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get webhook
     *
     * Returns a webhook by its id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookTest() throws ApiException {
        Integer webhookId = null;
        Webhook response = api.getWebhook(webhookId);

        // TODO: test validations
    }
    
    /**
     * List webhook activation log entries
     *
     * Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookActivationLogsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String integrationRequestUuid = null;
        BigDecimal webhookId = null;
        BigDecimal applicationId = null;
        BigDecimal campaignId = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        InlineResponse20025 response = api.getWebhookActivationLogs(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter);

        // TODO: test validations
    }
    
    /**
     * List webhook log entries
     *
     * Retrieve all webhook log entries.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookLogsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String status = null;
        BigDecimal webhookId = null;
        BigDecimal applicationId = null;
        BigDecimal campaignId = null;
        String requestUuid = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        InlineResponse20026 response = api.getWebhookLogs(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter);

        // TODO: test validations
    }
    
    /**
     * List webhooks
     *
     * List all webhooks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhooksTest() throws ApiException {
        String applicationIds = null;
        String sort = null;
        Integer pageSize = null;
        Integer skip = null;
        InlineResponse20024 response = api.getWebhooks(applicationIds, sort, pageSize, skip);

        // TODO: test validations
    }
    
    /**
     * Import data in existing account-level collection via CSV file
     *
     * Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importAccountCollectionTest() throws ApiException {
        Integer collectionId = null;
        String upFile = null;
        ModelImport response = api.importAccountCollection(collectionId, upFile);

        // TODO: test validations
    }
    
    /**
     * Import allowed values for attribute
     *
     * Upload a CSV file containing a list of allowed values for the specified attribute. These values are also called [picklist values](/docs/product/account/dev-tools/managing-attributes/#picklist-values).  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importAllowedListTest() throws ApiException {
        Integer attributeId = null;
        String upFile = null;
        ModelImport response = api.importAllowedList(attributeId, upFile);

        // TODO: test validations
    }
    
    /**
     * Import data in existing collection via CSV file
     *
     * Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importCollectionTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer collectionId = null;
        String upFile = null;
        ModelImport response = api.importCollection(applicationId, campaignId, collectionId, upFile);

        // TODO: test validations
    }
    
    /**
     * Import coupons via CSV file
     *
     * Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object. - &#x60;discountlimit&#x60;: The amount of discounts that can be given with this coupon code.   For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the coupon entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  **Important:** Do not leave empty columns in the file.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#operation/getReservedCustomers). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importCouponsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        String upFile = null;
        ModelImport response = api.importCoupons(applicationId, campaignId, upFile);

        // TODO: test validations
    }
    
    /**
     * Import loyalty points via CSV file
     *
     * Upload a CSV file containing the [loyalty](https://www.talon.one/pillar-pages/loyalty) points that should be created. The file should be sent as multipart data.  **Important**: For existing customer profiles, the imported points are _added_ to their active points. Learn more about [Loyalty programs](https://docs.talon.one/docs/product/loyalty-programs/overview).  The CSV file can contain the following columns:  - &#x60;customerprofileid&#x60;: The integration ID of the customer profile that should receive the loyalty points. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60;: The earliest date when the points can be redeemed. On this date and until the expiry date, the points are &#x60;active&#x60;. - &#x60;expirydate&#x60;: The latest date when the points can be redeemed. After this date, the points are &#x60;expired&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): A reason why these points were awarded.  **Important:** Do not leave empty columns in the file.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One.  **Example:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importLoyaltyPointsTest() throws ApiException {
        Integer loyaltyProgramId = null;
        String upFile = null;
        ModelImport response = api.importLoyaltyPoints(loyaltyProgramId, upFile);

        // TODO: test validations
    }
    
    /**
     * Import giveaway codes into a giveaway pool
     *
     * Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated to the giveaway entity, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  **Important:** Do not leave empty columns in the file.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importPoolGiveawaysTest() throws ApiException {
        Integer poolId = null;
        String upFile = null;
        ModelImport response = api.importPoolGiveaways(poolId, upFile);

        // TODO: test validations
    }
    
    /**
     * Import referrals via CSV file
     *
     * Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.    For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the referral entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importReferralsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        String upFile = null;
        ModelImport response = api.importReferrals(applicationId, campaignId, upFile);

        // TODO: test validations
    }
    
    /**
     * List collections in account
     *
     * List collections in account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAccountCollectionsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        Boolean withTotalResultSize = null;
        String name = null;
        InlineResponse2008 response = api.listAccountCollections(pageSize, skip, sort, withTotalResultSize, name);

        // TODO: test validations
    }
    
    /**
     * List collections
     *
     * List collections in the campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCollectionsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        Boolean withTotalResultSize = null;
        String name = null;
        InlineResponse2009 response = api.listCollections(applicationId, campaignId, pageSize, skip, sort, withTotalResultSize, name);

        // TODO: test validations
    }
    
    /**
     * List collections in application
     *
     * List collections from all campaigns in the Application.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCollectionsInApplicationTest() throws ApiException {
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        Boolean withTotalResultSize = null;
        String name = null;
        InlineResponse2009 response = api.listCollectionsInApplication(applicationId, pageSize, skip, sort, withTotalResultSize, name);

        // TODO: test validations
    }
    
    /**
     * Deduct points in loyalty program for given customer
     *
     * Remove points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](/integration-api/#operation/updateCustomerSessionV2). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeLoyaltyPointsTest() throws ApiException {
        String loyaltyProgramId = null;
        String integrationId = null;
        LoyaltyPoints body = null;
        api.removeLoyaltyPoints(loyaltyProgramId, integrationId, body);

        // TODO: test validations
    }
    
    /**
     * Reset password
     *
     * Consumes the supplied password reset token and updates the password for the associated account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetPasswordTest() throws ApiException {
        NewPassword body = null;
        NewPassword response = api.resetPassword(body);

        // TODO: test validations
    }
    
    /**
     * List coupons that match the given attributes (without total count)
     *
     * List the coupons whose attributes match the query criteria in all **active** campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchCouponsAdvancedApplicationWideWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        Object body = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        String batchId = null;
        Boolean exactMatch = null;
        String campaignState = null;
        InlineResponse2005 response = api.searchCouponsAdvancedApplicationWideWithoutTotalCount(applicationId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);

        // TODO: test validations
    }
    
    /**
     * List coupons that match the given attributes in campaign (without total count)
     *
     * List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchCouponsAdvancedWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Object body = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        Boolean exactMatch = null;
        String batchId = null;
        InlineResponse2005 response = api.searchCouponsAdvancedWithoutTotalCount(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);

        // TODO: test validations
    }
    
    /**
     * Update account-level collection description and connected Applications
     *
     * Edit the description of the account-level collection and enable or disable the collection in different Applications.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAccountCollectionTest() throws ApiException {
        Integer collectionId = null;
        UpdateCollection body = null;
        Collection response = api.updateAccountCollection(collectionId, body);

        // TODO: test validations
    }
    
    /**
     * Update additional cost
     *
     * Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAdditionalCostTest() throws ApiException {
        Integer additionalCostId = null;
        NewAdditionalCost body = null;
        AccountAdditionalCost response = api.updateAdditionalCost(additionalCostId, body);

        // TODO: test validations
    }
    
    /**
     * Update custom attribute
     *
     * Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAttributeTest() throws ApiException {
        Integer attributeId = null;
        NewAttribute body = null;
        Attribute response = api.updateAttribute(attributeId, body);

        // TODO: test validations
    }
    
    /**
     * Update campaign
     *
     * Update the given campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCampaignTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        UpdateCampaign body = null;
        Campaign response = api.updateCampaign(applicationId, campaignId, body);

        // TODO: test validations
    }
    
    /**
     * Update collection description
     *
     * Edit the description of the collection.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCollectionTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer collectionId = null;
        UpdateCampaignCollection body = null;
        Collection response = api.updateCollection(applicationId, campaignId, collectionId, body);

        // TODO: test validations
    }
    
    /**
     * Update coupon
     *
     * Update the specified coupon.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCouponTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        String couponId = null;
        UpdateCoupon body = null;
        Coupon response = api.updateCoupon(applicationId, campaignId, couponId, body);

        // TODO: test validations
    }
    
    /**
     * Update coupons
     *
     * Update all coupons of an campaign, or a specific batch of coupons. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager or by using [List coupons](#operation/getCouponsWithoutTotalCount).  **Important**: - Only send sequential requests to this endpoint. - Requests to this endpoint timeout after 30 minutes. If you hit a timeout, reach out to our support team.  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCouponBatchTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        UpdateCouponBatch body = null;
        api.updateCouponBatch(applicationId, campaignId, body);

        // TODO: test validations
    }
    
    /**
     * Update referral
     *
     * Update the specified referral.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateReferralTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        String referralId = null;
        UpdateReferral body = null;
        Referral response = api.updateReferral(applicationId, campaignId, referralId, body);

        // TODO: test validations
    }
    
}
