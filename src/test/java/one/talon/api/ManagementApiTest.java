/*
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package one.talon.api;

import one.talon.ApiException;
import one.talon.model.Account;
import one.talon.model.AccountAnalytics;
import one.talon.model.AccountLimits;
import one.talon.model.Application;
import one.talon.model.ApplicationApiHealth;
import one.talon.model.ApplicationCustomer;
import one.talon.model.ApplicationCustomerSearch;
import one.talon.model.ApplicationSession;
import one.talon.model.Attribute;
import one.talon.model.AttributeQuery;
import java.math.BigDecimal;
import one.talon.model.Campaign;
import one.talon.model.CampaignCopy;
import one.talon.model.CampaignSearch;
import one.talon.model.CampaignSet;
import one.talon.model.Coupon;
import one.talon.model.CouponSearch;
import one.talon.model.CustomerActivityReport;
import one.talon.model.CustomerAnalytics;
import one.talon.model.InlineResponse2001;
import one.talon.model.InlineResponse20010;
import one.talon.model.InlineResponse20011;
import one.talon.model.InlineResponse20012;
import one.talon.model.InlineResponse20013;
import one.talon.model.InlineResponse20014;
import one.talon.model.InlineResponse20015;
import one.talon.model.InlineResponse20016;
import one.talon.model.InlineResponse20017;
import one.talon.model.InlineResponse20018;
import one.talon.model.InlineResponse20019;
import one.talon.model.InlineResponse2002;
import one.talon.model.InlineResponse20020;
import one.talon.model.InlineResponse20021;
import one.talon.model.InlineResponse20022;
import one.talon.model.InlineResponse20023;
import one.talon.model.InlineResponse20024;
import one.talon.model.InlineResponse20025;
import one.talon.model.InlineResponse20026;
import one.talon.model.InlineResponse20027;
import one.talon.model.InlineResponse20028;
import one.talon.model.InlineResponse2003;
import one.talon.model.InlineResponse2004;
import one.talon.model.InlineResponse2005;
import one.talon.model.InlineResponse2006;
import one.talon.model.InlineResponse2007;
import one.talon.model.InlineResponse2008;
import one.talon.model.InlineResponse2009;
import one.talon.model.LoginParams;
import one.talon.model.LoyaltyLedger;
import one.talon.model.LoyaltyPoints;
import one.talon.model.LoyaltyProgram;
import one.talon.model.NewCampaign;
import one.talon.model.NewCampaignSet;
import one.talon.model.NewCoupons;
import one.talon.model.NewPassword;
import one.talon.model.NewPasswordEmail;
import one.talon.model.NewRuleset;
import org.threeten.bp.OffsetDateTime;
import one.talon.model.Role;
import one.talon.model.Ruleset;
import one.talon.model.Session;
import one.talon.model.UpdateCampaign;
import one.talon.model.UpdateCoupon;
import one.talon.model.UpdateCouponBatch;
import one.talon.model.User;
import one.talon.model.Webhook;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementApi
 */
@Ignore
public class ManagementApiTest {

    private final ManagementApi api = new ManagementApi();

    
    /**
     * Add points in a certain loyalty program for the specified customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLoyaltyPointsTest() throws ApiException {
        String programID = null;
        String integrationID = null;
        LoyaltyPoints loyaltyPoints = null;
        api.addLoyaltyPoints(programID, integrationID, loyaltyPoints);

        // TODO: test validations
    }
    
    /**
     * Copy the campaign into every specified application
     *
     * Copy the campaign into every specified application.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyCampaignToApplicationsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        CampaignCopy campaignCopy = null;
        InlineResponse2003 response = api.copyCampaignToApplications(applicationId, campaignId, campaignCopy);

        // TODO: test validations
    }
    
    /**
     * Create a Campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCampaignTest() throws ApiException {
        Integer applicationId = null;
        NewCampaign newCampaign = null;
        Campaign response = api.createCampaign(applicationId, newCampaign);

        // TODO: test validations
    }
    
    /**
     * Create Coupons
     *
     * Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupns can be created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCouponsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        NewCoupons newCoupons = null;
        String silent = null;
        InlineResponse2001 response = api.createCoupons(applicationId, campaignId, newCoupons, silent);

        // TODO: test validations
    }
    
    /**
     * Request a password reset
     *
     * Sends an email with a password recovery link to the email of an existing account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPasswordRecoveryEmailTest() throws ApiException {
        NewPasswordEmail newPasswordEmail = null;
        NewPasswordEmail response = api.createPasswordRecoveryEmail(newPasswordEmail);

        // TODO: test validations
    }
    
    /**
     * Create a Ruleset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRulesetTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        NewRuleset newRuleset = null;
        Ruleset response = api.createRuleset(applicationId, campaignId, newRuleset);

        // TODO: test validations
    }
    
    /**
     * Create a Session
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSessionTest() throws ApiException {
        LoginParams loginParams = null;
        Session response = api.createSession(loginParams);

        // TODO: test validations
    }
    
    /**
     * Delete a Campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCampaignTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        api.deleteCampaign(applicationId, campaignId);

        // TODO: test validations
    }
    
    /**
     * Delete one Coupon
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCouponTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        String couponId = null;
        api.deleteCoupon(applicationId, campaignId, couponId);

        // TODO: test validations
    }
    
    /**
     * Delete Coupons
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCouponsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        OffsetDateTime startsAfter = null;
        OffsetDateTime startsBefore = null;
        OffsetDateTime expiresAfter = null;
        OffsetDateTime expiresBefore = null;
        String valid = null;
        String batchId = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        Boolean exactMatch = null;
        api.deleteCoupons(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);

        // TODO: test validations
    }
    
    /**
     * Delete one Referral
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteReferralTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        String referralId = null;
        api.deleteReferral(applicationId, campaignId, referralId);

        // TODO: test validations
    }
    
    /**
     * Delete a Ruleset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRulesetTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer rulesetId = null;
        api.deleteRuleset(applicationId, campaignId, rulesetId);

        // TODO: test validations
    }
    
    /**
     * Get access logs for application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccessLogsTest() throws ApiException {
        Integer applicationId = null;
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        String path = null;
        String method = null;
        String status = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse2009 response = api.getAccessLogs(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get access logs for application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccessLogsWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        String path = null;
        String method = null;
        String status = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20010 response = api.getAccessLogsWithoutTotalCount(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get Account Details
     *
     * Return the details of your companies Talon.One account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        Integer accountId = null;
        Account response = api.getAccount(accountId);

        // TODO: test validations
    }
    
    /**
     * Get Account Analytics
     *
     * Return the analytics of your companies Talon.One account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountAnalyticsTest() throws ApiException {
        Integer accountId = null;
        AccountAnalytics response = api.getAccountAnalytics(accountId);

        // TODO: test validations
    }
    
    /**
     * Get Account Limits
     *
     * Returns a list of all account limits set 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountLimitsTest() throws ApiException {
        Integer accountId = null;
        AccountLimits response = api.getAccountLimits(accountId);

        // TODO: test validations
    }
    
    /**
     * Get all access logs
     *
     * Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllAccessLogsTest() throws ApiException {
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        String path = null;
        String method = null;
        String status = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse2009 response = api.getAllAccessLogs(rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get all roles.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllRolesTest() throws ApiException {
        InlineResponse20028 response = api.getAllRoles();

        // TODO: test validations
    }
    
    /**
     * Get Application
     *
     * Get the application specified by the ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationTest() throws ApiException {
        Integer applicationId = null;
        Application response = api.getApplication(applicationId);

        // TODO: test validations
    }
    
    /**
     * Get report of health of application API
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationApiHealthTest() throws ApiException {
        Integer applicationId = null;
        ApplicationApiHealth response = api.getApplicationApiHealth(applicationId);

        // TODO: test validations
    }
    
    /**
     * Get Application Customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationCustomerTest() throws ApiException {
        Integer applicationId = null;
        Integer customerId = null;
        ApplicationCustomer response = api.getApplicationCustomer(applicationId, customerId);

        // TODO: test validations
    }
    
    /**
     * List Application Customers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationCustomersTest() throws ApiException {
        Integer applicationId = null;
        InlineResponse20012 response = api.getApplicationCustomers(applicationId);

        // TODO: test validations
    }
    
    /**
     * Get a list of the customer profiles that match the given attributes
     *
     * Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: http://help.talon.one/customer/en/portal/articles/2525263-data-model?b_id&#x3D;14115#customer-profile 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationCustomersByAttributesTest() throws ApiException {
        ApplicationCustomerSearch applicationCustomerSearch = null;
        InlineResponse20013 response = api.getApplicationCustomersByAttributes(applicationCustomerSearch);

        // TODO: test validations
    }
    
    /**
     * List Applications Event Types
     *
     * Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationEventTypesTest() throws ApiException {
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20019 response = api.getApplicationEventTypes(applicationId, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * List Applications Events
     *
     * Lists all events recorded for an application. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationEventsTest() throws ApiException {
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String type = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String session = null;
        String profile = null;
        String customerName = null;
        String customerEmail = null;
        String effectsQuery = null;
        String attributesQuery = null;
        String ruleQuery = null;
        String campaignQuery = null;
        InlineResponse20017 response = api.getApplicationEvents(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, effectsQuery, attributesQuery, ruleQuery, campaignQuery);

        // TODO: test validations
    }
    
    /**
     * List Applications Events
     *
     * Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationEventsWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String type = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String session = null;
        String profile = null;
        String customerName = null;
        String customerEmail = null;
        String effectsQuery = null;
        String attributesQuery = null;
        String ruleQuery = null;
        String campaignQuery = null;
        InlineResponse20018 response = api.getApplicationEventsWithoutTotalCount(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, effectsQuery, attributesQuery, ruleQuery, campaignQuery);

        // TODO: test validations
    }
    
    /**
     * Get Application Session
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationSessionTest() throws ApiException {
        Integer applicationId = null;
        Integer sessionId = null;
        ApplicationSession response = api.getApplicationSession(applicationId, sessionId);

        // TODO: test validations
    }
    
    /**
     * List Application Sessions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationSessionsTest() throws ApiException {
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String profile = null;
        String state = null;
        String coupon = null;
        InlineResponse20016 response = api.getApplicationSessions(applicationId, pageSize, skip, sort, profile, state, coupon);

        // TODO: test validations
    }
    
    /**
     * List Applications
     *
     * List all application in the current account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApplicationsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse2002 response = api.getApplications(pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get a custom attribute
     *
     * Returns custom attribute for the account by its id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttributeTest() throws ApiException {
        Integer attributeId = null;
        Attribute response = api.getAttribute(attributeId);

        // TODO: test validations
    }
    
    /**
     * Get a Campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Campaign response = api.getCampaign(applicationId, campaignId);

        // TODO: test validations
    }
    
    /**
     * Get analytics of campaigns
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignAnalyticsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        String granularity = null;
        InlineResponse20011 response = api.getCampaignAnalytics(applicationId, campaignId, rangeStart, rangeEnd, granularity);

        // TODO: test validations
    }
    
    /**
     * Get a list of all campaigns that match the given attributes
     *
     * Gets a list of all the campaigns that exactly match a set of attributes. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignByAttributesTest() throws ApiException {
        Integer applicationId = null;
        CampaignSearch campaignSearch = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String campaignState = null;
        InlineResponse2003 response = api.getCampaignByAttributes(applicationId, campaignSearch, pageSize, skip, sort, campaignState);

        // TODO: test validations
    }
    
    /**
     * List CampaignSet
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignSetTest() throws ApiException {
        Integer applicationId = null;
        CampaignSet response = api.getCampaignSet(applicationId);

        // TODO: test validations
    }
    
    /**
     * List your Campaigns
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignsTest() throws ApiException {
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String campaignState = null;
        String name = null;
        String tags = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        InlineResponse2003 response = api.getCampaigns(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter);

        // TODO: test validations
    }
    
    /**
     * Get audit log for an account
     *
     * Get list of changes caused by API calls for an account. Only accessible for admins.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChangesTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20025 response = api.getChanges(pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * List Coupons
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCouponsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        OffsetDateTime startsAfter = null;
        OffsetDateTime startsBefore = null;
        OffsetDateTime expiresAfter = null;
        OffsetDateTime expiresBefore = null;
        String valid = null;
        String batchId = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        Boolean exactMatch = null;
        InlineResponse2001 response = api.getCoupons(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);

        // TODO: test validations
    }
    
    /**
     * Get a list of the coupons that match the given attributes
     *
     * Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCouponsByAttributesTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        CouponSearch couponSearch = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        Boolean exactMatch = null;
        String batchId = null;
        InlineResponse2001 response = api.getCouponsByAttributes(applicationId, campaignId, couponSearch, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);

        // TODO: test validations
    }
    
    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application
     *
     * Gets a list of all the coupons with attributes matching the query criteria Application wide 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCouponsByAttributesApplicationWideTest() throws ApiException {
        Integer applicationId = null;
        CouponSearch couponSearch = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        String batchId = null;
        Boolean exactMatch = null;
        String campaignState = null;
        InlineResponse2001 response = api.getCouponsByAttributesApplicationWide(applicationId, couponSearch, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);

        // TODO: test validations
    }
    
    /**
     * List Coupons
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCouponsWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        String batchId = null;
        Boolean exactMatch = null;
        InlineResponse2005 response = api.getCouponsWithoutTotalCount(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch);

        // TODO: test validations
    }
    
    /**
     * Get Activity Report for Single Customer
     *
     * Fetch summary report for single application customer based on a time range
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerActivityReportTest() throws ApiException {
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        Integer applicationId = null;
        Integer customerId = null;
        Integer pageSize = null;
        Integer skip = null;
        CustomerActivityReport response = api.getCustomerActivityReport(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip);

        // TODO: test validations
    }
    
    /**
     * Get Activity Reports for Application Customers
     *
     * Fetch summary reports for all application customers based on a time range
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerActivityReportsTest() throws ApiException {
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String name = null;
        String integrationId = null;
        String campaignName = null;
        String advocateName = null;
        InlineResponse20014 response = api.getCustomerActivityReports(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);

        // TODO: test validations
    }
    
    /**
     * Get Activity Reports for Application Customers
     *
     * Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerActivityReportsWithoutTotalCountTest() throws ApiException {
        OffsetDateTime rangeStart = null;
        OffsetDateTime rangeEnd = null;
        Integer applicationId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String name = null;
        String integrationId = null;
        String campaignName = null;
        String advocateName = null;
        InlineResponse20015 response = api.getCustomerActivityReportsWithoutTotalCount(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);

        // TODO: test validations
    }
    
    /**
     * Get Analytics Report for a Customer
     *
     * Fetch analytics for single application customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerAnalyticsTest() throws ApiException {
        Integer applicationId = null;
        Integer customerId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        CustomerAnalytics response = api.getCustomerAnalytics(applicationId, customerId, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get Customer Profile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerProfileTest() throws ApiException {
        Integer applicationId = null;
        Integer customerId = null;
        ApplicationCustomer response = api.getCustomerProfile(applicationId, customerId);

        // TODO: test validations
    }
    
    /**
     * List Customer Profiles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerProfilesTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        InlineResponse20013 response = api.getCustomerProfiles(pageSize, skip);

        // TODO: test validations
    }
    
    /**
     * Get a list of the customer profiles that match the given attributes
     *
     * Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: http://help.talon.one/customer/en/portal/articles/2525263-data-model?b_id&#x3D;14115#customer-profile 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomersByAttributesTest() throws ApiException {
        ApplicationCustomerSearch applicationCustomerSearch = null;
        Integer pageSize = null;
        Integer skip = null;
        InlineResponse20013 response = api.getCustomersByAttributes(applicationCustomerSearch, pageSize, skip);

        // TODO: test validations
    }
    
    /**
     * List Event Types
     *
     * Fetch all event type definitions for your account. Each event type can be 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventTypesTest() throws ApiException {
        String applicationIds = null;
        String name = null;
        Boolean includeOldVersions = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20023 response = api.getEventTypes(applicationIds, name, includeOldVersions, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get Exports
     *
     * Get a list of all past exports 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExportsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        Integer applicationId = null;
        Integer campaignId = null;
        String entity = null;
        InlineResponse20026 response = api.getExports(pageSize, skip, applicationId, campaignId, entity);

        // TODO: test validations
    }
    
    /**
     * Get Imports
     *
     * Get a list of all past imports 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getImportsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        InlineResponse20027 response = api.getImports(pageSize, skip);

        // TODO: test validations
    }
    
    /**
     * get the Loyalty Ledger for this integrationID
     *
     * Get the Loyalty Ledger for this profile integration ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoyaltyPointsTest() throws ApiException {
        String programID = null;
        String integrationID = null;
        LoyaltyLedger response = api.getLoyaltyPoints(programID, integrationID);

        // TODO: test validations
    }
    
    /**
     * Get a loyalty program
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoyaltyProgramTest() throws ApiException {
        String programID = null;
        LoyaltyProgram response = api.getLoyaltyProgram(programID);

        // TODO: test validations
    }
    
    /**
     * List all loyalty Programs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoyaltyProgramsTest() throws ApiException {
        InlineResponse2008 response = api.getLoyaltyPrograms();

        // TODO: test validations
    }
    
    /**
     * List Referrals
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReferralsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String code = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        String advocate = null;
        InlineResponse2006 response = api.getReferrals(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);

        // TODO: test validations
    }
    
    /**
     * List Referrals
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReferralsWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String code = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        String advocate = null;
        InlineResponse2007 response = api.getReferralsWithoutTotalCount(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);

        // TODO: test validations
    }
    
    /**
     * Get information for the specified role.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoleTest() throws ApiException {
        Integer roleId = null;
        Role response = api.getRole(roleId);

        // TODO: test validations
    }
    
    /**
     * Get a Ruleset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRulesetTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer rulesetId = null;
        Ruleset response = api.getRuleset(applicationId, campaignId, rulesetId);

        // TODO: test validations
    }
    
    /**
     * List Campaign Rulesets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRulesetsTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse2004 response = api.getRulesets(applicationId, campaignId, pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get a single User
     *
     * Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        Integer userId = null;
        User response = api.getUser(userId);

        // TODO: test validations
    }
    
    /**
     * List Users in your account
     *
     * Retrieve all users in your account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        InlineResponse20024 response = api.getUsers(pageSize, skip, sort);

        // TODO: test validations
    }
    
    /**
     * Get Webhook
     *
     * Returns an webhook by its id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookTest() throws ApiException {
        Integer webhookId = null;
        Webhook response = api.getWebhook(webhookId);

        // TODO: test validations
    }
    
    /**
     * List Webhook activation Log Entries
     *
     * Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookActivationLogsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String integrationRequestUuid = null;
        BigDecimal webhookId = null;
        BigDecimal applicationId = null;
        BigDecimal campaignId = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        InlineResponse20021 response = api.getWebhookActivationLogs(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter);

        // TODO: test validations
    }
    
    /**
     * List Webhook Log Entries
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookLogsTest() throws ApiException {
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String status = null;
        BigDecimal webhookId = null;
        BigDecimal applicationId = null;
        BigDecimal campaignId = null;
        String requestUuid = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        InlineResponse20022 response = api.getWebhookLogs(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter);

        // TODO: test validations
    }
    
    /**
     * List Webhooks
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhooksTest() throws ApiException {
        String applicationIds = null;
        String sort = null;
        Integer pageSize = null;
        Integer skip = null;
        InlineResponse20020 response = api.getWebhooks(applicationIds, sort, pageSize, skip);

        // TODO: test validations
    }
    
    /**
     * Trigger refresh on stale analytics.
     *
     * Should be used to trigger a manual refresh of analytics.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshAnalyticsTest() throws ApiException {
        api.refreshAnalytics();

        // TODO: test validations
    }
    
    /**
     * Deduct points in a certain loyalty program for the specified customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeLoyaltyPointsTest() throws ApiException {
        String programID = null;
        String integrationID = null;
        LoyaltyPoints loyaltyPoints = null;
        api.removeLoyaltyPoints(programID, integrationID, loyaltyPoints);

        // TODO: test validations
    }
    
    /**
     * Reset password
     *
     * Consumes the supplied password reset token and updates the password for the associated account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetPasswordTest() throws ApiException {
        NewPassword newPassword = null;
        NewPassword response = api.resetPassword(newPassword);

        // TODO: test validations
    }
    
    /**
     * Get a list of the coupons that match the given attributes
     *
     * Gets a list of all the coupons with attributes matching the query criteria 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchCouponsAdvancedTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        AttributeQuery attributeQuery = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        Boolean exactMatch = null;
        String batchId = null;
        InlineResponse2001 response = api.searchCouponsAdvanced(applicationId, campaignId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);

        // TODO: test validations
    }
    
    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application
     *
     * Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchCouponsAdvancedApplicationWideTest() throws ApiException {
        Integer applicationId = null;
        AttributeQuery attributeQuery = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        String batchId = null;
        Boolean exactMatch = null;
        String campaignState = null;
        InlineResponse2001 response = api.searchCouponsAdvancedApplicationWide(applicationId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);

        // TODO: test validations
    }
    
    /**
     * Get a list of the coupons that match the given attributes in all active campaigns of an application
     *
     * Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchCouponsAdvancedApplicationWideWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        AttributeQuery attributeQuery = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        String batchId = null;
        Boolean exactMatch = null;
        String campaignState = null;
        InlineResponse2005 response = api.searchCouponsAdvancedApplicationWideWithoutTotalCount(applicationId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);

        // TODO: test validations
    }
    
    /**
     * Get a list of the coupons that match the given attributes
     *
     * Gets a list of all the coupons with attributes matching the query criteria 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchCouponsAdvancedWithoutTotalCountTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        AttributeQuery attributeQuery = null;
        Integer pageSize = null;
        Integer skip = null;
        String sort = null;
        String value = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String valid = null;
        String usable = null;
        Integer referralId = null;
        String recipientIntegrationId = null;
        Boolean exactMatch = null;
        String batchId = null;
        InlineResponse2005 response = api.searchCouponsAdvancedWithoutTotalCount(applicationId, campaignId, attributeQuery, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);

        // TODO: test validations
    }
    
    /**
     * Set account limits
     *
     * sets account limits  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAccountLimitsTest() throws ApiException {
        Integer accountId = null;
        AccountLimits accountLimits = null;
        api.setAccountLimits(accountId, accountLimits);

        // TODO: test validations
    }
    
    /**
     * Update a Campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCampaignTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        UpdateCampaign updateCampaign = null;
        Campaign response = api.updateCampaign(applicationId, campaignId, updateCampaign);

        // TODO: test validations
    }
    
    /**
     * Update a Campaign Set
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCampaignSetTest() throws ApiException {
        Integer applicationId = null;
        NewCampaignSet newCampaignSet = null;
        CampaignSet response = api.updateCampaignSet(applicationId, newCampaignSet);

        // TODO: test validations
    }
    
    /**
     * Update a Coupon
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCouponTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        String couponId = null;
        UpdateCoupon updateCoupon = null;
        Coupon response = api.updateCoupon(applicationId, campaignId, couponId, updateCoupon);

        // TODO: test validations
    }
    
    /**
     * Update a Batch of Coupons
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCouponBatchTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        UpdateCouponBatch updateCouponBatch = null;
        api.updateCouponBatch(applicationId, campaignId, updateCouponBatch);

        // TODO: test validations
    }
    
    /**
     * Update a Ruleset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRulesetTest() throws ApiException {
        Integer applicationId = null;
        Integer campaignId = null;
        Integer rulesetId = null;
        NewRuleset newRuleset = null;
        Ruleset response = api.updateRuleset(applicationId, campaignId, rulesetId, newRuleset);

        // TODO: test validations
    }
    
}
